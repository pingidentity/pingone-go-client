// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyResponseFlowDistributionSuccessNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyResponseFlowDistributionSuccessNode{}

// checks if the DaVinciFlowPolicyResponseFlowDistributionSuccessNode type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyResponseFlowDistributionSuccessNode{}

// DaVinciFlowPolicyResponseFlowDistributionSuccessNode struct for DaVinciFlowPolicyResponseFlowDistributionSuccessNode
type DaVinciFlowPolicyResponseFlowDistributionSuccessNode struct {
	Id                   string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyResponseFlowDistributionSuccessNode DaVinciFlowPolicyResponseFlowDistributionSuccessNode

// NewDaVinciFlowPolicyResponseFlowDistributionSuccessNode instantiates a new DaVinciFlowPolicyResponseFlowDistributionSuccessNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyResponseFlowDistributionSuccessNode(id string) *DaVinciFlowPolicyResponseFlowDistributionSuccessNode {
	this := DaVinciFlowPolicyResponseFlowDistributionSuccessNode{}
	this.Id = id
	return &this
}

// NewDaVinciFlowPolicyResponseFlowDistributionSuccessNodeWithDefaults instantiates a new DaVinciFlowPolicyResponseFlowDistributionSuccessNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyResponseFlowDistributionSuccessNodeWithDefaults() *DaVinciFlowPolicyResponseFlowDistributionSuccessNode {
	this := DaVinciFlowPolicyResponseFlowDistributionSuccessNode{}
	return &this
}

// GetId returns the Id field value
func (o *DaVinciFlowPolicyResponseFlowDistributionSuccessNode) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyResponseFlowDistributionSuccessNode) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowPolicyResponseFlowDistributionSuccessNode) SetId(v string) {
	o.Id = v
}

func (o DaVinciFlowPolicyResponseFlowDistributionSuccessNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyResponseFlowDistributionSuccessNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyResponseFlowDistributionSuccessNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyResponseFlowDistributionSuccessNode := _DaVinciFlowPolicyResponseFlowDistributionSuccessNode{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyResponseFlowDistributionSuccessNode)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyResponseFlowDistributionSuccessNode(varDaVinciFlowPolicyResponseFlowDistributionSuccessNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyResponseFlowDistributionSuccessNode) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode struct {
	value *DaVinciFlowPolicyResponseFlowDistributionSuccessNode
	isSet bool
}

func (v NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode) Get() *DaVinciFlowPolicyResponseFlowDistributionSuccessNode {
	return v.value
}

func (v *NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode) Set(val *DaVinciFlowPolicyResponseFlowDistributionSuccessNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode(val *DaVinciFlowPolicyResponseFlowDistributionSuccessNode) *NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode {
	return &NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyResponseFlowDistributionSuccessNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
