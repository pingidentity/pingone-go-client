// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DavinciConnectorInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorInstance{}

// checks if the DavinciConnectorInstance type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorInstance{}

// DavinciConnectorInstance struct for DavinciConnectorInstance
type DavinciConnectorInstance struct {
	Links                DavinciConnectorInstanceLinks `json:"_links"`
	Connector            ResourceRelationshipDaVinci   `json:"connector"`
	CreatedAt            *time.Time                    `json:"createdAt,omitempty"`
	Environment          ResourceRelationshipPingOne   `json:"environment"`
	Id                   string                        `json:"id"`
	Name                 string                        `json:"name"`
	Properties           map[string]interface{}        `json:"properties,omitempty"`
	UpdatedAt            *time.Time                    `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorInstance DavinciConnectorInstance

// NewDavinciConnectorInstance instantiates a new DavinciConnectorInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorInstance(links DavinciConnectorInstanceLinks, connector ResourceRelationshipDaVinci, environment ResourceRelationshipPingOne, id string, name string) *DavinciConnectorInstance {
	this := DavinciConnectorInstance{}
	this.Links = links
	this.Connector = connector
	this.Environment = environment
	this.Id = id
	this.Name = name
	return &this
}

// NewDavinciConnectorInstanceWithDefaults instantiates a new DavinciConnectorInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorInstanceWithDefaults() *DavinciConnectorInstance {
	this := DavinciConnectorInstance{}
	return &this
}

// GetLinks returns the Links field value
func (o *DavinciConnectorInstance) GetLinks() DavinciConnectorInstanceLinks {
	if o == nil {
		var ret DavinciConnectorInstanceLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetLinksOk() (*DavinciConnectorInstanceLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DavinciConnectorInstance) SetLinks(v DavinciConnectorInstanceLinks) {
	o.Links = v
}

// GetConnector returns the Connector field value
func (o *DavinciConnectorInstance) GetConnector() ResourceRelationshipDaVinci {
	if o == nil {
		var ret ResourceRelationshipDaVinci
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetConnectorOk() (*ResourceRelationshipDaVinci, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *DavinciConnectorInstance) SetConnector(v ResourceRelationshipDaVinci) {
	o.Connector = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DavinciConnectorInstance) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DavinciConnectorInstance) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DavinciConnectorInstance) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnvironment returns the Environment field value
func (o *DavinciConnectorInstance) GetEnvironment() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetEnvironmentOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DavinciConnectorInstance) SetEnvironment(v ResourceRelationshipPingOne) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DavinciConnectorInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DavinciConnectorInstance) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DavinciConnectorInstance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DavinciConnectorInstance) SetName(v string) {
	o.Name = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DavinciConnectorInstance) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DavinciConnectorInstance) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *DavinciConnectorInstance) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DavinciConnectorInstance) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstance) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DavinciConnectorInstance) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DavinciConnectorInstance) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DavinciConnectorInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["connector"] = o.Connector
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"connector",
		"environment",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDavinciConnectorInstance := _DavinciConnectorInstance{}

	err = json.Unmarshal(data, &varDavinciConnectorInstance)

	if err != nil {
		return err
	}

	*o = DavinciConnectorInstance(varDavinciConnectorInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorInstance) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("connector", o.Connector))
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.Properties) {
		logAttrs = append(logAttrs, slog.Any("properties", o.Properties))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorInstance struct {
	value *DavinciConnectorInstance
	isSet bool
}

func (v NullableDavinciConnectorInstance) Get() *DavinciConnectorInstance {
	return v.value
}

func (v *NullableDavinciConnectorInstance) Set(val *DavinciConnectorInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorInstance(val *DavinciConnectorInstance) *NullableDavinciConnectorInstance {
	return &NullableDavinciConnectorInstance{value: val, isSet: true}
}

func (v NullableDavinciConnectorInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
