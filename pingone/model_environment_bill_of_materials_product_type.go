// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentBillOfMaterialsProductType the model 'EnvironmentBillOfMaterialsProductType'
type EnvironmentBillOfMaterialsProductType string

// List of Environment_Bill_of_Materials_Product_type
const (
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ACCESS             EnvironmentBillOfMaterialsProductType = "PING_ACCESS"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_AUTHORIZE          EnvironmentBillOfMaterialsProductType = "PING_AUTHORIZE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_CENTRAL            EnvironmentBillOfMaterialsProductType = "PING_CENTRAL"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_DATA_GOVERNANCE    EnvironmentBillOfMaterialsProductType = "PING_DATA_GOVERNANCE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_DATA_SYNC          EnvironmentBillOfMaterialsProductType = "PING_DATA_SYNC"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_DIRECTORY          EnvironmentBillOfMaterialsProductType = "PING_DIRECTORY"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_FEDERATE           EnvironmentBillOfMaterialsProductType = "PING_FEDERATE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ID                 EnvironmentBillOfMaterialsProductType = "PING_ID"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ID_SDK             EnvironmentBillOfMaterialsProductType = "PING_ID_SDK"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_INTELLIGENCE       EnvironmentBillOfMaterialsProductType = "PING_INTELLIGENCE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_AUTHORIZE      EnvironmentBillOfMaterialsProductType = "PING_ONE_AUTHORIZE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_BASE           EnvironmentBillOfMaterialsProductType = "PING_ONE_BASE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_CREDENTIALS    EnvironmentBillOfMaterialsProductType = "PING_ONE_CREDENTIALS"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_DAVINCI        EnvironmentBillOfMaterialsProductType = "PING_ONE_DAVINCI"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_FOR_ENTERPRISE EnvironmentBillOfMaterialsProductType = "PING_ONE_FOR_ENTERPRISE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_FOR_SAAS       EnvironmentBillOfMaterialsProductType = "PING_ONE_FOR_SAAS"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_FRAUD          EnvironmentBillOfMaterialsProductType = "PING_ONE_FRAUD"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_MFA            EnvironmentBillOfMaterialsProductType = "PING_ONE_MFA"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_ORCHESTRATE    EnvironmentBillOfMaterialsProductType = "PING_ONE_ORCHESTRATE"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_PROVISIONING   EnvironmentBillOfMaterialsProductType = "PING_ONE_PROVISIONING"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_RISK           EnvironmentBillOfMaterialsProductType = "PING_ONE_RISK"
	ENVIRONMENTBILLOFMATERIALSPRODUCTTYPE_PING_ONE_VERIFY         EnvironmentBillOfMaterialsProductType = "PING_ONE_VERIFY"
)

// All allowed values of EnvironmentBillOfMaterialsProductType enum
var AllowedEnvironmentBillOfMaterialsProductTypeEnumValues = []EnvironmentBillOfMaterialsProductType{
	"PING_ACCESS",
	"PING_AUTHORIZE",
	"PING_CENTRAL",
	"PING_DATA_GOVERNANCE",
	"PING_DATA_SYNC",
	"PING_DIRECTORY",
	"PING_FEDERATE",
	"PING_ID",
	"PING_ID_SDK",
	"PING_INTELLIGENCE",
	"PING_ONE_AUTHORIZE",
	"PING_ONE_BASE",
	"PING_ONE_CREDENTIALS",
	"PING_ONE_DAVINCI",
	"PING_ONE_FOR_ENTERPRISE",
	"PING_ONE_FOR_SAAS",
	"PING_ONE_FRAUD",
	"PING_ONE_MFA",
	"PING_ONE_ORCHESTRATE",
	"PING_ONE_PROVISIONING",
	"PING_ONE_RISK",
	"PING_ONE_VERIFY",
}

func (v *EnvironmentBillOfMaterialsProductType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentBillOfMaterialsProductType(value)
	for _, existing := range AllowedEnvironmentBillOfMaterialsProductTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentBillOfMaterialsProductType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentBillOfMaterialsProductTypeFromValue returns a pointer to a valid EnvironmentBillOfMaterialsProductType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentBillOfMaterialsProductTypeFromValue(v string) (*EnvironmentBillOfMaterialsProductType, error) {
	ev := EnvironmentBillOfMaterialsProductType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentBillOfMaterialsProductType: valid values are %v", v, AllowedEnvironmentBillOfMaterialsProductTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentBillOfMaterialsProductType) IsValid() bool {
	for _, existing := range AllowedEnvironmentBillOfMaterialsProductTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Bill_of_Materials_Product_type value
func (v EnvironmentBillOfMaterialsProductType) Ptr() *EnvironmentBillOfMaterialsProductType {
	return &v
}

type NullableEnvironmentBillOfMaterialsProductType struct {
	value *EnvironmentBillOfMaterialsProductType
	isSet bool
}

func (v NullableEnvironmentBillOfMaterialsProductType) Get() *EnvironmentBillOfMaterialsProductType {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterialsProductType) Set(val *EnvironmentBillOfMaterialsProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterialsProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterialsProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterialsProductType(val *EnvironmentBillOfMaterialsProductType) *NullableEnvironmentBillOfMaterialsProductType {
	return &NullableEnvironmentBillOfMaterialsProductType{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterialsProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterialsProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
