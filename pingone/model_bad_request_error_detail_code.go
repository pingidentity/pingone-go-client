// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// BadRequestErrorDetailCode the model 'BadRequestErrorDetailCode'
type BadRequestErrorDetailCode string

// List of Bad_Request_Error_Detail_Code
const (
	BADREQUESTERRORDETAILCODE_ACCOUNT_NOT_USABLE        BadRequestErrorDetailCode = "ACCOUNT_NOT_USABLE"
	BADREQUESTERRORDETAILCODE_CONSTRAINT_VIOLATION      BadRequestErrorDetailCode = "CONSTRAINT_VIOLATION"
	BADREQUESTERRORDETAILCODE_EMPTY_VALUE               BadRequestErrorDetailCode = "EMPTY_VALUE"
	BADREQUESTERRORDETAILCODE_INVALID_FILTER            BadRequestErrorDetailCode = "INVALID_FILTER"
	BADREQUESTERRORDETAILCODE_INVALID_OTP               BadRequestErrorDetailCode = "INVALID_OTP"
	BADREQUESTERRORDETAILCODE_INVALID_PARAMETER         BadRequestErrorDetailCode = "INVALID_PARAMETER"
	BADREQUESTERRORDETAILCODE_INVALID_VALUE             BadRequestErrorDetailCode = "INVALID_VALUE"
	BADREQUESTERRORDETAILCODE_MFA_AUTH_METHODS_CONFLICT BadRequestErrorDetailCode = "MFA_AUTH_METHODS_CONFLICT"
	BADREQUESTERRORDETAILCODE_NO_PASSWORD               BadRequestErrorDetailCode = "NO_PASSWORD"
	BADREQUESTERRORDETAILCODE_OUT_OF_RANGE              BadRequestErrorDetailCode = "OUT_OF_RANGE"
	BADREQUESTERRORDETAILCODE_REQUIRED_VALUE            BadRequestErrorDetailCode = "REQUIRED_VALUE"
	BADREQUESTERRORDETAILCODE_SIZE_LIMIT_EXCEEDED       BadRequestErrorDetailCode = "SIZE_LIMIT_EXCEEDED"
	BADREQUESTERRORDETAILCODE_UNIQUENESS_VIOLATION      BadRequestErrorDetailCode = "UNIQUENESS_VIOLATION"
)

// All allowed values of BadRequestErrorDetailCode enum
var AllowedBadRequestErrorDetailCodeEnumValues = []BadRequestErrorDetailCode{
	"ACCOUNT_NOT_USABLE",
	"CONSTRAINT_VIOLATION",
	"EMPTY_VALUE",
	"INVALID_FILTER",
	"INVALID_OTP",
	"INVALID_PARAMETER",
	"INVALID_VALUE",
	"MFA_AUTH_METHODS_CONFLICT",
	"NO_PASSWORD",
	"OUT_OF_RANGE",
	"REQUIRED_VALUE",
	"SIZE_LIMIT_EXCEEDED",
	"UNIQUENESS_VIOLATION",
}

func (v *BadRequestErrorDetailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BadRequestErrorDetailCode(value)
	for _, existing := range AllowedBadRequestErrorDetailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = BadRequestErrorDetailCode(fmt.Sprintf("%s", value))
	return nil
}

// NewBadRequestErrorDetailCodeFromValue returns a pointer to a valid BadRequestErrorDetailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBadRequestErrorDetailCodeFromValue(v string) (*BadRequestErrorDetailCode, error) {
	ev := BadRequestErrorDetailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BadRequestErrorDetailCode: valid values are %v", v, AllowedBadRequestErrorDetailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BadRequestErrorDetailCode) IsValid() bool {
	for _, existing := range AllowedBadRequestErrorDetailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Bad_Request_Error_Detail_Code value
func (v BadRequestErrorDetailCode) Ptr() *BadRequestErrorDetailCode {
	return &v
}

type NullableBadRequestErrorDetailCode struct {
	value *BadRequestErrorDetailCode
	isSet bool
}

func (v NullableBadRequestErrorDetailCode) Get() *BadRequestErrorDetailCode {
	return v.value
}

func (v *NullableBadRequestErrorDetailCode) Set(val *BadRequestErrorDetailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableBadRequestErrorDetailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableBadRequestErrorDetailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadRequestErrorDetailCode(val *BadRequestErrorDetailCode) *NullableBadRequestErrorDetailCode {
	return &NullableBadRequestErrorDetailCode{value: val, isSet: true}
}

func (v NullableBadRequestErrorDetailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadRequestErrorDetailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
