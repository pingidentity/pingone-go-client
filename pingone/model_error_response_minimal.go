/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the ErrorResponseMinimal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseMinimal{}

// ErrorResponseMinimal struct for ErrorResponseMinimal
type ErrorResponseMinimal struct {
	Message              string `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _ErrorResponseMinimal ErrorResponseMinimal

// NewErrorResponseMinimal instantiates a new ErrorResponseMinimal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseMinimal(message string) *ErrorResponseMinimal {
	this := ErrorResponseMinimal{}
	this.Message = message
	return &this
}

// NewErrorResponseMinimalWithDefaults instantiates a new ErrorResponseMinimal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseMinimalWithDefaults() *ErrorResponseMinimal {
	this := ErrorResponseMinimal{}
	return &this
}

// GetMessage returns the Message field value
func (o *ErrorResponseMinimal) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseMinimal) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorResponseMinimal) SetMessage(v string) {
	o.Message = v
}

func (o ErrorResponseMinimal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseMinimal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorResponseMinimal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseMinimal := _ErrorResponseMinimal{}

	err = json.Unmarshal(data, &varErrorResponseMinimal)

	if err != nil {
		return err
	}

	*o = ErrorResponseMinimal(varErrorResponseMinimal)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o ErrorResponseMinimal) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("message", o.Message))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableErrorResponseMinimal struct {
	value *ErrorResponseMinimal
	isSet bool
}

func (v NullableErrorResponseMinimal) Get() *ErrorResponseMinimal {
	return v.value
}

func (v *NullableErrorResponseMinimal) Set(val *ErrorResponseMinimal) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseMinimal) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseMinimal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseMinimal(val *ErrorResponseMinimal) *NullableErrorResponseMinimal {
	return &NullableErrorResponseMinimal{value: val, isSet: true}
}

func (v NullableErrorResponseMinimal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseMinimal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
