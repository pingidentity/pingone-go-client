// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableDataType the model 'DaVinciVariableDataType'
type DaVinciVariableDataType string

// List of DaVinciVariable_dataType
const (
	DAVINCIVARIABLEDATATYPE_ARRAY             DaVinciVariableDataType = "array"
	DAVINCIVARIABLEDATATYPE_BOOLEAN           DaVinciVariableDataType = "boolean"
	DAVINCIVARIABLEDATATYPE_BUTTON            DaVinciVariableDataType = "button"
	DAVINCIVARIABLEDATATYPE_LIST              DaVinciVariableDataType = "list"
	DAVINCIVARIABLEDATATYPE_LIST_INT          DaVinciVariableDataType = "listInt"
	DAVINCIVARIABLEDATATYPE_MAPPING           DaVinciVariableDataType = "mapping"
	DAVINCIVARIABLEDATATYPE_NUMBER            DaVinciVariableDataType = "number"
	DAVINCIVARIABLEDATATYPE_OBJECT            DaVinciVariableDataType = "object"
	DAVINCIVARIABLEDATATYPE_PROPERTY_GROUP    DaVinciVariableDataType = "propertyGroup"
	DAVINCIVARIABLEDATATYPE_SCREEN_CONFIG     DaVinciVariableDataType = "screenConfig"
	DAVINCIVARIABLEDATATYPE_SECRET            DaVinciVariableDataType = "secret"
	DAVINCIVARIABLEDATATYPE_SK_CONNECTOR_LIST DaVinciVariableDataType = "skConnectorList"
	DAVINCIVARIABLEDATATYPE_SK_EVENT          DaVinciVariableDataType = "skEvent"
	DAVINCIVARIABLEDATATYPE_STRING            DaVinciVariableDataType = "string"
	DAVINCIVARIABLEDATATYPE_TIMESTAMP         DaVinciVariableDataType = "timestamp"
)

// All allowed values of DaVinciVariableDataType enum
var AllowedDaVinciVariableDataTypeEnumValues = []DaVinciVariableDataType{
	"array",
	"boolean",
	"button",
	"list",
	"listInt",
	"mapping",
	"number",
	"object",
	"propertyGroup",
	"screenConfig",
	"secret",
	"skConnectorList",
	"skEvent",
	"string",
	"timestamp",
}

func (v *DaVinciVariableDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciVariableDataType(value)
	for _, existing := range AllowedDaVinciVariableDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciVariableDataType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciVariableDataTypeFromValue returns a pointer to a valid DaVinciVariableDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciVariableDataTypeFromValue(v string) (*DaVinciVariableDataType, error) {
	ev := DaVinciVariableDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciVariableDataType: valid values are %v", v, AllowedDaVinciVariableDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciVariableDataType) IsValid() bool {
	for _, existing := range AllowedDaVinciVariableDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinciVariable_dataType value
func (v DaVinciVariableDataType) Ptr() *DaVinciVariableDataType {
	return &v
}

type NullableDaVinciVariableDataType struct {
	value *DaVinciVariableDataType
	isSet bool
}

func (v NullableDaVinciVariableDataType) Get() *DaVinciVariableDataType {
	return v.value
}

func (v *NullableDaVinciVariableDataType) Set(val *DaVinciVariableDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableDataType(val *DaVinciVariableDataType) *NullableDaVinciVariableDataType {
	return &NullableDaVinciVariableDataType{value: val, isSet: true}
}

func (v NullableDaVinciVariableDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
