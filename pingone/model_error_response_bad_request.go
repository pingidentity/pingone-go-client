// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// ErrorResponseBadRequest - struct for ErrorResponseBadRequest
type ErrorResponseBadRequest struct {
	InvalidDataError    *InvalidDataError
	InvalidRequestError *InvalidRequestError
	RequestFailedError  *RequestFailedError
}

// InvalidDataErrorAsErrorResponseBadRequest is a convenience function that returns InvalidDataError wrapped in ErrorResponseBadRequest
func InvalidDataErrorAsErrorResponseBadRequest(v *InvalidDataError) ErrorResponseBadRequest {
	return ErrorResponseBadRequest{
		InvalidDataError: v,
	}
}

// InvalidRequestErrorAsErrorResponseBadRequest is a convenience function that returns InvalidRequestError wrapped in ErrorResponseBadRequest
func InvalidRequestErrorAsErrorResponseBadRequest(v *InvalidRequestError) ErrorResponseBadRequest {
	return ErrorResponseBadRequest{
		InvalidRequestError: v,
	}
}

// RequestFailedErrorAsErrorResponseBadRequest is a convenience function that returns RequestFailedError wrapped in ErrorResponseBadRequest
func RequestFailedErrorAsErrorResponseBadRequest(v *RequestFailedError) ErrorResponseBadRequest {
	return ErrorResponseBadRequest{
		RequestFailedError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ErrorResponseBadRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'INVALID_DATA'
	if jsonDict["code"] == "INVALID_DATA" {
		// try to unmarshal JSON data into InvalidDataError
		err = json.Unmarshal(data, &dst.InvalidDataError)
		if err == nil {
			return nil // data stored in dst.InvalidDataError, return on the first match
		} else {
			dst.InvalidDataError = nil
			return fmt.Errorf("failed to unmarshal ErrorResponseBadRequest as InvalidDataError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'INVALID_REQUEST'
	if jsonDict["code"] == "INVALID_REQUEST" {
		// try to unmarshal JSON data into InvalidRequestError
		err = json.Unmarshal(data, &dst.InvalidRequestError)
		if err == nil {
			return nil // data stored in dst.InvalidRequestError, return on the first match
		} else {
			dst.InvalidRequestError = nil
			return fmt.Errorf("failed to unmarshal ErrorResponseBadRequest as InvalidRequestError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REQUEST_FAILED'
	if jsonDict["code"] == "REQUEST_FAILED" {
		// try to unmarshal JSON data into RequestFailedError
		err = json.Unmarshal(data, &dst.RequestFailedError)
		if err == nil {
			return nil // data stored in dst.RequestFailedError, return on the first match
		} else {
			dst.RequestFailedError = nil
			return fmt.Errorf("failed to unmarshal ErrorResponseBadRequest as RequestFailedError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'InvalidDataError'
	if jsonDict["code"] == "InvalidDataError" {
		// try to unmarshal JSON data into InvalidDataError
		err = json.Unmarshal(data, &dst.InvalidDataError)
		if err == nil {
			return nil // data stored in dst.InvalidDataError, return on the first match
		} else {
			dst.InvalidDataError = nil
			return fmt.Errorf("failed to unmarshal ErrorResponseBadRequest as InvalidDataError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'InvalidRequestError'
	if jsonDict["code"] == "InvalidRequestError" {
		// try to unmarshal JSON data into InvalidRequestError
		err = json.Unmarshal(data, &dst.InvalidRequestError)
		if err == nil {
			return nil // data stored in dst.InvalidRequestError, return on the first match
		} else {
			dst.InvalidRequestError = nil
			return fmt.Errorf("failed to unmarshal ErrorResponseBadRequest as InvalidRequestError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RequestFailedError'
	if jsonDict["code"] == "RequestFailedError" {
		// try to unmarshal JSON data into RequestFailedError
		err = json.Unmarshal(data, &dst.RequestFailedError)
		if err == nil {
			return nil // data stored in dst.RequestFailedError, return on the first match
		} else {
			dst.RequestFailedError = nil
			return fmt.Errorf("failed to unmarshal ErrorResponseBadRequest as RequestFailedError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ErrorResponseBadRequest) MarshalJSON() ([]byte, error) {
	if src.InvalidDataError != nil {
		return json.Marshal(&src.InvalidDataError)
	}

	if src.InvalidRequestError != nil {
		return json.Marshal(&src.InvalidRequestError)
	}

	if src.RequestFailedError != nil {
		return json.Marshal(&src.RequestFailedError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ErrorResponseBadRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.InvalidDataError != nil {
		return obj.InvalidDataError
	}

	if obj.InvalidRequestError != nil {
		return obj.InvalidRequestError
	}

	if obj.RequestFailedError != nil {
		return obj.RequestFailedError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ErrorResponseBadRequest) GetActualInstanceValue() interface{} {
	if obj.InvalidDataError != nil {
		return *obj.InvalidDataError
	}

	if obj.InvalidRequestError != nil {
		return *obj.InvalidRequestError
	}

	if obj.RequestFailedError != nil {
		return *obj.RequestFailedError
	}

	// all schemas are nil
	return nil
}

type NullableErrorResponseBadRequest struct {
	value *ErrorResponseBadRequest
	isSet bool
}

func (v NullableErrorResponseBadRequest) Get() *ErrorResponseBadRequest {
	return v.value
}

func (v *NullableErrorResponseBadRequest) Set(val *ErrorResponseBadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseBadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseBadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseBadRequest(val *ErrorResponseBadRequest) *NullableErrorResponseBadRequest {
	return &NullableErrorResponseBadRequest{value: val, isSet: true}
}

func (v NullableErrorResponseBadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseBadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
