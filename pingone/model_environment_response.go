// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"

	"github.com/google/uuid"
)

// checks if the EnvironmentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentResponse{}

// checks if the EnvironmentResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentResponse{}

// EnvironmentResponse struct for EnvironmentResponse
type EnvironmentResponse struct {
	Name                    string                            `json:"name"`
	Region                  EnvironmentRegionCode             `json:"region"`
	Type                    EnvironmentTypeValue              `json:"type"`
	CreatedAt               time.Time                         `json:"createdAt"`
	UpdatedAt               time.Time                         `json:"updatedAt"`
	Id                      uuid.UUID                         `json:"id"`
	Organization            ResourceRelationshipReadOnly      `json:"organization"`
	Embedded                map[string]map[string]interface{} `json:"_embedded,omitempty"`
	Links                   *EnvironmentResponseLinks         `json:"_links,omitempty"`
	BillOfMaterials         *EnvironmentBillOfMaterials       `json:"billOfMaterials,omitempty"`
	Description             *string                           `json:"description,omitempty"`
	EnvironmentCapabilities *EnvironmentCapabilities          `json:"environmentCapabilities,omitempty"`
	HardDeleteAllowedAt     *time.Time                        `json:"hardDeleteAllowedAt,omitempty"`
	Icon                    *string                           `json:"icon,omitempty"`
	License                 *EnvironmentLicense               `json:"license,omitempty"`
	PingoneAccountId        *string                           `json:"pingoneAccountId,omitempty"`
	SoftDeletedAt           *time.Time                        `json:"softDeletedAt,omitempty"`
	Status                  *EnvironmentStatusValue           `json:"status,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _EnvironmentResponse EnvironmentResponse

// NewEnvironmentResponse instantiates a new EnvironmentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentResponse(name string, region EnvironmentRegionCode, type_ EnvironmentTypeValue, createdAt time.Time, updatedAt time.Time, id uuid.UUID, organization ResourceRelationshipReadOnly) *EnvironmentResponse {
	this := EnvironmentResponse{}
	this.Name = name
	this.Region = region
	this.Type = type_
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Id = id
	this.Organization = organization
	return &this
}

// NewEnvironmentResponseWithDefaults instantiates a new EnvironmentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentResponseWithDefaults() *EnvironmentResponse {
	this := EnvironmentResponse{}
	return &this
}

// GetName returns the Name field value
func (o *EnvironmentResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentResponse) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *EnvironmentResponse) GetRegion() EnvironmentRegionCode {
	if o == nil {
		var ret EnvironmentRegionCode
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetRegionOk() (*EnvironmentRegionCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *EnvironmentResponse) SetRegion(v EnvironmentRegionCode) {
	o.Region = v
}

// GetType returns the Type field value
func (o *EnvironmentResponse) GetType() EnvironmentTypeValue {
	if o == nil {
		var ret EnvironmentTypeValue
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetTypeOk() (*EnvironmentTypeValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnvironmentResponse) SetType(v EnvironmentTypeValue) {
	o.Type = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EnvironmentResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EnvironmentResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EnvironmentResponse) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EnvironmentResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetId returns the Id field value
func (o *EnvironmentResponse) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentResponse) SetId(v uuid.UUID) {
	o.Id = v
}

// GetOrganization returns the Organization field value
func (o *EnvironmentResponse) GetOrganization() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetOrganizationOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *EnvironmentResponse) SetOrganization(v ResourceRelationshipReadOnly) {
	o.Organization = v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetEmbedded() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Embedded) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetEmbeddedOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Embedded) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given map[string]map[string]interface{} and assigns it to the Embedded field.
func (o *EnvironmentResponse) SetEmbedded(v map[string]map[string]interface{}) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetLinks() EnvironmentResponseLinks {
	if o == nil || IsNil(o.Links) {
		var ret EnvironmentResponseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetLinksOk() (*EnvironmentResponseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given EnvironmentResponseLinks and assigns it to the Links field.
func (o *EnvironmentResponse) SetLinks(v EnvironmentResponseLinks) {
	o.Links = &v
}

// GetBillOfMaterials returns the BillOfMaterials field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetBillOfMaterials() EnvironmentBillOfMaterials {
	if o == nil || IsNil(o.BillOfMaterials) {
		var ret EnvironmentBillOfMaterials
		return ret
	}
	return *o.BillOfMaterials
}

// GetBillOfMaterialsOk returns a tuple with the BillOfMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetBillOfMaterialsOk() (*EnvironmentBillOfMaterials, bool) {
	if o == nil || IsNil(o.BillOfMaterials) {
		return nil, false
	}
	return o.BillOfMaterials, true
}

// HasBillOfMaterials returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasBillOfMaterials() bool {
	if o != nil && !IsNil(o.BillOfMaterials) {
		return true
	}

	return false
}

// SetBillOfMaterials gets a reference to the given EnvironmentBillOfMaterials and assigns it to the BillOfMaterials field.
func (o *EnvironmentResponse) SetBillOfMaterials(v EnvironmentBillOfMaterials) {
	o.BillOfMaterials = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnvironmentCapabilities returns the EnvironmentCapabilities field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetEnvironmentCapabilities() EnvironmentCapabilities {
	if o == nil || IsNil(o.EnvironmentCapabilities) {
		var ret EnvironmentCapabilities
		return ret
	}
	return *o.EnvironmentCapabilities
}

// GetEnvironmentCapabilitiesOk returns a tuple with the EnvironmentCapabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetEnvironmentCapabilitiesOk() (*EnvironmentCapabilities, bool) {
	if o == nil || IsNil(o.EnvironmentCapabilities) {
		return nil, false
	}
	return o.EnvironmentCapabilities, true
}

// HasEnvironmentCapabilities returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasEnvironmentCapabilities() bool {
	if o != nil && !IsNil(o.EnvironmentCapabilities) {
		return true
	}

	return false
}

// SetEnvironmentCapabilities gets a reference to the given EnvironmentCapabilities and assigns it to the EnvironmentCapabilities field.
func (o *EnvironmentResponse) SetEnvironmentCapabilities(v EnvironmentCapabilities) {
	o.EnvironmentCapabilities = &v
}

// GetHardDeleteAllowedAt returns the HardDeleteAllowedAt field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetHardDeleteAllowedAt() time.Time {
	if o == nil || IsNil(o.HardDeleteAllowedAt) {
		var ret time.Time
		return ret
	}
	return *o.HardDeleteAllowedAt
}

// GetHardDeleteAllowedAtOk returns a tuple with the HardDeleteAllowedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetHardDeleteAllowedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.HardDeleteAllowedAt) {
		return nil, false
	}
	return o.HardDeleteAllowedAt, true
}

// HasHardDeleteAllowedAt returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasHardDeleteAllowedAt() bool {
	if o != nil && !IsNil(o.HardDeleteAllowedAt) {
		return true
	}

	return false
}

// SetHardDeleteAllowedAt gets a reference to the given time.Time and assigns it to the HardDeleteAllowedAt field.
func (o *EnvironmentResponse) SetHardDeleteAllowedAt(v time.Time) {
	o.HardDeleteAllowedAt = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EnvironmentResponse) SetIcon(v string) {
	o.Icon = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetLicense() EnvironmentLicense {
	if o == nil || IsNil(o.License) {
		var ret EnvironmentLicense
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetLicenseOk() (*EnvironmentLicense, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given EnvironmentLicense and assigns it to the License field.
func (o *EnvironmentResponse) SetLicense(v EnvironmentLicense) {
	o.License = &v
}

// GetPingoneAccountId returns the PingoneAccountId field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetPingoneAccountId() string {
	if o == nil || IsNil(o.PingoneAccountId) {
		var ret string
		return ret
	}
	return *o.PingoneAccountId
}

// GetPingoneAccountIdOk returns a tuple with the PingoneAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetPingoneAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.PingoneAccountId) {
		return nil, false
	}
	return o.PingoneAccountId, true
}

// HasPingoneAccountId returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasPingoneAccountId() bool {
	if o != nil && !IsNil(o.PingoneAccountId) {
		return true
	}

	return false
}

// SetPingoneAccountId gets a reference to the given string and assigns it to the PingoneAccountId field.
func (o *EnvironmentResponse) SetPingoneAccountId(v string) {
	o.PingoneAccountId = &v
}

// GetSoftDeletedAt returns the SoftDeletedAt field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetSoftDeletedAt() time.Time {
	if o == nil || IsNil(o.SoftDeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.SoftDeletedAt
}

// GetSoftDeletedAtOk returns a tuple with the SoftDeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetSoftDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SoftDeletedAt) {
		return nil, false
	}
	return o.SoftDeletedAt, true
}

// HasSoftDeletedAt returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasSoftDeletedAt() bool {
	if o != nil && !IsNil(o.SoftDeletedAt) {
		return true
	}

	return false
}

// SetSoftDeletedAt gets a reference to the given time.Time and assigns it to the SoftDeletedAt field.
func (o *EnvironmentResponse) SetSoftDeletedAt(v time.Time) {
	o.SoftDeletedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EnvironmentResponse) GetStatus() EnvironmentStatusValue {
	if o == nil || IsNil(o.Status) {
		var ret EnvironmentStatusValue
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResponse) GetStatusOk() (*EnvironmentStatusValue, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EnvironmentResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given EnvironmentStatusValue and assigns it to the Status field.
func (o *EnvironmentResponse) SetStatus(v EnvironmentStatusValue) {
	o.Status = &v
}

func (o EnvironmentResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	toSerialize["type"] = o.Type
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["id"] = o.Id
	toSerialize["organization"] = o.Organization
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.BillOfMaterials) {
		toSerialize["billOfMaterials"] = o.BillOfMaterials
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EnvironmentCapabilities) {
		toSerialize["environmentCapabilities"] = o.EnvironmentCapabilities
	}
	if !IsNil(o.HardDeleteAllowedAt) {
		toSerialize["hardDeleteAllowedAt"] = o.HardDeleteAllowedAt
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.PingoneAccountId) {
		toSerialize["pingoneAccountId"] = o.PingoneAccountId
	}
	if !IsNil(o.SoftDeletedAt) {
		toSerialize["softDeletedAt"] = o.SoftDeletedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"region",
		"type",
		"createdAt",
		"updatedAt",
		"id",
		"organization",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentResponse := _EnvironmentResponse{}

	err = json.Unmarshal(data, &varEnvironmentResponse)

	if err != nil {
		return err
	}

	*o = EnvironmentResponse(varEnvironmentResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "region")
		delete(additionalProperties, "type")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "id")
		delete(additionalProperties, "organization")
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "billOfMaterials")
		delete(additionalProperties, "description")
		delete(additionalProperties, "environmentCapabilities")
		delete(additionalProperties, "hardDeleteAllowedAt")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "license")
		delete(additionalProperties, "pingoneAccountId")
		delete(additionalProperties, "softDeletedAt")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("region", o.Region))
	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	logAttrs = append(logAttrs, slog.Any("createdAt", o.CreatedAt))
	logAttrs = append(logAttrs, slog.Any("updatedAt", o.UpdatedAt))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("organization", o.Organization))
	if !IsNil(o.Embedded) {
		logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	}
	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.BillOfMaterials) {
		logAttrs = append(logAttrs, slog.Any("billOfMaterials", *o.BillOfMaterials))
	}
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.EnvironmentCapabilities) {
		logAttrs = append(logAttrs, slog.Any("environmentCapabilities", *o.EnvironmentCapabilities))
	}
	if !IsNil(o.HardDeleteAllowedAt) {
		logAttrs = append(logAttrs, slog.Any("hardDeleteAllowedAt", *o.HardDeleteAllowedAt))
	}
	if !IsNil(o.Icon) {
		logAttrs = append(logAttrs, slog.Any("icon", *o.Icon))
	}
	if !IsNil(o.License) {
		logAttrs = append(logAttrs, slog.Any("license", *o.License))
	}
	if !IsNil(o.PingoneAccountId) {
		logAttrs = append(logAttrs, slog.Any("pingoneAccountId", *o.PingoneAccountId))
	}
	if !IsNil(o.SoftDeletedAt) {
		logAttrs = append(logAttrs, slog.Any("softDeletedAt", *o.SoftDeletedAt))
	}
	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentResponse struct {
	value *EnvironmentResponse
	isSet bool
}

func (v NullableEnvironmentResponse) Get() *EnvironmentResponse {
	return v.value
}

func (v *NullableEnvironmentResponse) Set(val *EnvironmentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentResponse(val *EnvironmentResponse) *NullableEnvironmentResponse {
	return &NullableEnvironmentResponse{value: val, isSet: true}
}

func (v NullableEnvironmentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
