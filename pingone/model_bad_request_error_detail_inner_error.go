// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
	"time"

	"github.com/google/uuid"
)

// checks if the BadRequestErrorDetailInnerError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BadRequestErrorDetailInnerError{}

// checks if the BadRequestErrorDetailInnerError type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &BadRequestErrorDetailInnerError{}

// BadRequestErrorDetailInnerError struct for BadRequestErrorDetailInnerError
type BadRequestErrorDetailInnerError struct {
	AllowedPattern       *string    `json:"allowedPattern,omitempty"`
	AllowedValues        []string   `json:"allowedValues,omitempty"`
	Claim                *string    `json:"claim,omitempty"`
	ExistingId           *uuid.UUID `json:"existingId,omitempty"`
	MaximumValue         *float32   `json:"maximumValue,omitempty"`
	QuotaLimit           *float32   `json:"quotaLimit,omitempty"`
	QuotaResetTime       *time.Time `json:"quotaResetTime,omitempty"`
	RangeMaximumValue    *float32   `json:"rangeMaximumValue,omitempty"`
	RangeMinimumValue    *float32   `json:"rangeMinimumValue,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BadRequestErrorDetailInnerError BadRequestErrorDetailInnerError

// NewBadRequestErrorDetailInnerError instantiates a new BadRequestErrorDetailInnerError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadRequestErrorDetailInnerError() *BadRequestErrorDetailInnerError {
	this := BadRequestErrorDetailInnerError{}
	return &this
}

// NewBadRequestErrorDetailInnerErrorWithDefaults instantiates a new BadRequestErrorDetailInnerError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadRequestErrorDetailInnerErrorWithDefaults() *BadRequestErrorDetailInnerError {
	this := BadRequestErrorDetailInnerError{}
	return &this
}

// GetAllowedPattern returns the AllowedPattern field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetAllowedPattern() string {
	if o == nil || IsNil(o.AllowedPattern) {
		var ret string
		return ret
	}
	return *o.AllowedPattern
}

// GetAllowedPatternOk returns a tuple with the AllowedPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetAllowedPatternOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedPattern) {
		return nil, false
	}
	return o.AllowedPattern, true
}

// HasAllowedPattern returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasAllowedPattern() bool {
	if o != nil && !IsNil(o.AllowedPattern) {
		return true
	}

	return false
}

// SetAllowedPattern gets a reference to the given string and assigns it to the AllowedPattern field.
func (o *BadRequestErrorDetailInnerError) SetAllowedPattern(v string) {
	o.AllowedPattern = &v
}

// GetAllowedValues returns the AllowedValues field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetAllowedValues() []string {
	if o == nil || IsNil(o.AllowedValues) {
		var ret []string
		return ret
	}
	return o.AllowedValues
}

// GetAllowedValuesOk returns a tuple with the AllowedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetAllowedValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedValues) {
		return nil, false
	}
	return o.AllowedValues, true
}

// HasAllowedValues returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasAllowedValues() bool {
	if o != nil && !IsNil(o.AllowedValues) {
		return true
	}

	return false
}

// SetAllowedValues gets a reference to the given []string and assigns it to the AllowedValues field.
func (o *BadRequestErrorDetailInnerError) SetAllowedValues(v []string) {
	o.AllowedValues = v
}

// GetClaim returns the Claim field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetClaim() string {
	if o == nil || IsNil(o.Claim) {
		var ret string
		return ret
	}
	return *o.Claim
}

// GetClaimOk returns a tuple with the Claim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetClaimOk() (*string, bool) {
	if o == nil || IsNil(o.Claim) {
		return nil, false
	}
	return o.Claim, true
}

// HasClaim returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasClaim() bool {
	if o != nil && !IsNil(o.Claim) {
		return true
	}

	return false
}

// SetClaim gets a reference to the given string and assigns it to the Claim field.
func (o *BadRequestErrorDetailInnerError) SetClaim(v string) {
	o.Claim = &v
}

// GetExistingId returns the ExistingId field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetExistingId() uuid.UUID {
	if o == nil || IsNil(o.ExistingId) {
		var ret uuid.UUID
		return ret
	}
	return *o.ExistingId
}

// GetExistingIdOk returns a tuple with the ExistingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetExistingIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.ExistingId) {
		return nil, false
	}
	return o.ExistingId, true
}

// HasExistingId returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasExistingId() bool {
	if o != nil && !IsNil(o.ExistingId) {
		return true
	}

	return false
}

// SetExistingId gets a reference to the given uuid.UUID and assigns it to the ExistingId field.
func (o *BadRequestErrorDetailInnerError) SetExistingId(v uuid.UUID) {
	o.ExistingId = &v
}

// GetMaximumValue returns the MaximumValue field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetMaximumValue() float32 {
	if o == nil || IsNil(o.MaximumValue) {
		var ret float32
		return ret
	}
	return *o.MaximumValue
}

// GetMaximumValueOk returns a tuple with the MaximumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetMaximumValueOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumValue) {
		return nil, false
	}
	return o.MaximumValue, true
}

// HasMaximumValue returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasMaximumValue() bool {
	if o != nil && !IsNil(o.MaximumValue) {
		return true
	}

	return false
}

// SetMaximumValue gets a reference to the given float32 and assigns it to the MaximumValue field.
func (o *BadRequestErrorDetailInnerError) SetMaximumValue(v float32) {
	o.MaximumValue = &v
}

// GetQuotaLimit returns the QuotaLimit field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetQuotaLimit() float32 {
	if o == nil || IsNil(o.QuotaLimit) {
		var ret float32
		return ret
	}
	return *o.QuotaLimit
}

// GetQuotaLimitOk returns a tuple with the QuotaLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetQuotaLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.QuotaLimit) {
		return nil, false
	}
	return o.QuotaLimit, true
}

// HasQuotaLimit returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasQuotaLimit() bool {
	if o != nil && !IsNil(o.QuotaLimit) {
		return true
	}

	return false
}

// SetQuotaLimit gets a reference to the given float32 and assigns it to the QuotaLimit field.
func (o *BadRequestErrorDetailInnerError) SetQuotaLimit(v float32) {
	o.QuotaLimit = &v
}

// GetQuotaResetTime returns the QuotaResetTime field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetQuotaResetTime() time.Time {
	if o == nil || IsNil(o.QuotaResetTime) {
		var ret time.Time
		return ret
	}
	return *o.QuotaResetTime
}

// GetQuotaResetTimeOk returns a tuple with the QuotaResetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetQuotaResetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.QuotaResetTime) {
		return nil, false
	}
	return o.QuotaResetTime, true
}

// HasQuotaResetTime returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasQuotaResetTime() bool {
	if o != nil && !IsNil(o.QuotaResetTime) {
		return true
	}

	return false
}

// SetQuotaResetTime gets a reference to the given time.Time and assigns it to the QuotaResetTime field.
func (o *BadRequestErrorDetailInnerError) SetQuotaResetTime(v time.Time) {
	o.QuotaResetTime = &v
}

// GetRangeMaximumValue returns the RangeMaximumValue field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetRangeMaximumValue() float32 {
	if o == nil || IsNil(o.RangeMaximumValue) {
		var ret float32
		return ret
	}
	return *o.RangeMaximumValue
}

// GetRangeMaximumValueOk returns a tuple with the RangeMaximumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetRangeMaximumValueOk() (*float32, bool) {
	if o == nil || IsNil(o.RangeMaximumValue) {
		return nil, false
	}
	return o.RangeMaximumValue, true
}

// HasRangeMaximumValue returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasRangeMaximumValue() bool {
	if o != nil && !IsNil(o.RangeMaximumValue) {
		return true
	}

	return false
}

// SetRangeMaximumValue gets a reference to the given float32 and assigns it to the RangeMaximumValue field.
func (o *BadRequestErrorDetailInnerError) SetRangeMaximumValue(v float32) {
	o.RangeMaximumValue = &v
}

// GetRangeMinimumValue returns the RangeMinimumValue field value if set, zero value otherwise.
func (o *BadRequestErrorDetailInnerError) GetRangeMinimumValue() float32 {
	if o == nil || IsNil(o.RangeMinimumValue) {
		var ret float32
		return ret
	}
	return *o.RangeMinimumValue
}

// GetRangeMinimumValueOk returns a tuple with the RangeMinimumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorDetailInnerError) GetRangeMinimumValueOk() (*float32, bool) {
	if o == nil || IsNil(o.RangeMinimumValue) {
		return nil, false
	}
	return o.RangeMinimumValue, true
}

// HasRangeMinimumValue returns a boolean if a field has been set.
func (o *BadRequestErrorDetailInnerError) HasRangeMinimumValue() bool {
	if o != nil && !IsNil(o.RangeMinimumValue) {
		return true
	}

	return false
}

// SetRangeMinimumValue gets a reference to the given float32 and assigns it to the RangeMinimumValue field.
func (o *BadRequestErrorDetailInnerError) SetRangeMinimumValue(v float32) {
	o.RangeMinimumValue = &v
}

func (o BadRequestErrorDetailInnerError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BadRequestErrorDetailInnerError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedPattern) {
		toSerialize["allowedPattern"] = o.AllowedPattern
	}
	if !IsNil(o.AllowedValues) {
		toSerialize["allowedValues"] = o.AllowedValues
	}
	if !IsNil(o.Claim) {
		toSerialize["claim"] = o.Claim
	}
	if !IsNil(o.ExistingId) {
		toSerialize["existingId"] = o.ExistingId
	}
	if !IsNil(o.MaximumValue) {
		toSerialize["maximumValue"] = o.MaximumValue
	}
	if !IsNil(o.QuotaLimit) {
		toSerialize["quotaLimit"] = o.QuotaLimit
	}
	if !IsNil(o.QuotaResetTime) {
		toSerialize["quotaResetTime"] = o.QuotaResetTime
	}
	if !IsNil(o.RangeMaximumValue) {
		toSerialize["rangeMaximumValue"] = o.RangeMaximumValue
	}
	if !IsNil(o.RangeMinimumValue) {
		toSerialize["rangeMinimumValue"] = o.RangeMinimumValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BadRequestErrorDetailInnerError) UnmarshalJSON(data []byte) (err error) {
	varBadRequestErrorDetailInnerError := _BadRequestErrorDetailInnerError{}

	err = json.Unmarshal(data, &varBadRequestErrorDetailInnerError)

	if err != nil {
		return err
	}

	*o = BadRequestErrorDetailInnerError(varBadRequestErrorDetailInnerError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowedPattern")
		delete(additionalProperties, "allowedValues")
		delete(additionalProperties, "claim")
		delete(additionalProperties, "existingId")
		delete(additionalProperties, "maximumValue")
		delete(additionalProperties, "quotaLimit")
		delete(additionalProperties, "quotaResetTime")
		delete(additionalProperties, "rangeMaximumValue")
		delete(additionalProperties, "rangeMinimumValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o BadRequestErrorDetailInnerError) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.AllowedPattern) {
		logAttrs = append(logAttrs, slog.Any("allowedPattern", *o.AllowedPattern))
	}
	if !IsNil(o.AllowedValues) {
		logAttrs = append(logAttrs, slog.Any("allowedValues", o.AllowedValues))
	}
	if !IsNil(o.Claim) {
		logAttrs = append(logAttrs, slog.Any("claim", *o.Claim))
	}
	if !IsNil(o.ExistingId) {
		logAttrs = append(logAttrs, slog.Any("existingId", *o.ExistingId))
	}
	if !IsNil(o.MaximumValue) {
		logAttrs = append(logAttrs, slog.Any("maximumValue", *o.MaximumValue))
	}
	if !IsNil(o.QuotaLimit) {
		logAttrs = append(logAttrs, slog.Any("quotaLimit", *o.QuotaLimit))
	}
	if !IsNil(o.QuotaResetTime) {
		logAttrs = append(logAttrs, slog.Any("quotaResetTime", *o.QuotaResetTime))
	}
	if !IsNil(o.RangeMaximumValue) {
		logAttrs = append(logAttrs, slog.Any("rangeMaximumValue", *o.RangeMaximumValue))
	}
	if !IsNil(o.RangeMinimumValue) {
		logAttrs = append(logAttrs, slog.Any("rangeMinimumValue", *o.RangeMinimumValue))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableBadRequestErrorDetailInnerError struct {
	value *BadRequestErrorDetailInnerError
	isSet bool
}

func (v NullableBadRequestErrorDetailInnerError) Get() *BadRequestErrorDetailInnerError {
	return v.value
}

func (v *NullableBadRequestErrorDetailInnerError) Set(val *BadRequestErrorDetailInnerError) {
	v.value = val
	v.isSet = true
}

func (v NullableBadRequestErrorDetailInnerError) IsSet() bool {
	return v.isSet
}

func (v *NullableBadRequestErrorDetailInnerError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadRequestErrorDetailInnerError(val *BadRequestErrorDetailInnerError) *NullableBadRequestErrorDetailInnerError {
	return &NullableBadRequestErrorDetailInnerError{value: val, isSet: true}
}

func (v NullableBadRequestErrorDetailInnerError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadRequestErrorDetailInnerError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
