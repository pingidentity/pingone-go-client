// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// UnauthorizedErrorDetailCode the model 'UnauthorizedErrorDetailCode'
type UnauthorizedErrorDetailCode string

// List of Unauthorized_Error_Detail_Code
const (
	UNAUTHORIZEDERRORDETAILCODE_INSUFFICIENT_PERMISSIONS UnauthorizedErrorDetailCode = "INSUFFICIENT_PERMISSIONS"
	UNAUTHORIZEDERRORDETAILCODE_INVALID_TOKEN            UnauthorizedErrorDetailCode = "INVALID_TOKEN"
)

// All allowed values of UnauthorizedErrorDetailCode enum
var AllowedUnauthorizedErrorDetailCodeEnumValues = []UnauthorizedErrorDetailCode{
	"INSUFFICIENT_PERMISSIONS",
	"INVALID_TOKEN",
}

func (v *UnauthorizedErrorDetailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UnauthorizedErrorDetailCode(value)
	for _, existing := range AllowedUnauthorizedErrorDetailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = UnauthorizedErrorDetailCode(fmt.Sprintf("%s", value))
	return nil
}

// NewUnauthorizedErrorDetailCodeFromValue returns a pointer to a valid UnauthorizedErrorDetailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnauthorizedErrorDetailCodeFromValue(v string) (*UnauthorizedErrorDetailCode, error) {
	ev := UnauthorizedErrorDetailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UnauthorizedErrorDetailCode: valid values are %v", v, AllowedUnauthorizedErrorDetailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UnauthorizedErrorDetailCode) IsValid() bool {
	for _, existing := range AllowedUnauthorizedErrorDetailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Unauthorized_Error_Detail_Code value
func (v UnauthorizedErrorDetailCode) Ptr() *UnauthorizedErrorDetailCode {
	return &v
}

type NullableUnauthorizedErrorDetailCode struct {
	value *UnauthorizedErrorDetailCode
	isSet bool
}

func (v NullableUnauthorizedErrorDetailCode) Get() *UnauthorizedErrorDetailCode {
	return v.value
}

func (v *NullableUnauthorizedErrorDetailCode) Set(val *UnauthorizedErrorDetailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableUnauthorizedErrorDetailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableUnauthorizedErrorDetailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnauthorizedErrorDetailCode(val *UnauthorizedErrorDetailCode) *NullableUnauthorizedErrorDetailCode {
	return &NullableUnauthorizedErrorDetailCode{value: val, isSet: true}
}

func (v NullableUnauthorizedErrorDetailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnauthorizedErrorDetailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
