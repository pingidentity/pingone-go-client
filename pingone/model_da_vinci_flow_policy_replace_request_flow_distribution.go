// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyReplaceRequestFlowDistribution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyReplaceRequestFlowDistribution{}

// checks if the DaVinciFlowPolicyReplaceRequestFlowDistribution type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyReplaceRequestFlowDistribution{}

// DaVinciFlowPolicyReplaceRequestFlowDistribution struct for DaVinciFlowPolicyReplaceRequestFlowDistribution
type DaVinciFlowPolicyReplaceRequestFlowDistribution struct {
	Id                   string                                                       `json:"id"`
	Version              float32                                                      `json:"version"`
	Ip                   []string                                                     `json:"ip,omitempty"`
	SuccessNodes         []DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode `json:"successNodes,omitempty"`
	Weight               *float32                                                     `json:"weight,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyReplaceRequestFlowDistribution DaVinciFlowPolicyReplaceRequestFlowDistribution

// NewDaVinciFlowPolicyReplaceRequestFlowDistribution instantiates a new DaVinciFlowPolicyReplaceRequestFlowDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyReplaceRequestFlowDistribution(id string, version float32) *DaVinciFlowPolicyReplaceRequestFlowDistribution {
	this := DaVinciFlowPolicyReplaceRequestFlowDistribution{}
	this.Id = id
	this.Version = version
	return &this
}

// NewDaVinciFlowPolicyReplaceRequestFlowDistributionWithDefaults instantiates a new DaVinciFlowPolicyReplaceRequestFlowDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyReplaceRequestFlowDistributionWithDefaults() *DaVinciFlowPolicyReplaceRequestFlowDistribution {
	this := DaVinciFlowPolicyReplaceRequestFlowDistribution{}
	return &this
}

// GetId returns the Id field value
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) SetVersion(v float32) {
	o.Version = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetIp() []string {
	if o == nil || IsNil(o.Ip) {
		var ret []string
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetIpOk() ([]string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given []string and assigns it to the Ip field.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) SetIp(v []string) {
	o.Ip = v
}

// GetSuccessNodes returns the SuccessNodes field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetSuccessNodes() []DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode {
	if o == nil || IsNil(o.SuccessNodes) {
		var ret []DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode
		return ret
	}
	return o.SuccessNodes
}

// GetSuccessNodesOk returns a tuple with the SuccessNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetSuccessNodesOk() ([]DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode, bool) {
	if o == nil || IsNil(o.SuccessNodes) {
		return nil, false
	}
	return o.SuccessNodes, true
}

// HasSuccessNodes returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) HasSuccessNodes() bool {
	if o != nil && !IsNil(o.SuccessNodes) {
		return true
	}

	return false
}

// SetSuccessNodes gets a reference to the given []DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode and assigns it to the SuccessNodes field.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) SetSuccessNodes(v []DaVinciFlowPolicyReplaceRequestFlowDistributionSuccessNode) {
	o.SuccessNodes = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) SetWeight(v float32) {
	o.Weight = &v
}

func (o DaVinciFlowPolicyReplaceRequestFlowDistribution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyReplaceRequestFlowDistribution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["version"] = o.Version
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.SuccessNodes) {
		toSerialize["successNodes"] = o.SuccessNodes
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyReplaceRequestFlowDistribution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyReplaceRequestFlowDistribution := _DaVinciFlowPolicyReplaceRequestFlowDistribution{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyReplaceRequestFlowDistribution)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyReplaceRequestFlowDistribution(varDaVinciFlowPolicyReplaceRequestFlowDistribution)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "version")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "successNodes")
		delete(additionalProperties, "weight")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyReplaceRequestFlowDistribution) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("version", o.Version))
	if !IsNil(o.Ip) {
		logAttrs = append(logAttrs, slog.Any("ip", o.Ip))
	}
	if !IsNil(o.SuccessNodes) {
		logAttrs = append(logAttrs, slog.Any("successNodes", o.SuccessNodes))
	}
	if !IsNil(o.Weight) {
		logAttrs = append(logAttrs, slog.Any("weight", *o.Weight))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyReplaceRequestFlowDistribution struct {
	value *DaVinciFlowPolicyReplaceRequestFlowDistribution
	isSet bool
}

func (v NullableDaVinciFlowPolicyReplaceRequestFlowDistribution) Get() *DaVinciFlowPolicyReplaceRequestFlowDistribution {
	return v.value
}

func (v *NullableDaVinciFlowPolicyReplaceRequestFlowDistribution) Set(val *DaVinciFlowPolicyReplaceRequestFlowDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyReplaceRequestFlowDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyReplaceRequestFlowDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyReplaceRequestFlowDistribution(val *DaVinciFlowPolicyReplaceRequestFlowDistribution) *NullableDaVinciFlowPolicyReplaceRequestFlowDistribution {
	return &NullableDaVinciFlowPolicyReplaceRequestFlowDistribution{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyReplaceRequestFlowDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyReplaceRequestFlowDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
