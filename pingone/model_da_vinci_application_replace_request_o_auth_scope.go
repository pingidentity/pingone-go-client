// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationReplaceRequestOAuthScope the model 'DaVinciApplicationReplaceRequestOAuthScope'
type DaVinciApplicationReplaceRequestOAuthScope string

// List of DaVinci_Application_Replace_Request_OAuth_Scope
const (
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPE_FLOW_ANALYTICS DaVinciApplicationReplaceRequestOAuthScope = "flow_analytics"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPE_OFFLINE_ACCESS DaVinciApplicationReplaceRequestOAuthScope = "offline_access"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPE_OPENID         DaVinciApplicationReplaceRequestOAuthScope = "openid"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPE_PROFILE        DaVinciApplicationReplaceRequestOAuthScope = "profile"
)

// All allowed values of DaVinciApplicationReplaceRequestOAuthScope enum
var AllowedDaVinciApplicationReplaceRequestOAuthScopeEnumValues = []DaVinciApplicationReplaceRequestOAuthScope{
	"flow_analytics",
	"offline_access",
	"openid",
	"profile",
}

func (v *DaVinciApplicationReplaceRequestOAuthScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationReplaceRequestOAuthScope(value)
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOAuthScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationReplaceRequestOAuthScope(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciApplicationReplaceRequestOAuthScopeFromValue returns a pointer to a valid DaVinciApplicationReplaceRequestOAuthScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationReplaceRequestOAuthScopeFromValue(v string) (*DaVinciApplicationReplaceRequestOAuthScope, error) {
	ev := DaVinciApplicationReplaceRequestOAuthScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationReplaceRequestOAuthScope: valid values are %v", v, AllowedDaVinciApplicationReplaceRequestOAuthScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationReplaceRequestOAuthScope) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOAuthScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Application_Replace_Request_OAuth_Scope value
func (v DaVinciApplicationReplaceRequestOAuthScope) Ptr() *DaVinciApplicationReplaceRequestOAuthScope {
	return &v
}

type NullableDaVinciApplicationReplaceRequestOAuthScope struct {
	value *DaVinciApplicationReplaceRequestOAuthScope
	isSet bool
}

func (v NullableDaVinciApplicationReplaceRequestOAuthScope) Get() *DaVinciApplicationReplaceRequestOAuthScope {
	return v.value
}

func (v *NullableDaVinciApplicationReplaceRequestOAuthScope) Set(val *DaVinciApplicationReplaceRequestOAuthScope) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationReplaceRequestOAuthScope) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationReplaceRequestOAuthScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationReplaceRequestOAuthScope(val *DaVinciApplicationReplaceRequestOAuthScope) *NullableDaVinciApplicationReplaceRequestOAuthScope {
	return &NullableDaVinciApplicationReplaceRequestOAuthScope{value: val, isSet: true}
}

func (v NullableDaVinciApplicationReplaceRequestOAuthScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationReplaceRequestOAuthScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
