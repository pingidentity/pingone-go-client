// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciApplicationReplaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciApplicationReplaceRequest{}

// checks if the DaVinciApplicationReplaceRequest type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciApplicationReplaceRequest{}

// DaVinciApplicationReplaceRequest struct for DaVinciApplicationReplaceRequest
type DaVinciApplicationReplaceRequest struct {
	Name                 string                                 `json:"name" validate:"regexp=^(?=\\\\S)[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\/.'_ -]*(?!.*((<)|(\\\\$\\\\{)))"`
	ApiKeyEnabled        *bool                                  `json:"apiKeyEnabled,omitempty"`
	Oauth                *DaVinciApplicationReplaceRequestOAuth `json:"oauth,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciApplicationReplaceRequest DaVinciApplicationReplaceRequest

// NewDaVinciApplicationReplaceRequest instantiates a new DaVinciApplicationReplaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciApplicationReplaceRequest(name string) *DaVinciApplicationReplaceRequest {
	this := DaVinciApplicationReplaceRequest{}
	this.Name = name
	return &this
}

// NewDaVinciApplicationReplaceRequestWithDefaults instantiates a new DaVinciApplicationReplaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciApplicationReplaceRequestWithDefaults() *DaVinciApplicationReplaceRequest {
	this := DaVinciApplicationReplaceRequest{}
	return &this
}

// GetName returns the Name field value
func (o *DaVinciApplicationReplaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciApplicationReplaceRequest) SetName(v string) {
	o.Name = v
}

// GetApiKeyEnabled returns the ApiKeyEnabled field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequest) GetApiKeyEnabled() bool {
	if o == nil || IsNil(o.ApiKeyEnabled) {
		var ret bool
		return ret
	}
	return *o.ApiKeyEnabled
}

// GetApiKeyEnabledOk returns a tuple with the ApiKeyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequest) GetApiKeyEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiKeyEnabled) {
		return nil, false
	}
	return o.ApiKeyEnabled, true
}

// HasApiKeyEnabled returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequest) HasApiKeyEnabled() bool {
	if o != nil && !IsNil(o.ApiKeyEnabled) {
		return true
	}

	return false
}

// SetApiKeyEnabled gets a reference to the given bool and assigns it to the ApiKeyEnabled field.
func (o *DaVinciApplicationReplaceRequest) SetApiKeyEnabled(v bool) {
	o.ApiKeyEnabled = &v
}

// GetOauth returns the Oauth field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequest) GetOauth() DaVinciApplicationReplaceRequestOAuth {
	if o == nil || IsNil(o.Oauth) {
		var ret DaVinciApplicationReplaceRequestOAuth
		return ret
	}
	return *o.Oauth
}

// GetOauthOk returns a tuple with the Oauth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequest) GetOauthOk() (*DaVinciApplicationReplaceRequestOAuth, bool) {
	if o == nil || IsNil(o.Oauth) {
		return nil, false
	}
	return o.Oauth, true
}

// HasOauth returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequest) HasOauth() bool {
	if o != nil && !IsNil(o.Oauth) {
		return true
	}

	return false
}

// SetOauth gets a reference to the given DaVinciApplicationReplaceRequestOAuth and assigns it to the Oauth field.
func (o *DaVinciApplicationReplaceRequest) SetOauth(v DaVinciApplicationReplaceRequestOAuth) {
	o.Oauth = &v
}

func (o DaVinciApplicationReplaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciApplicationReplaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.ApiKeyEnabled) {
		toSerialize["apiKeyEnabled"] = o.ApiKeyEnabled
	}
	if !IsNil(o.Oauth) {
		toSerialize["oauth"] = o.Oauth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciApplicationReplaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciApplicationReplaceRequest := _DaVinciApplicationReplaceRequest{}

	err = json.Unmarshal(data, &varDaVinciApplicationReplaceRequest)

	if err != nil {
		return err
	}

	*o = DaVinciApplicationReplaceRequest(varDaVinciApplicationReplaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "apiKeyEnabled")
		delete(additionalProperties, "oauth")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciApplicationReplaceRequest) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.ApiKeyEnabled) {
		logAttrs = append(logAttrs, slog.Any("apiKeyEnabled", *o.ApiKeyEnabled))
	}
	if !IsNil(o.Oauth) {
		logAttrs = append(logAttrs, slog.Any("oauth", *o.Oauth))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciApplicationReplaceRequest struct {
	value *DaVinciApplicationReplaceRequest
	isSet bool
}

func (v NullableDaVinciApplicationReplaceRequest) Get() *DaVinciApplicationReplaceRequest {
	return v.value
}

func (v *NullableDaVinciApplicationReplaceRequest) Set(val *DaVinciApplicationReplaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationReplaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationReplaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationReplaceRequest(val *DaVinciApplicationReplaceRequest) *NullableDaVinciApplicationReplaceRequest {
	return &NullableDaVinciApplicationReplaceRequest{value: val, isSet: true}
}

func (v NullableDaVinciApplicationReplaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationReplaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
