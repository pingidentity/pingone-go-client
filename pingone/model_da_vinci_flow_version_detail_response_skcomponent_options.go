// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowVersionDetailResponseSkcomponentOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionDetailResponseSkcomponentOptions{}

// checks if the DaVinciFlowVersionDetailResponseSkcomponentOptions type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionDetailResponseSkcomponentOptions{}

// DaVinciFlowVersionDetailResponseSkcomponentOptions struct for DaVinciFlowVersionDetailResponseSkcomponentOptions
type DaVinciFlowVersionDetailResponseSkcomponentOptions struct {
	AppSessionId                *string                                                                 `json:"appSessionId,omitempty"`
	Appid                       *string                                                                 `json:"appid,omitempty"`
	Appsecret                   *string                                                                 `json:"appsecret,omitempty"`
	Browsertoken                *string                                                                 `json:"browsertoken,omitempty"`
	ButtonImage                 *string                                                                 `json:"buttonImage,omitempty"`
	ButtonImageClass            *string                                                                 `json:"buttonImageClass,omitempty"`
	ButtonImagePlacement        *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonImagePlacement `json:"buttonImagePlacement,omitempty"`
	ButtonType                  *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType           `json:"buttonType,omitempty"`
	Cdn                         *string                                                                 `json:"cdn,omitempty"`
	Class                       *string                                                                 `json:"class,omitempty"`
	CollectBehavioralData       *bool                                                                   `json:"collectBehavioralData,omitempty"`
	ContentType                 *DaVinciFlowVersionDetailResponseSkcomponentOptionsContentType          `json:"contentType,omitempty"`
	CreateP1User                *string                                                                 `json:"createP1User,omitempty"`
	CustomLoadingIndicator      *string                                                                 `json:"customLoadingIndicator,omitempty"`
	CustomLoadingIndicatorClass *string                                                                 `json:"customLoadingIndicatorClass,omitempty"`
	DefaultLoadingColor         *string                                                                 `json:"defaultLoadingColor,omitempty"`
	EnvironmentId               *string                                                                 `json:"environmentId,omitempty"`
	ErrorId                     *string                                                                 `json:"errorId,omitempty"`
	Form                        *string                                                                 `json:"form,omitempty"`
	Height                      *string                                                                 `json:"height,omitempty"`
	Host                        *string                                                                 `json:"host,omitempty"`
	Id                          *string                                                                 `json:"id,omitempty"`
	IdentityProviderId          *string                                                                 `json:"identityProviderId,omitempty"`
	IdentityProviderIdEntry     *string                                                                 `json:"identityProviderIdEntry,omitempty"`
	IdentityProviderType        *string                                                                 `json:"identityProviderType,omitempty"`
	IdpConnector                *string                                                                 `json:"idpConnector,omitempty"`
	ImgUrl                      *string                                                                 `json:"imgUrl,omitempty"`
	Label                       *string                                                                 `json:"label,omitempty"`
	MessageClass                *string                                                                 `json:"messageClass,omitempty"`
	MicUrl                      *string                                                                 `json:"micUrl,omitempty"`
	OtpInput                    *string                                                                 `json:"otpInput,omitempty"`
	PollChallengeStatus         *bool                                                                   `json:"pollChallengeStatus,omitempty"`
	PollInterval                *int32                                                                  `json:"pollInterval,omitempty"`
	PollRetries                 *int32                                                                  `json:"pollRetries,omitempty"`
	PopulationId                *string                                                                 `json:"populationId,omitempty"`
	PopulationIdEntry           *string                                                                 `json:"populationIdEntry,omitempty"`
	PreviewType                 *DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType          `json:"previewType,omitempty"`
	Propertyname                *string                                                                 `json:"propertyname,omitempty"`
	ReturnUrl                   *string                                                                 `json:"returnUrl,omitempty"`
	ShowPreview                 *DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview          `json:"showPreview,omitempty"`
	SiteKey                     *string                                                                 `json:"siteKey,omitempty"`
	UserId                      *string                                                                 `json:"userId,omitempty"`
	Value                       *string                                                                 `json:"value,omitempty"`
	Width                       *string                                                                 `json:"width,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _DaVinciFlowVersionDetailResponseSkcomponentOptions DaVinciFlowVersionDetailResponseSkcomponentOptions

// NewDaVinciFlowVersionDetailResponseSkcomponentOptions instantiates a new DaVinciFlowVersionDetailResponseSkcomponentOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionDetailResponseSkcomponentOptions() *DaVinciFlowVersionDetailResponseSkcomponentOptions {
	this := DaVinciFlowVersionDetailResponseSkcomponentOptions{}
	var collectBehavioralData bool = true
	this.CollectBehavioralData = &collectBehavioralData
	var height string = "600px"
	this.Height = &height
	var micUrl string = "https://devsdk.singularkey.com/react-mic/latest/react-mic.js"
	this.MicUrl = &micUrl
	var pollChallengeStatus bool = true
	this.PollChallengeStatus = &pollChallengeStatus
	var pollInterval int32 = 2000
	this.PollInterval = &pollInterval
	var pollRetries int32 = 60
	this.PollRetries = &pollRetries
	var previewType DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType = DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSPREVIEWTYPE_IMAGE
	this.PreviewType = &previewType
	var showPreview DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview = DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSSHOWPREVIEW_YES
	this.ShowPreview = &showPreview
	var width string = "600px"
	this.Width = &width
	return &this
}

// NewDaVinciFlowVersionDetailResponseSkcomponentOptionsWithDefaults instantiates a new DaVinciFlowVersionDetailResponseSkcomponentOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionDetailResponseSkcomponentOptionsWithDefaults() *DaVinciFlowVersionDetailResponseSkcomponentOptions {
	this := DaVinciFlowVersionDetailResponseSkcomponentOptions{}
	var collectBehavioralData bool = true
	this.CollectBehavioralData = &collectBehavioralData
	var height string = "600px"
	this.Height = &height
	var micUrl string = "https://devsdk.singularkey.com/react-mic/latest/react-mic.js"
	this.MicUrl = &micUrl
	var pollChallengeStatus bool = true
	this.PollChallengeStatus = &pollChallengeStatus
	var pollInterval int32 = 2000
	this.PollInterval = &pollInterval
	var pollRetries int32 = 60
	this.PollRetries = &pollRetries
	var previewType DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType = DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSPREVIEWTYPE_IMAGE
	this.PreviewType = &previewType
	var showPreview DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview = DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSSHOWPREVIEW_YES
	this.ShowPreview = &showPreview
	var width string = "600px"
	this.Width = &width
	return &this
}

// GetAppSessionId returns the AppSessionId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetAppSessionId() string {
	if o == nil || IsNil(o.AppSessionId) {
		var ret string
		return ret
	}
	return *o.AppSessionId
}

// GetAppSessionIdOk returns a tuple with the AppSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetAppSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppSessionId) {
		return nil, false
	}
	return o.AppSessionId, true
}

// HasAppSessionId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasAppSessionId() bool {
	if o != nil && !IsNil(o.AppSessionId) {
		return true
	}

	return false
}

// SetAppSessionId gets a reference to the given string and assigns it to the AppSessionId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetAppSessionId(v string) {
	o.AppSessionId = &v
}

// GetAppid returns the Appid field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetAppid() string {
	if o == nil || IsNil(o.Appid) {
		var ret string
		return ret
	}
	return *o.Appid
}

// GetAppidOk returns a tuple with the Appid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetAppidOk() (*string, bool) {
	if o == nil || IsNil(o.Appid) {
		return nil, false
	}
	return o.Appid, true
}

// HasAppid returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasAppid() bool {
	if o != nil && !IsNil(o.Appid) {
		return true
	}

	return false
}

// SetAppid gets a reference to the given string and assigns it to the Appid field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetAppid(v string) {
	o.Appid = &v
}

// GetAppsecret returns the Appsecret field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetAppsecret() string {
	if o == nil || IsNil(o.Appsecret) {
		var ret string
		return ret
	}
	return *o.Appsecret
}

// GetAppsecretOk returns a tuple with the Appsecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetAppsecretOk() (*string, bool) {
	if o == nil || IsNil(o.Appsecret) {
		return nil, false
	}
	return o.Appsecret, true
}

// HasAppsecret returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasAppsecret() bool {
	if o != nil && !IsNil(o.Appsecret) {
		return true
	}

	return false
}

// SetAppsecret gets a reference to the given string and assigns it to the Appsecret field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetAppsecret(v string) {
	o.Appsecret = &v
}

// GetBrowsertoken returns the Browsertoken field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetBrowsertoken() string {
	if o == nil || IsNil(o.Browsertoken) {
		var ret string
		return ret
	}
	return *o.Browsertoken
}

// GetBrowsertokenOk returns a tuple with the Browsertoken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetBrowsertokenOk() (*string, bool) {
	if o == nil || IsNil(o.Browsertoken) {
		return nil, false
	}
	return o.Browsertoken, true
}

// HasBrowsertoken returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasBrowsertoken() bool {
	if o != nil && !IsNil(o.Browsertoken) {
		return true
	}

	return false
}

// SetBrowsertoken gets a reference to the given string and assigns it to the Browsertoken field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetBrowsertoken(v string) {
	o.Browsertoken = &v
}

// GetButtonImage returns the ButtonImage field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonImage() string {
	if o == nil || IsNil(o.ButtonImage) {
		var ret string
		return ret
	}
	return *o.ButtonImage
}

// GetButtonImageOk returns a tuple with the ButtonImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonImageOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonImage) {
		return nil, false
	}
	return o.ButtonImage, true
}

// HasButtonImage returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasButtonImage() bool {
	if o != nil && !IsNil(o.ButtonImage) {
		return true
	}

	return false
}

// SetButtonImage gets a reference to the given string and assigns it to the ButtonImage field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetButtonImage(v string) {
	o.ButtonImage = &v
}

// GetButtonImageClass returns the ButtonImageClass field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonImageClass() string {
	if o == nil || IsNil(o.ButtonImageClass) {
		var ret string
		return ret
	}
	return *o.ButtonImageClass
}

// GetButtonImageClassOk returns a tuple with the ButtonImageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonImageClassOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonImageClass) {
		return nil, false
	}
	return o.ButtonImageClass, true
}

// HasButtonImageClass returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasButtonImageClass() bool {
	if o != nil && !IsNil(o.ButtonImageClass) {
		return true
	}

	return false
}

// SetButtonImageClass gets a reference to the given string and assigns it to the ButtonImageClass field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetButtonImageClass(v string) {
	o.ButtonImageClass = &v
}

// GetButtonImagePlacement returns the ButtonImagePlacement field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonImagePlacement() DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonImagePlacement {
	if o == nil || IsNil(o.ButtonImagePlacement) {
		var ret DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonImagePlacement
		return ret
	}
	return *o.ButtonImagePlacement
}

// GetButtonImagePlacementOk returns a tuple with the ButtonImagePlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonImagePlacementOk() (*DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonImagePlacement, bool) {
	if o == nil || IsNil(o.ButtonImagePlacement) {
		return nil, false
	}
	return o.ButtonImagePlacement, true
}

// HasButtonImagePlacement returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasButtonImagePlacement() bool {
	if o != nil && !IsNil(o.ButtonImagePlacement) {
		return true
	}

	return false
}

// SetButtonImagePlacement gets a reference to the given DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonImagePlacement and assigns it to the ButtonImagePlacement field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetButtonImagePlacement(v DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonImagePlacement) {
	o.ButtonImagePlacement = &v
}

// GetButtonType returns the ButtonType field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonType() DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType {
	if o == nil || IsNil(o.ButtonType) {
		var ret DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType
		return ret
	}
	return *o.ButtonType
}

// GetButtonTypeOk returns a tuple with the ButtonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetButtonTypeOk() (*DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType, bool) {
	if o == nil || IsNil(o.ButtonType) {
		return nil, false
	}
	return o.ButtonType, true
}

// HasButtonType returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasButtonType() bool {
	if o != nil && !IsNil(o.ButtonType) {
		return true
	}

	return false
}

// SetButtonType gets a reference to the given DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType and assigns it to the ButtonType field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetButtonType(v DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) {
	o.ButtonType = &v
}

// GetCdn returns the Cdn field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCdn() string {
	if o == nil || IsNil(o.Cdn) {
		var ret string
		return ret
	}
	return *o.Cdn
}

// GetCdnOk returns a tuple with the Cdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCdnOk() (*string, bool) {
	if o == nil || IsNil(o.Cdn) {
		return nil, false
	}
	return o.Cdn, true
}

// HasCdn returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasCdn() bool {
	if o != nil && !IsNil(o.Cdn) {
		return true
	}

	return false
}

// SetCdn gets a reference to the given string and assigns it to the Cdn field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetCdn(v string) {
	o.Cdn = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetClass(v string) {
	o.Class = &v
}

// GetCollectBehavioralData returns the CollectBehavioralData field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCollectBehavioralData() bool {
	if o == nil || IsNil(o.CollectBehavioralData) {
		var ret bool
		return ret
	}
	return *o.CollectBehavioralData
}

// GetCollectBehavioralDataOk returns a tuple with the CollectBehavioralData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCollectBehavioralDataOk() (*bool, bool) {
	if o == nil || IsNil(o.CollectBehavioralData) {
		return nil, false
	}
	return o.CollectBehavioralData, true
}

// HasCollectBehavioralData returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasCollectBehavioralData() bool {
	if o != nil && !IsNil(o.CollectBehavioralData) {
		return true
	}

	return false
}

// SetCollectBehavioralData gets a reference to the given bool and assigns it to the CollectBehavioralData field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetCollectBehavioralData(v bool) {
	o.CollectBehavioralData = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetContentType() DaVinciFlowVersionDetailResponseSkcomponentOptionsContentType {
	if o == nil || IsNil(o.ContentType) {
		var ret DaVinciFlowVersionDetailResponseSkcomponentOptionsContentType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetContentTypeOk() (*DaVinciFlowVersionDetailResponseSkcomponentOptionsContentType, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given DaVinciFlowVersionDetailResponseSkcomponentOptionsContentType and assigns it to the ContentType field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetContentType(v DaVinciFlowVersionDetailResponseSkcomponentOptionsContentType) {
	o.ContentType = &v
}

// GetCreateP1User returns the CreateP1User field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCreateP1User() string {
	if o == nil || IsNil(o.CreateP1User) {
		var ret string
		return ret
	}
	return *o.CreateP1User
}

// GetCreateP1UserOk returns a tuple with the CreateP1User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCreateP1UserOk() (*string, bool) {
	if o == nil || IsNil(o.CreateP1User) {
		return nil, false
	}
	return o.CreateP1User, true
}

// HasCreateP1User returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasCreateP1User() bool {
	if o != nil && !IsNil(o.CreateP1User) {
		return true
	}

	return false
}

// SetCreateP1User gets a reference to the given string and assigns it to the CreateP1User field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetCreateP1User(v string) {
	o.CreateP1User = &v
}

// GetCustomLoadingIndicator returns the CustomLoadingIndicator field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCustomLoadingIndicator() string {
	if o == nil || IsNil(o.CustomLoadingIndicator) {
		var ret string
		return ret
	}
	return *o.CustomLoadingIndicator
}

// GetCustomLoadingIndicatorOk returns a tuple with the CustomLoadingIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCustomLoadingIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.CustomLoadingIndicator) {
		return nil, false
	}
	return o.CustomLoadingIndicator, true
}

// HasCustomLoadingIndicator returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasCustomLoadingIndicator() bool {
	if o != nil && !IsNil(o.CustomLoadingIndicator) {
		return true
	}

	return false
}

// SetCustomLoadingIndicator gets a reference to the given string and assigns it to the CustomLoadingIndicator field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetCustomLoadingIndicator(v string) {
	o.CustomLoadingIndicator = &v
}

// GetCustomLoadingIndicatorClass returns the CustomLoadingIndicatorClass field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCustomLoadingIndicatorClass() string {
	if o == nil || IsNil(o.CustomLoadingIndicatorClass) {
		var ret string
		return ret
	}
	return *o.CustomLoadingIndicatorClass
}

// GetCustomLoadingIndicatorClassOk returns a tuple with the CustomLoadingIndicatorClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetCustomLoadingIndicatorClassOk() (*string, bool) {
	if o == nil || IsNil(o.CustomLoadingIndicatorClass) {
		return nil, false
	}
	return o.CustomLoadingIndicatorClass, true
}

// HasCustomLoadingIndicatorClass returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasCustomLoadingIndicatorClass() bool {
	if o != nil && !IsNil(o.CustomLoadingIndicatorClass) {
		return true
	}

	return false
}

// SetCustomLoadingIndicatorClass gets a reference to the given string and assigns it to the CustomLoadingIndicatorClass field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetCustomLoadingIndicatorClass(v string) {
	o.CustomLoadingIndicatorClass = &v
}

// GetDefaultLoadingColor returns the DefaultLoadingColor field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetDefaultLoadingColor() string {
	if o == nil || IsNil(o.DefaultLoadingColor) {
		var ret string
		return ret
	}
	return *o.DefaultLoadingColor
}

// GetDefaultLoadingColorOk returns a tuple with the DefaultLoadingColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetDefaultLoadingColorOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLoadingColor) {
		return nil, false
	}
	return o.DefaultLoadingColor, true
}

// HasDefaultLoadingColor returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasDefaultLoadingColor() bool {
	if o != nil && !IsNil(o.DefaultLoadingColor) {
		return true
	}

	return false
}

// SetDefaultLoadingColor gets a reference to the given string and assigns it to the DefaultLoadingColor field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetDefaultLoadingColor(v string) {
	o.DefaultLoadingColor = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId) {
		var ret string
		return ret
	}
	return *o.ErrorId
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetErrorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorId) {
		return nil, false
	}
	return o.ErrorId, true
}

// HasErrorId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasErrorId() bool {
	if o != nil && !IsNil(o.ErrorId) {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given string and assigns it to the ErrorId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetErrorId(v string) {
	o.ErrorId = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetForm() string {
	if o == nil || IsNil(o.Form) {
		var ret string
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetFormOk() (*string, bool) {
	if o == nil || IsNil(o.Form) {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasForm() bool {
	if o != nil && !IsNil(o.Form) {
		return true
	}

	return false
}

// SetForm gets a reference to the given string and assigns it to the Form field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetForm(v string) {
	o.Form = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetHeight() string {
	if o == nil || IsNil(o.Height) {
		var ret string
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetHeightOk() (*string, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given string and assigns it to the Height field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetHeight(v string) {
	o.Height = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetHost(v string) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetId(v string) {
	o.Id = &v
}

// GetIdentityProviderId returns the IdentityProviderId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdentityProviderId() string {
	if o == nil || IsNil(o.IdentityProviderId) {
		var ret string
		return ret
	}
	return *o.IdentityProviderId
}

// GetIdentityProviderIdOk returns a tuple with the IdentityProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdentityProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityProviderId) {
		return nil, false
	}
	return o.IdentityProviderId, true
}

// HasIdentityProviderId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasIdentityProviderId() bool {
	if o != nil && !IsNil(o.IdentityProviderId) {
		return true
	}

	return false
}

// SetIdentityProviderId gets a reference to the given string and assigns it to the IdentityProviderId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetIdentityProviderId(v string) {
	o.IdentityProviderId = &v
}

// GetIdentityProviderIdEntry returns the IdentityProviderIdEntry field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdentityProviderIdEntry() string {
	if o == nil || IsNil(o.IdentityProviderIdEntry) {
		var ret string
		return ret
	}
	return *o.IdentityProviderIdEntry
}

// GetIdentityProviderIdEntryOk returns a tuple with the IdentityProviderIdEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdentityProviderIdEntryOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityProviderIdEntry) {
		return nil, false
	}
	return o.IdentityProviderIdEntry, true
}

// HasIdentityProviderIdEntry returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasIdentityProviderIdEntry() bool {
	if o != nil && !IsNil(o.IdentityProviderIdEntry) {
		return true
	}

	return false
}

// SetIdentityProviderIdEntry gets a reference to the given string and assigns it to the IdentityProviderIdEntry field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetIdentityProviderIdEntry(v string) {
	o.IdentityProviderIdEntry = &v
}

// GetIdentityProviderType returns the IdentityProviderType field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdentityProviderType() string {
	if o == nil || IsNil(o.IdentityProviderType) {
		var ret string
		return ret
	}
	return *o.IdentityProviderType
}

// GetIdentityProviderTypeOk returns a tuple with the IdentityProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdentityProviderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityProviderType) {
		return nil, false
	}
	return o.IdentityProviderType, true
}

// HasIdentityProviderType returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasIdentityProviderType() bool {
	if o != nil && !IsNil(o.IdentityProviderType) {
		return true
	}

	return false
}

// SetIdentityProviderType gets a reference to the given string and assigns it to the IdentityProviderType field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetIdentityProviderType(v string) {
	o.IdentityProviderType = &v
}

// GetIdpConnector returns the IdpConnector field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdpConnector() string {
	if o == nil || IsNil(o.IdpConnector) {
		var ret string
		return ret
	}
	return *o.IdpConnector
}

// GetIdpConnectorOk returns a tuple with the IdpConnector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetIdpConnectorOk() (*string, bool) {
	if o == nil || IsNil(o.IdpConnector) {
		return nil, false
	}
	return o.IdpConnector, true
}

// HasIdpConnector returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasIdpConnector() bool {
	if o != nil && !IsNil(o.IdpConnector) {
		return true
	}

	return false
}

// SetIdpConnector gets a reference to the given string and assigns it to the IdpConnector field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetIdpConnector(v string) {
	o.IdpConnector = &v
}

// GetImgUrl returns the ImgUrl field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetImgUrl() string {
	if o == nil || IsNil(o.ImgUrl) {
		var ret string
		return ret
	}
	return *o.ImgUrl
}

// GetImgUrlOk returns a tuple with the ImgUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetImgUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImgUrl) {
		return nil, false
	}
	return o.ImgUrl, true
}

// HasImgUrl returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasImgUrl() bool {
	if o != nil && !IsNil(o.ImgUrl) {
		return true
	}

	return false
}

// SetImgUrl gets a reference to the given string and assigns it to the ImgUrl field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetImgUrl(v string) {
	o.ImgUrl = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetLabel(v string) {
	o.Label = &v
}

// GetMessageClass returns the MessageClass field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetMessageClass() string {
	if o == nil || IsNil(o.MessageClass) {
		var ret string
		return ret
	}
	return *o.MessageClass
}

// GetMessageClassOk returns a tuple with the MessageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetMessageClassOk() (*string, bool) {
	if o == nil || IsNil(o.MessageClass) {
		return nil, false
	}
	return o.MessageClass, true
}

// HasMessageClass returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasMessageClass() bool {
	if o != nil && !IsNil(o.MessageClass) {
		return true
	}

	return false
}

// SetMessageClass gets a reference to the given string and assigns it to the MessageClass field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetMessageClass(v string) {
	o.MessageClass = &v
}

// GetMicUrl returns the MicUrl field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetMicUrl() string {
	if o == nil || IsNil(o.MicUrl) {
		var ret string
		return ret
	}
	return *o.MicUrl
}

// GetMicUrlOk returns a tuple with the MicUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetMicUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MicUrl) {
		return nil, false
	}
	return o.MicUrl, true
}

// HasMicUrl returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasMicUrl() bool {
	if o != nil && !IsNil(o.MicUrl) {
		return true
	}

	return false
}

// SetMicUrl gets a reference to the given string and assigns it to the MicUrl field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetMicUrl(v string) {
	o.MicUrl = &v
}

// GetOtpInput returns the OtpInput field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetOtpInput() string {
	if o == nil || IsNil(o.OtpInput) {
		var ret string
		return ret
	}
	return *o.OtpInput
}

// GetOtpInputOk returns a tuple with the OtpInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetOtpInputOk() (*string, bool) {
	if o == nil || IsNil(o.OtpInput) {
		return nil, false
	}
	return o.OtpInput, true
}

// HasOtpInput returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasOtpInput() bool {
	if o != nil && !IsNil(o.OtpInput) {
		return true
	}

	return false
}

// SetOtpInput gets a reference to the given string and assigns it to the OtpInput field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetOtpInput(v string) {
	o.OtpInput = &v
}

// GetPollChallengeStatus returns the PollChallengeStatus field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPollChallengeStatus() bool {
	if o == nil || IsNil(o.PollChallengeStatus) {
		var ret bool
		return ret
	}
	return *o.PollChallengeStatus
}

// GetPollChallengeStatusOk returns a tuple with the PollChallengeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPollChallengeStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.PollChallengeStatus) {
		return nil, false
	}
	return o.PollChallengeStatus, true
}

// HasPollChallengeStatus returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPollChallengeStatus() bool {
	if o != nil && !IsNil(o.PollChallengeStatus) {
		return true
	}

	return false
}

// SetPollChallengeStatus gets a reference to the given bool and assigns it to the PollChallengeStatus field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPollChallengeStatus(v bool) {
	o.PollChallengeStatus = &v
}

// GetPollInterval returns the PollInterval field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPollInterval() int32 {
	if o == nil || IsNil(o.PollInterval) {
		var ret int32
		return ret
	}
	return *o.PollInterval
}

// GetPollIntervalOk returns a tuple with the PollInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPollIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.PollInterval) {
		return nil, false
	}
	return o.PollInterval, true
}

// HasPollInterval returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPollInterval() bool {
	if o != nil && !IsNil(o.PollInterval) {
		return true
	}

	return false
}

// SetPollInterval gets a reference to the given int32 and assigns it to the PollInterval field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPollInterval(v int32) {
	o.PollInterval = &v
}

// GetPollRetries returns the PollRetries field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPollRetries() int32 {
	if o == nil || IsNil(o.PollRetries) {
		var ret int32
		return ret
	}
	return *o.PollRetries
}

// GetPollRetriesOk returns a tuple with the PollRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPollRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.PollRetries) {
		return nil, false
	}
	return o.PollRetries, true
}

// HasPollRetries returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPollRetries() bool {
	if o != nil && !IsNil(o.PollRetries) {
		return true
	}

	return false
}

// SetPollRetries gets a reference to the given int32 and assigns it to the PollRetries field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPollRetries(v int32) {
	o.PollRetries = &v
}

// GetPopulationId returns the PopulationId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPopulationId() string {
	if o == nil || IsNil(o.PopulationId) {
		var ret string
		return ret
	}
	return *o.PopulationId
}

// GetPopulationIdOk returns a tuple with the PopulationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPopulationIdOk() (*string, bool) {
	if o == nil || IsNil(o.PopulationId) {
		return nil, false
	}
	return o.PopulationId, true
}

// HasPopulationId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPopulationId() bool {
	if o != nil && !IsNil(o.PopulationId) {
		return true
	}

	return false
}

// SetPopulationId gets a reference to the given string and assigns it to the PopulationId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPopulationId(v string) {
	o.PopulationId = &v
}

// GetPopulationIdEntry returns the PopulationIdEntry field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPopulationIdEntry() string {
	if o == nil || IsNil(o.PopulationIdEntry) {
		var ret string
		return ret
	}
	return *o.PopulationIdEntry
}

// GetPopulationIdEntryOk returns a tuple with the PopulationIdEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPopulationIdEntryOk() (*string, bool) {
	if o == nil || IsNil(o.PopulationIdEntry) {
		return nil, false
	}
	return o.PopulationIdEntry, true
}

// HasPopulationIdEntry returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPopulationIdEntry() bool {
	if o != nil && !IsNil(o.PopulationIdEntry) {
		return true
	}

	return false
}

// SetPopulationIdEntry gets a reference to the given string and assigns it to the PopulationIdEntry field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPopulationIdEntry(v string) {
	o.PopulationIdEntry = &v
}

// GetPreviewType returns the PreviewType field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPreviewType() DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType {
	if o == nil || IsNil(o.PreviewType) {
		var ret DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType
		return ret
	}
	return *o.PreviewType
}

// GetPreviewTypeOk returns a tuple with the PreviewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPreviewTypeOk() (*DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType, bool) {
	if o == nil || IsNil(o.PreviewType) {
		return nil, false
	}
	return o.PreviewType, true
}

// HasPreviewType returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPreviewType() bool {
	if o != nil && !IsNil(o.PreviewType) {
		return true
	}

	return false
}

// SetPreviewType gets a reference to the given DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType and assigns it to the PreviewType field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPreviewType(v DaVinciFlowVersionDetailResponseSkcomponentOptionsPreviewType) {
	o.PreviewType = &v
}

// GetPropertyname returns the Propertyname field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPropertyname() string {
	if o == nil || IsNil(o.Propertyname) {
		var ret string
		return ret
	}
	return *o.Propertyname
}

// GetPropertynameOk returns a tuple with the Propertyname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetPropertynameOk() (*string, bool) {
	if o == nil || IsNil(o.Propertyname) {
		return nil, false
	}
	return o.Propertyname, true
}

// HasPropertyname returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasPropertyname() bool {
	if o != nil && !IsNil(o.Propertyname) {
		return true
	}

	return false
}

// SetPropertyname gets a reference to the given string and assigns it to the Propertyname field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetPropertyname(v string) {
	o.Propertyname = &v
}

// GetReturnUrl returns the ReturnUrl field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetReturnUrl() string {
	if o == nil || IsNil(o.ReturnUrl) {
		var ret string
		return ret
	}
	return *o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetReturnUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnUrl) {
		return nil, false
	}
	return o.ReturnUrl, true
}

// HasReturnUrl returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasReturnUrl() bool {
	if o != nil && !IsNil(o.ReturnUrl) {
		return true
	}

	return false
}

// SetReturnUrl gets a reference to the given string and assigns it to the ReturnUrl field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetReturnUrl(v string) {
	o.ReturnUrl = &v
}

// GetShowPreview returns the ShowPreview field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetShowPreview() DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview {
	if o == nil || IsNil(o.ShowPreview) {
		var ret DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview
		return ret
	}
	return *o.ShowPreview
}

// GetShowPreviewOk returns a tuple with the ShowPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetShowPreviewOk() (*DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview, bool) {
	if o == nil || IsNil(o.ShowPreview) {
		return nil, false
	}
	return o.ShowPreview, true
}

// HasShowPreview returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasShowPreview() bool {
	if o != nil && !IsNil(o.ShowPreview) {
		return true
	}

	return false
}

// SetShowPreview gets a reference to the given DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview and assigns it to the ShowPreview field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetShowPreview(v DaVinciFlowVersionDetailResponseSkcomponentOptionsShowPreview) {
	o.ShowPreview = &v
}

// GetSiteKey returns the SiteKey field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetSiteKey() string {
	if o == nil || IsNil(o.SiteKey) {
		var ret string
		return ret
	}
	return *o.SiteKey
}

// GetSiteKeyOk returns a tuple with the SiteKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetSiteKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SiteKey) {
		return nil, false
	}
	return o.SiteKey, true
}

// HasSiteKey returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasSiteKey() bool {
	if o != nil && !IsNil(o.SiteKey) {
		return true
	}

	return false
}

// SetSiteKey gets a reference to the given string and assigns it to the SiteKey field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetSiteKey(v string) {
	o.SiteKey = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetUserId(v string) {
	o.UserId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetValue(v string) {
	o.Value = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetWidth() string {
	if o == nil || IsNil(o.Width) {
		var ret string
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) GetWidthOk() (*string, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given string and assigns it to the Width field.
func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) SetWidth(v string) {
	o.Width = &v
}

func (o DaVinciFlowVersionDetailResponseSkcomponentOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionDetailResponseSkcomponentOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppSessionId) {
		toSerialize["appSessionId"] = o.AppSessionId
	}
	if !IsNil(o.Appid) {
		toSerialize["appid"] = o.Appid
	}
	if !IsNil(o.Appsecret) {
		toSerialize["appsecret"] = o.Appsecret
	}
	if !IsNil(o.Browsertoken) {
		toSerialize["browsertoken"] = o.Browsertoken
	}
	if !IsNil(o.ButtonImage) {
		toSerialize["buttonImage"] = o.ButtonImage
	}
	if !IsNil(o.ButtonImageClass) {
		toSerialize["buttonImageClass"] = o.ButtonImageClass
	}
	if !IsNil(o.ButtonImagePlacement) {
		toSerialize["buttonImagePlacement"] = o.ButtonImagePlacement
	}
	if !IsNil(o.ButtonType) {
		toSerialize["buttonType"] = o.ButtonType
	}
	if !IsNil(o.Cdn) {
		toSerialize["cdn"] = o.Cdn
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.CollectBehavioralData) {
		toSerialize["collectBehavioralData"] = o.CollectBehavioralData
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.CreateP1User) {
		toSerialize["createP1User"] = o.CreateP1User
	}
	if !IsNil(o.CustomLoadingIndicator) {
		toSerialize["customLoadingIndicator"] = o.CustomLoadingIndicator
	}
	if !IsNil(o.CustomLoadingIndicatorClass) {
		toSerialize["customLoadingIndicatorClass"] = o.CustomLoadingIndicatorClass
	}
	if !IsNil(o.DefaultLoadingColor) {
		toSerialize["defaultLoadingColor"] = o.DefaultLoadingColor
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environmentId"] = o.EnvironmentId
	}
	if !IsNil(o.ErrorId) {
		toSerialize["errorId"] = o.ErrorId
	}
	if !IsNil(o.Form) {
		toSerialize["form"] = o.Form
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdentityProviderId) {
		toSerialize["identityProviderId"] = o.IdentityProviderId
	}
	if !IsNil(o.IdentityProviderIdEntry) {
		toSerialize["identityProviderIdEntry"] = o.IdentityProviderIdEntry
	}
	if !IsNil(o.IdentityProviderType) {
		toSerialize["identityProviderType"] = o.IdentityProviderType
	}
	if !IsNil(o.IdpConnector) {
		toSerialize["idpConnector"] = o.IdpConnector
	}
	if !IsNil(o.ImgUrl) {
		toSerialize["imgUrl"] = o.ImgUrl
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.MessageClass) {
		toSerialize["messageClass"] = o.MessageClass
	}
	if !IsNil(o.MicUrl) {
		toSerialize["micUrl"] = o.MicUrl
	}
	if !IsNil(o.OtpInput) {
		toSerialize["otpInput"] = o.OtpInput
	}
	if !IsNil(o.PollChallengeStatus) {
		toSerialize["pollChallengeStatus"] = o.PollChallengeStatus
	}
	if !IsNil(o.PollInterval) {
		toSerialize["pollInterval"] = o.PollInterval
	}
	if !IsNil(o.PollRetries) {
		toSerialize["pollRetries"] = o.PollRetries
	}
	if !IsNil(o.PopulationId) {
		toSerialize["populationId"] = o.PopulationId
	}
	if !IsNil(o.PopulationIdEntry) {
		toSerialize["populationIdEntry"] = o.PopulationIdEntry
	}
	if !IsNil(o.PreviewType) {
		toSerialize["previewType"] = o.PreviewType
	}
	if !IsNil(o.Propertyname) {
		toSerialize["propertyname"] = o.Propertyname
	}
	if !IsNil(o.ReturnUrl) {
		toSerialize["returnUrl"] = o.ReturnUrl
	}
	if !IsNil(o.ShowPreview) {
		toSerialize["showPreview"] = o.ShowPreview
	}
	if !IsNil(o.SiteKey) {
		toSerialize["siteKey"] = o.SiteKey
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionDetailResponseSkcomponentOptions) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowVersionDetailResponseSkcomponentOptions := _DaVinciFlowVersionDetailResponseSkcomponentOptions{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionDetailResponseSkcomponentOptions)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionDetailResponseSkcomponentOptions(varDaVinciFlowVersionDetailResponseSkcomponentOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "appSessionId")
		delete(additionalProperties, "appid")
		delete(additionalProperties, "appsecret")
		delete(additionalProperties, "browsertoken")
		delete(additionalProperties, "buttonImage")
		delete(additionalProperties, "buttonImageClass")
		delete(additionalProperties, "buttonImagePlacement")
		delete(additionalProperties, "buttonType")
		delete(additionalProperties, "cdn")
		delete(additionalProperties, "class")
		delete(additionalProperties, "collectBehavioralData")
		delete(additionalProperties, "contentType")
		delete(additionalProperties, "createP1User")
		delete(additionalProperties, "customLoadingIndicator")
		delete(additionalProperties, "customLoadingIndicatorClass")
		delete(additionalProperties, "defaultLoadingColor")
		delete(additionalProperties, "environmentId")
		delete(additionalProperties, "errorId")
		delete(additionalProperties, "form")
		delete(additionalProperties, "height")
		delete(additionalProperties, "host")
		delete(additionalProperties, "id")
		delete(additionalProperties, "identityProviderId")
		delete(additionalProperties, "identityProviderIdEntry")
		delete(additionalProperties, "identityProviderType")
		delete(additionalProperties, "idpConnector")
		delete(additionalProperties, "imgUrl")
		delete(additionalProperties, "label")
		delete(additionalProperties, "messageClass")
		delete(additionalProperties, "micUrl")
		delete(additionalProperties, "otpInput")
		delete(additionalProperties, "pollChallengeStatus")
		delete(additionalProperties, "pollInterval")
		delete(additionalProperties, "pollRetries")
		delete(additionalProperties, "populationId")
		delete(additionalProperties, "populationIdEntry")
		delete(additionalProperties, "previewType")
		delete(additionalProperties, "propertyname")
		delete(additionalProperties, "returnUrl")
		delete(additionalProperties, "showPreview")
		delete(additionalProperties, "siteKey")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "value")
		delete(additionalProperties, "width")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionDetailResponseSkcomponentOptions) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.AppSessionId) {
		logAttrs = append(logAttrs, slog.Any("appSessionId", *o.AppSessionId))
	}
	if !IsNil(o.Appid) {
		logAttrs = append(logAttrs, slog.Any("appid", *o.Appid))
	}
	if !IsNil(o.Appsecret) {
		logAttrs = append(logAttrs, slog.Any("appsecret", *o.Appsecret))
	}
	if !IsNil(o.Browsertoken) {
		logAttrs = append(logAttrs, slog.Any("browsertoken", *o.Browsertoken))
	}
	if !IsNil(o.ButtonImage) {
		logAttrs = append(logAttrs, slog.Any("buttonImage", *o.ButtonImage))
	}
	if !IsNil(o.ButtonImageClass) {
		logAttrs = append(logAttrs, slog.Any("buttonImageClass", *o.ButtonImageClass))
	}
	if !IsNil(o.ButtonImagePlacement) {
		logAttrs = append(logAttrs, slog.Any("buttonImagePlacement", *o.ButtonImagePlacement))
	}
	if !IsNil(o.ButtonType) {
		logAttrs = append(logAttrs, slog.Any("buttonType", *o.ButtonType))
	}
	if !IsNil(o.Cdn) {
		logAttrs = append(logAttrs, slog.Any("cdn", *o.Cdn))
	}
	if !IsNil(o.Class) {
		logAttrs = append(logAttrs, slog.Any("class", *o.Class))
	}
	if !IsNil(o.CollectBehavioralData) {
		logAttrs = append(logAttrs, slog.Any("collectBehavioralData", *o.CollectBehavioralData))
	}
	if !IsNil(o.ContentType) {
		logAttrs = append(logAttrs, slog.Any("contentType", *o.ContentType))
	}
	if !IsNil(o.CreateP1User) {
		logAttrs = append(logAttrs, slog.Any("createP1User", *o.CreateP1User))
	}
	if !IsNil(o.CustomLoadingIndicator) {
		logAttrs = append(logAttrs, slog.Any("customLoadingIndicator", *o.CustomLoadingIndicator))
	}
	if !IsNil(o.CustomLoadingIndicatorClass) {
		logAttrs = append(logAttrs, slog.Any("customLoadingIndicatorClass", *o.CustomLoadingIndicatorClass))
	}
	if !IsNil(o.DefaultLoadingColor) {
		logAttrs = append(logAttrs, slog.Any("defaultLoadingColor", *o.DefaultLoadingColor))
	}
	if !IsNil(o.EnvironmentId) {
		logAttrs = append(logAttrs, slog.Any("environmentId", *o.EnvironmentId))
	}
	if !IsNil(o.ErrorId) {
		logAttrs = append(logAttrs, slog.Any("errorId", *o.ErrorId))
	}
	if !IsNil(o.Form) {
		logAttrs = append(logAttrs, slog.Any("form", *o.Form))
	}
	if !IsNil(o.Height) {
		logAttrs = append(logAttrs, slog.Any("height", *o.Height))
	}
	if !IsNil(o.Host) {
		logAttrs = append(logAttrs, slog.Any("host", *o.Host))
	}
	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	if !IsNil(o.IdentityProviderId) {
		logAttrs = append(logAttrs, slog.Any("identityProviderId", *o.IdentityProviderId))
	}
	if !IsNil(o.IdentityProviderIdEntry) {
		logAttrs = append(logAttrs, slog.Any("identityProviderIdEntry", *o.IdentityProviderIdEntry))
	}
	if !IsNil(o.IdentityProviderType) {
		logAttrs = append(logAttrs, slog.Any("identityProviderType", *o.IdentityProviderType))
	}
	if !IsNil(o.IdpConnector) {
		logAttrs = append(logAttrs, slog.Any("idpConnector", *o.IdpConnector))
	}
	if !IsNil(o.ImgUrl) {
		logAttrs = append(logAttrs, slog.Any("imgUrl", *o.ImgUrl))
	}
	if !IsNil(o.Label) {
		logAttrs = append(logAttrs, slog.Any("label", *o.Label))
	}
	if !IsNil(o.MessageClass) {
		logAttrs = append(logAttrs, slog.Any("messageClass", *o.MessageClass))
	}
	if !IsNil(o.MicUrl) {
		logAttrs = append(logAttrs, slog.Any("micUrl", *o.MicUrl))
	}
	if !IsNil(o.OtpInput) {
		logAttrs = append(logAttrs, slog.Any("otpInput", *o.OtpInput))
	}
	if !IsNil(o.PollChallengeStatus) {
		logAttrs = append(logAttrs, slog.Any("pollChallengeStatus", *o.PollChallengeStatus))
	}
	if !IsNil(o.PollInterval) {
		logAttrs = append(logAttrs, slog.Any("pollInterval", *o.PollInterval))
	}
	if !IsNil(o.PollRetries) {
		logAttrs = append(logAttrs, slog.Any("pollRetries", *o.PollRetries))
	}
	if !IsNil(o.PopulationId) {
		logAttrs = append(logAttrs, slog.Any("populationId", *o.PopulationId))
	}
	if !IsNil(o.PopulationIdEntry) {
		logAttrs = append(logAttrs, slog.Any("populationIdEntry", *o.PopulationIdEntry))
	}
	if !IsNil(o.PreviewType) {
		logAttrs = append(logAttrs, slog.Any("previewType", *o.PreviewType))
	}
	if !IsNil(o.Propertyname) {
		logAttrs = append(logAttrs, slog.Any("propertyname", *o.Propertyname))
	}
	if !IsNil(o.ReturnUrl) {
		logAttrs = append(logAttrs, slog.Any("returnUrl", *o.ReturnUrl))
	}
	if !IsNil(o.ShowPreview) {
		logAttrs = append(logAttrs, slog.Any("showPreview", *o.ShowPreview))
	}
	if !IsNil(o.SiteKey) {
		logAttrs = append(logAttrs, slog.Any("siteKey", *o.SiteKey))
	}
	if !IsNil(o.UserId) {
		logAttrs = append(logAttrs, slog.Any("userId", *o.UserId))
	}
	if !IsNil(o.Value) {
		logAttrs = append(logAttrs, slog.Any("value", *o.Value))
	}
	if !IsNil(o.Width) {
		logAttrs = append(logAttrs, slog.Any("width", *o.Width))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionDetailResponseSkcomponentOptions struct {
	value *DaVinciFlowVersionDetailResponseSkcomponentOptions
	isSet bool
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponentOptions) Get() *DaVinciFlowVersionDetailResponseSkcomponentOptions {
	return v.value
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponentOptions) Set(val *DaVinciFlowVersionDetailResponseSkcomponentOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponentOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponentOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionDetailResponseSkcomponentOptions(val *DaVinciFlowVersionDetailResponseSkcomponentOptions) *NullableDaVinciFlowVersionDetailResponseSkcomponentOptions {
	return &NullableDaVinciFlowVersionDetailResponseSkcomponentOptions{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponentOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponentOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
