/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentBillOfMaterialsReplaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentBillOfMaterialsReplaceRequest{}

// EnvironmentBillOfMaterialsReplaceRequest struct for EnvironmentBillOfMaterialsReplaceRequest
type EnvironmentBillOfMaterialsReplaceRequest struct {
	Products             []EnvironmentBillOfMaterialsProduct `json:"products"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentBillOfMaterialsReplaceRequest EnvironmentBillOfMaterialsReplaceRequest

// NewEnvironmentBillOfMaterialsReplaceRequest instantiates a new EnvironmentBillOfMaterialsReplaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentBillOfMaterialsReplaceRequest(products []EnvironmentBillOfMaterialsProduct) *EnvironmentBillOfMaterialsReplaceRequest {
	this := EnvironmentBillOfMaterialsReplaceRequest{}
	this.Products = products
	return &this
}

// NewEnvironmentBillOfMaterialsReplaceRequestWithDefaults instantiates a new EnvironmentBillOfMaterialsReplaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentBillOfMaterialsReplaceRequestWithDefaults() *EnvironmentBillOfMaterialsReplaceRequest {
	this := EnvironmentBillOfMaterialsReplaceRequest{}
	return &this
}

// GetProducts returns the Products field value
func (o *EnvironmentBillOfMaterialsReplaceRequest) GetProducts() []EnvironmentBillOfMaterialsProduct {
	if o == nil {
		var ret []EnvironmentBillOfMaterialsProduct
		return ret
	}

	return o.Products
}

// GetProductsOk returns a tuple with the Products field value
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsReplaceRequest) GetProductsOk() ([]EnvironmentBillOfMaterialsProduct, bool) {
	if o == nil {
		return nil, false
	}
	return o.Products, true
}

// SetProducts sets field value
func (o *EnvironmentBillOfMaterialsReplaceRequest) SetProducts(v []EnvironmentBillOfMaterialsProduct) {
	o.Products = v
}

func (o EnvironmentBillOfMaterialsReplaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentBillOfMaterialsReplaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["products"] = o.Products

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentBillOfMaterialsReplaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"products",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentBillOfMaterialsReplaceRequest := _EnvironmentBillOfMaterialsReplaceRequest{}

	err = json.Unmarshal(data, &varEnvironmentBillOfMaterialsReplaceRequest)

	if err != nil {
		return err
	}

	*o = EnvironmentBillOfMaterialsReplaceRequest(varEnvironmentBillOfMaterialsReplaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "products")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentBillOfMaterialsReplaceRequest struct {
	value *EnvironmentBillOfMaterialsReplaceRequest
	isSet bool
}

func (v NullableEnvironmentBillOfMaterialsReplaceRequest) Get() *EnvironmentBillOfMaterialsReplaceRequest {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterialsReplaceRequest) Set(val *EnvironmentBillOfMaterialsReplaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterialsReplaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterialsReplaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterialsReplaceRequest(val *EnvironmentBillOfMaterialsReplaceRequest) *NullableEnvironmentBillOfMaterialsReplaceRequest {
	return &NullableEnvironmentBillOfMaterialsReplaceRequest{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterialsReplaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterialsReplaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
