// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// SnapshotViewStatus the model 'SnapshotViewStatus'
type SnapshotViewStatus string

// List of Snapshot_View_Status
const (
	SNAPSHOTVIEWSTATUS_COMPLETE    SnapshotViewStatus = "COMPLETE"
	SNAPSHOTVIEWSTATUS_ERROR       SnapshotViewStatus = "ERROR"
	SNAPSHOTVIEWSTATUS_IN_PROGRESS SnapshotViewStatus = "IN_PROGRESS"
	SNAPSHOTVIEWSTATUS_WAITING     SnapshotViewStatus = "WAITING"
)

// All allowed values of SnapshotViewStatus enum
var AllowedSnapshotViewStatusEnumValues = []SnapshotViewStatus{
	"COMPLETE",
	"ERROR",
	"IN_PROGRESS",
	"WAITING",
}

func (v *SnapshotViewStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SnapshotViewStatus(value)
	for _, existing := range AllowedSnapshotViewStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = SnapshotViewStatus(fmt.Sprintf("%s", value))
	return nil
}

// NewSnapshotViewStatusFromValue returns a pointer to a valid SnapshotViewStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSnapshotViewStatusFromValue(v string) (*SnapshotViewStatus, error) {
	ev := SnapshotViewStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SnapshotViewStatus: valid values are %v", v, AllowedSnapshotViewStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SnapshotViewStatus) IsValid() bool {
	for _, existing := range AllowedSnapshotViewStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Snapshot_View_Status value
func (v SnapshotViewStatus) Ptr() *SnapshotViewStatus {
	return &v
}

type NullableSnapshotViewStatus struct {
	value *SnapshotViewStatus
	isSet bool
}

func (v NullableSnapshotViewStatus) Get() *SnapshotViewStatus {
	return v.value
}

func (v *NullableSnapshotViewStatus) Set(val *SnapshotViewStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotViewStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotViewStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotViewStatus(val *SnapshotViewStatus) *NullableSnapshotViewStatus {
	return &NullableSnapshotViewStatus{value: val, isSet: true}
}

func (v NullableSnapshotViewStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotViewStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
