// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowVersionCollectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionCollectionResponse{}

// checks if the DaVinciFlowVersionCollectionResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionCollectionResponse{}

// DaVinciFlowVersionCollectionResponse struct for DaVinciFlowVersionCollectionResponse
type DaVinciFlowVersionCollectionResponse struct {
	Embedded             DaVinciFlowVersionCollectionResponseEmbedded `json:"_embedded"`
	Links                DaVinciFlowVersionCollectionResponseLinks    `json:"_links"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowVersionCollectionResponse DaVinciFlowVersionCollectionResponse

// NewDaVinciFlowVersionCollectionResponse instantiates a new DaVinciFlowVersionCollectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionCollectionResponse(embedded DaVinciFlowVersionCollectionResponseEmbedded, links DaVinciFlowVersionCollectionResponseLinks) *DaVinciFlowVersionCollectionResponse {
	this := DaVinciFlowVersionCollectionResponse{}
	this.Embedded = embedded
	this.Links = links
	return &this
}

// NewDaVinciFlowVersionCollectionResponseWithDefaults instantiates a new DaVinciFlowVersionCollectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionCollectionResponseWithDefaults() *DaVinciFlowVersionCollectionResponse {
	this := DaVinciFlowVersionCollectionResponse{}
	return &this
}

// GetEmbedded returns the Embedded field value
func (o *DaVinciFlowVersionCollectionResponse) GetEmbedded() DaVinciFlowVersionCollectionResponseEmbedded {
	if o == nil {
		var ret DaVinciFlowVersionCollectionResponseEmbedded
		return ret
	}

	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionCollectionResponse) GetEmbeddedOk() (*DaVinciFlowVersionCollectionResponseEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedded, true
}

// SetEmbedded sets field value
func (o *DaVinciFlowVersionCollectionResponse) SetEmbedded(v DaVinciFlowVersionCollectionResponseEmbedded) {
	o.Embedded = v
}

// GetLinks returns the Links field value
func (o *DaVinciFlowVersionCollectionResponse) GetLinks() DaVinciFlowVersionCollectionResponseLinks {
	if o == nil {
		var ret DaVinciFlowVersionCollectionResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionCollectionResponse) GetLinksOk() (*DaVinciFlowVersionCollectionResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciFlowVersionCollectionResponse) SetLinks(v DaVinciFlowVersionCollectionResponseLinks) {
	o.Links = v
}

func (o DaVinciFlowVersionCollectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionCollectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_embedded"] = o.Embedded
	toSerialize["_links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionCollectionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_embedded",
		"_links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowVersionCollectionResponse := _DaVinciFlowVersionCollectionResponse{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionCollectionResponse)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionCollectionResponse(varDaVinciFlowVersionCollectionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionCollectionResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionCollectionResponse struct {
	value *DaVinciFlowVersionCollectionResponse
	isSet bool
}

func (v NullableDaVinciFlowVersionCollectionResponse) Get() *DaVinciFlowVersionCollectionResponse {
	return v.value
}

func (v *NullableDaVinciFlowVersionCollectionResponse) Set(val *DaVinciFlowVersionCollectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionCollectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionCollectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionCollectionResponse(val *DaVinciFlowVersionCollectionResponse) *NullableDaVinciFlowVersionCollectionResponse {
	return &NullableDaVinciFlowVersionCollectionResponse{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionCollectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionCollectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
