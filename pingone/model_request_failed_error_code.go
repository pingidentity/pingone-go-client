// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// RequestFailedErrorCode the model 'RequestFailedErrorCode'
type RequestFailedErrorCode string

// List of Request_Failed_Error_Code
const (
	REQUESTFAILEDERRORCODE_REQUEST_FAILED RequestFailedErrorCode = "REQUEST_FAILED"
)

// All allowed values of RequestFailedErrorCode enum
var AllowedRequestFailedErrorCodeEnumValues = []RequestFailedErrorCode{
	"REQUEST_FAILED",
}

func (v *RequestFailedErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestFailedErrorCode(value)
	for _, existing := range AllowedRequestFailedErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = RequestFailedErrorCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewRequestFailedErrorCodeFromValue returns a pointer to a valid RequestFailedErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestFailedErrorCodeFromValue(v string) (*RequestFailedErrorCode, error) {
	ev := RequestFailedErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestFailedErrorCode: valid values are %v", v, AllowedRequestFailedErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestFailedErrorCode) IsValid() bool {
	for _, existing := range AllowedRequestFailedErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Request_Failed_Error_Code value
func (v RequestFailedErrorCode) Ptr() *RequestFailedErrorCode {
	return &v
}

type NullableRequestFailedErrorCode struct {
	value *RequestFailedErrorCode
	isSet bool
}

func (v NullableRequestFailedErrorCode) Get() *RequestFailedErrorCode {
	return v.value
}

func (v *NullableRequestFailedErrorCode) Set(val *RequestFailedErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestFailedErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestFailedErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestFailedErrorCode(val *RequestFailedErrorCode) *NullableRequestFailedErrorCode {
	return &NullableRequestFailedErrorCode{value: val, isSet: true}
}

func (v NullableRequestFailedErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestFailedErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
