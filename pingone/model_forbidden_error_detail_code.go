// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// ForbiddenErrorDetailCode the model 'ForbiddenErrorDetailCode'
type ForbiddenErrorDetailCode string

// List of Forbidden_Error_Detail_Code
const (
	FORBIDDENERRORDETAILCODE_INSUFFICIENT_PERMISSIONS ForbiddenErrorDetailCode = "INSUFFICIENT_PERMISSIONS"
	FORBIDDENERRORDETAILCODE_LICENSE_EXCEEDED         ForbiddenErrorDetailCode = "LICENSE_EXCEEDED"
)

// All allowed values of ForbiddenErrorDetailCode enum
var AllowedForbiddenErrorDetailCodeEnumValues = []ForbiddenErrorDetailCode{
	"INSUFFICIENT_PERMISSIONS",
	"LICENSE_EXCEEDED",
}

func (v *ForbiddenErrorDetailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ForbiddenErrorDetailCode(value)
	for _, existing := range AllowedForbiddenErrorDetailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ForbiddenErrorDetailCode(fmt.Sprintf("%s", value))
	return nil
}

// NewForbiddenErrorDetailCodeFromValue returns a pointer to a valid ForbiddenErrorDetailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewForbiddenErrorDetailCodeFromValue(v string) (*ForbiddenErrorDetailCode, error) {
	ev := ForbiddenErrorDetailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ForbiddenErrorDetailCode: valid values are %v", v, AllowedForbiddenErrorDetailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ForbiddenErrorDetailCode) IsValid() bool {
	for _, existing := range AllowedForbiddenErrorDetailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Forbidden_Error_Detail_Code value
func (v ForbiddenErrorDetailCode) Ptr() *ForbiddenErrorDetailCode {
	return &v
}

type NullableForbiddenErrorDetailCode struct {
	value *ForbiddenErrorDetailCode
	isSet bool
}

func (v NullableForbiddenErrorDetailCode) Get() *ForbiddenErrorDetailCode {
	return v.value
}

func (v *NullableForbiddenErrorDetailCode) Set(val *ForbiddenErrorDetailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenErrorDetailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenErrorDetailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenErrorDetailCode(val *ForbiddenErrorDetailCode) *NullableForbiddenErrorDetailCode {
	return &NullableForbiddenErrorDetailCode{value: val, isSet: true}
}

func (v NullableForbiddenErrorDetailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenErrorDetailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
