// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowVersionDetailResponseLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionDetailResponseLinks{}

// checks if the DaVinciFlowVersionDetailResponseLinks type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionDetailResponseLinks{}

// DaVinciFlowVersionDetailResponseLinks struct for DaVinciFlowVersionDetailResponseLinks
type DaVinciFlowVersionDetailResponseLinks struct {
	Environment              JSONHALLink  `json:"environment"`
	Self                     JSONHALLink  `json:"self"`
	FlowExport               JSONHALLink  `json:"flow.export"`
	FlowRevert               JSONHALLink  `json:"flow.revert"`
	ConnectorInstancesNodeId *JSONHALLink `json:"connectorInstances.<nodeId>,omitempty"`
	VariablesNodeIdIndex     *JSONHALLink `json:"variables.<nodeId>.<index>,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _DaVinciFlowVersionDetailResponseLinks DaVinciFlowVersionDetailResponseLinks

// NewDaVinciFlowVersionDetailResponseLinks instantiates a new DaVinciFlowVersionDetailResponseLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionDetailResponseLinks(environment JSONHALLink, self JSONHALLink, flowExport JSONHALLink, flowRevert JSONHALLink) *DaVinciFlowVersionDetailResponseLinks {
	this := DaVinciFlowVersionDetailResponseLinks{}
	this.Environment = environment
	this.Self = self
	this.FlowExport = flowExport
	this.FlowRevert = flowRevert
	return &this
}

// NewDaVinciFlowVersionDetailResponseLinksWithDefaults instantiates a new DaVinciFlowVersionDetailResponseLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionDetailResponseLinksWithDefaults() *DaVinciFlowVersionDetailResponseLinks {
	this := DaVinciFlowVersionDetailResponseLinks{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *DaVinciFlowVersionDetailResponseLinks) GetEnvironment() JSONHALLink {
	if o == nil {
		var ret JSONHALLink
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) GetEnvironmentOk() (*JSONHALLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciFlowVersionDetailResponseLinks) SetEnvironment(v JSONHALLink) {
	o.Environment = v
}

// GetSelf returns the Self field value
func (o *DaVinciFlowVersionDetailResponseLinks) GetSelf() JSONHALLink {
	if o == nil {
		var ret JSONHALLink
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) GetSelfOk() (*JSONHALLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *DaVinciFlowVersionDetailResponseLinks) SetSelf(v JSONHALLink) {
	o.Self = v
}

// GetFlowExport returns the FlowExport field value
func (o *DaVinciFlowVersionDetailResponseLinks) GetFlowExport() JSONHALLink {
	if o == nil {
		var ret JSONHALLink
		return ret
	}

	return o.FlowExport
}

// GetFlowExportOk returns a tuple with the FlowExport field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) GetFlowExportOk() (*JSONHALLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowExport, true
}

// SetFlowExport sets field value
func (o *DaVinciFlowVersionDetailResponseLinks) SetFlowExport(v JSONHALLink) {
	o.FlowExport = v
}

// GetFlowRevert returns the FlowRevert field value
func (o *DaVinciFlowVersionDetailResponseLinks) GetFlowRevert() JSONHALLink {
	if o == nil {
		var ret JSONHALLink
		return ret
	}

	return o.FlowRevert
}

// GetFlowRevertOk returns a tuple with the FlowRevert field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) GetFlowRevertOk() (*JSONHALLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowRevert, true
}

// SetFlowRevert sets field value
func (o *DaVinciFlowVersionDetailResponseLinks) SetFlowRevert(v JSONHALLink) {
	o.FlowRevert = v
}

// GetConnectorInstancesNodeId returns the ConnectorInstancesNodeId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseLinks) GetConnectorInstancesNodeId() JSONHALLink {
	if o == nil || IsNil(o.ConnectorInstancesNodeId) {
		var ret JSONHALLink
		return ret
	}
	return *o.ConnectorInstancesNodeId
}

// GetConnectorInstancesNodeIdOk returns a tuple with the ConnectorInstancesNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) GetConnectorInstancesNodeIdOk() (*JSONHALLink, bool) {
	if o == nil || IsNil(o.ConnectorInstancesNodeId) {
		return nil, false
	}
	return o.ConnectorInstancesNodeId, true
}

// HasConnectorInstancesNodeId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) HasConnectorInstancesNodeId() bool {
	if o != nil && !IsNil(o.ConnectorInstancesNodeId) {
		return true
	}

	return false
}

// SetConnectorInstancesNodeId gets a reference to the given JSONHALLink and assigns it to the ConnectorInstancesNodeId field.
func (o *DaVinciFlowVersionDetailResponseLinks) SetConnectorInstancesNodeId(v JSONHALLink) {
	o.ConnectorInstancesNodeId = &v
}

// GetVariablesNodeIdIndex returns the VariablesNodeIdIndex field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseLinks) GetVariablesNodeIdIndex() JSONHALLink {
	if o == nil || IsNil(o.VariablesNodeIdIndex) {
		var ret JSONHALLink
		return ret
	}
	return *o.VariablesNodeIdIndex
}

// GetVariablesNodeIdIndexOk returns a tuple with the VariablesNodeIdIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) GetVariablesNodeIdIndexOk() (*JSONHALLink, bool) {
	if o == nil || IsNil(o.VariablesNodeIdIndex) {
		return nil, false
	}
	return o.VariablesNodeIdIndex, true
}

// HasVariablesNodeIdIndex returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseLinks) HasVariablesNodeIdIndex() bool {
	if o != nil && !IsNil(o.VariablesNodeIdIndex) {
		return true
	}

	return false
}

// SetVariablesNodeIdIndex gets a reference to the given JSONHALLink and assigns it to the VariablesNodeIdIndex field.
func (o *DaVinciFlowVersionDetailResponseLinks) SetVariablesNodeIdIndex(v JSONHALLink) {
	o.VariablesNodeIdIndex = &v
}

func (o DaVinciFlowVersionDetailResponseLinks) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionDetailResponseLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment"] = o.Environment
	toSerialize["self"] = o.Self
	toSerialize["flow.export"] = o.FlowExport
	toSerialize["flow.revert"] = o.FlowRevert
	if !IsNil(o.ConnectorInstancesNodeId) {
		toSerialize["connectorInstances.<nodeId>"] = o.ConnectorInstancesNodeId
	}
	if !IsNil(o.VariablesNodeIdIndex) {
		toSerialize["variables.<nodeId>.<index>"] = o.VariablesNodeIdIndex
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionDetailResponseLinks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
		"self",
		"flow.export",
		"flow.revert",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowVersionDetailResponseLinks := _DaVinciFlowVersionDetailResponseLinks{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionDetailResponseLinks)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionDetailResponseLinks(varDaVinciFlowVersionDetailResponseLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "self")
		delete(additionalProperties, "flow.export")
		delete(additionalProperties, "flow.revert")
		delete(additionalProperties, "connectorInstances.<nodeId>")
		delete(additionalProperties, "variables.<nodeId>.<index>")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionDetailResponseLinks) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("self", o.Self))
	logAttrs = append(logAttrs, slog.Any("flow.export", o.FlowExport))
	logAttrs = append(logAttrs, slog.Any("flow.revert", o.FlowRevert))
	if !IsNil(o.ConnectorInstancesNodeId) {
		logAttrs = append(logAttrs, slog.Any("connectorInstances.&lt;nodeId&gt;", *o.ConnectorInstancesNodeId))
	}
	if !IsNil(o.VariablesNodeIdIndex) {
		logAttrs = append(logAttrs, slog.Any("variables.&lt;nodeId&gt;.&lt;index&gt;", *o.VariablesNodeIdIndex))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionDetailResponseLinks struct {
	value *DaVinciFlowVersionDetailResponseLinks
	isSet bool
}

func (v NullableDaVinciFlowVersionDetailResponseLinks) Get() *DaVinciFlowVersionDetailResponseLinks {
	return v.value
}

func (v *NullableDaVinciFlowVersionDetailResponseLinks) Set(val *DaVinciFlowVersionDetailResponseLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionDetailResponseLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionDetailResponseLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionDetailResponseLinks(val *DaVinciFlowVersionDetailResponseLinks) *NullableDaVinciFlowVersionDetailResponseLinks {
	return &NullableDaVinciFlowVersionDetailResponseLinks{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionDetailResponseLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionDetailResponseLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
