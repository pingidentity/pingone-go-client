// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentCreateRequestRegion the model 'EnvironmentCreateRequestRegion'
type EnvironmentCreateRequestRegion string

// List of Environment_Create_Request_Region
const (
	ENVIRONMENTCREATEREQUESTREGION_AP EnvironmentCreateRequestRegion = "AP"
	ENVIRONMENTCREATEREQUESTREGION_AU EnvironmentCreateRequestRegion = "AU"
	ENVIRONMENTCREATEREQUESTREGION_CA EnvironmentCreateRequestRegion = "CA"
	ENVIRONMENTCREATEREQUESTREGION_EU EnvironmentCreateRequestRegion = "EU"
	ENVIRONMENTCREATEREQUESTREGION_NA EnvironmentCreateRequestRegion = "NA"
	ENVIRONMENTCREATEREQUESTREGION_SG EnvironmentCreateRequestRegion = "SG"
)

// All allowed values of EnvironmentCreateRequestRegion enum
var AllowedEnvironmentCreateRequestRegionEnumValues = []EnvironmentCreateRequestRegion{
	"AP",
	"AU",
	"CA",
	"EU",
	"NA",
	"SG",
}

func (v *EnvironmentCreateRequestRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentCreateRequestRegion(value)
	for _, existing := range AllowedEnvironmentCreateRequestRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentCreateRequestRegion(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentCreateRequestRegionFromValue returns a pointer to a valid EnvironmentCreateRequestRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentCreateRequestRegionFromValue(v string) (*EnvironmentCreateRequestRegion, error) {
	ev := EnvironmentCreateRequestRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentCreateRequestRegion: valid values are %v", v, AllowedEnvironmentCreateRequestRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentCreateRequestRegion) IsValid() bool {
	for _, existing := range AllowedEnvironmentCreateRequestRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Create_Request_Region value
func (v EnvironmentCreateRequestRegion) Ptr() *EnvironmentCreateRequestRegion {
	return &v
}

type NullableEnvironmentCreateRequestRegion struct {
	value *EnvironmentCreateRequestRegion
	isSet bool
}

func (v NullableEnvironmentCreateRequestRegion) Get() *EnvironmentCreateRequestRegion {
	return v.value
}

func (v *NullableEnvironmentCreateRequestRegion) Set(val *EnvironmentCreateRequestRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentCreateRequestRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentCreateRequestRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentCreateRequestRegion(val *EnvironmentCreateRequestRegion) *NullableEnvironmentCreateRequestRegion {
	return &NullableEnvironmentCreateRequestRegion{value: val, isSet: true}
}

func (v NullableEnvironmentCreateRequestRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentCreateRequestRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
