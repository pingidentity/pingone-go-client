// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciConnectorInstanceCollectionResponseEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorInstanceCollectionResponseEmbedded{}

// checks if the DaVinciConnectorInstanceCollectionResponseEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorInstanceCollectionResponseEmbedded{}

// DaVinciConnectorInstanceCollectionResponseEmbedded struct for DaVinciConnectorInstanceCollectionResponseEmbedded
type DaVinciConnectorInstanceCollectionResponseEmbedded struct {
	ConnectorInstances   []DaVinciConnectorInstanceResponse `json:"connectorInstances"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorInstanceCollectionResponseEmbedded DaVinciConnectorInstanceCollectionResponseEmbedded

// NewDaVinciConnectorInstanceCollectionResponseEmbedded instantiates a new DaVinciConnectorInstanceCollectionResponseEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorInstanceCollectionResponseEmbedded(connectorInstances []DaVinciConnectorInstanceResponse) *DaVinciConnectorInstanceCollectionResponseEmbedded {
	this := DaVinciConnectorInstanceCollectionResponseEmbedded{}
	this.ConnectorInstances = connectorInstances
	return &this
}

// NewDaVinciConnectorInstanceCollectionResponseEmbeddedWithDefaults instantiates a new DaVinciConnectorInstanceCollectionResponseEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorInstanceCollectionResponseEmbeddedWithDefaults() *DaVinciConnectorInstanceCollectionResponseEmbedded {
	this := DaVinciConnectorInstanceCollectionResponseEmbedded{}
	return &this
}

// GetConnectorInstances returns the ConnectorInstances field value
func (o *DaVinciConnectorInstanceCollectionResponseEmbedded) GetConnectorInstances() []DaVinciConnectorInstanceResponse {
	if o == nil {
		var ret []DaVinciConnectorInstanceResponse
		return ret
	}

	return o.ConnectorInstances
}

// GetConnectorInstancesOk returns a tuple with the ConnectorInstances field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceCollectionResponseEmbedded) GetConnectorInstancesOk() ([]DaVinciConnectorInstanceResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorInstances, true
}

// SetConnectorInstances sets field value
func (o *DaVinciConnectorInstanceCollectionResponseEmbedded) SetConnectorInstances(v []DaVinciConnectorInstanceResponse) {
	o.ConnectorInstances = v
}

func (o DaVinciConnectorInstanceCollectionResponseEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorInstanceCollectionResponseEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorInstances"] = o.ConnectorInstances

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorInstanceCollectionResponseEmbedded) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorInstances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorInstanceCollectionResponseEmbedded := _DaVinciConnectorInstanceCollectionResponseEmbedded{}

	err = json.Unmarshal(data, &varDaVinciConnectorInstanceCollectionResponseEmbedded)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorInstanceCollectionResponseEmbedded(varDaVinciConnectorInstanceCollectionResponseEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectorInstances")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorInstanceCollectionResponseEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("connectorInstances", o.ConnectorInstances))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorInstanceCollectionResponseEmbedded struct {
	value *DaVinciConnectorInstanceCollectionResponseEmbedded
	isSet bool
}

func (v NullableDaVinciConnectorInstanceCollectionResponseEmbedded) Get() *DaVinciConnectorInstanceCollectionResponseEmbedded {
	return v.value
}

func (v *NullableDaVinciConnectorInstanceCollectionResponseEmbedded) Set(val *DaVinciConnectorInstanceCollectionResponseEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorInstanceCollectionResponseEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorInstanceCollectionResponseEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorInstanceCollectionResponseEmbedded(val *DaVinciConnectorInstanceCollectionResponseEmbedded) *NullableDaVinciConnectorInstanceCollectionResponseEmbedded {
	return &NullableDaVinciConnectorInstanceCollectionResponseEmbedded{value: val, isSet: true}
}

func (v NullableDaVinciConnectorInstanceCollectionResponseEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorInstanceCollectionResponseEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
