// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the PingOneApplicationDaVinciFlowPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingOneApplicationDaVinciFlowPolicy{}

// checks if the PingOneApplicationDaVinciFlowPolicy type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &PingOneApplicationDaVinciFlowPolicy{}

// PingOneApplicationDaVinciFlowPolicy struct for PingOneApplicationDaVinciFlowPolicy
type PingOneApplicationDaVinciFlowPolicy struct {
	Id                   string                                             `json:"id"`
	Embedded             map[string]map[string]interface{}                  `json:"_embedded,omitempty"`
	Links                *PingOneApplicationDaVinciFlowPolicyLinks          `json:"_links,omitempty"`
	Application          *PingOneApplicationFlowPolicyAssignmentApplication `json:"application,omitempty"`
	Enabled              *bool                                              `json:"enabled,omitempty"`
	Environment          *ResourceRelationshipReadOnly                      `json:"environment,omitempty"`
	Name                 *string                                            `json:"name,omitempty"`
	Trigger              *DaVinciFlowPolicyTrigger                          `json:"trigger,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PingOneApplicationDaVinciFlowPolicy PingOneApplicationDaVinciFlowPolicy

// NewPingOneApplicationDaVinciFlowPolicy instantiates a new PingOneApplicationDaVinciFlowPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOneApplicationDaVinciFlowPolicy(id string) *PingOneApplicationDaVinciFlowPolicy {
	this := PingOneApplicationDaVinciFlowPolicy{}
	this.Id = id
	return &this
}

// NewPingOneApplicationDaVinciFlowPolicyWithDefaults instantiates a new PingOneApplicationDaVinciFlowPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOneApplicationDaVinciFlowPolicyWithDefaults() *PingOneApplicationDaVinciFlowPolicy {
	this := PingOneApplicationDaVinciFlowPolicy{}
	return &this
}

// GetId returns the Id field value
func (o *PingOneApplicationDaVinciFlowPolicy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PingOneApplicationDaVinciFlowPolicy) SetId(v string) {
	o.Id = v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetEmbedded() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Embedded) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetEmbeddedOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Embedded) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given map[string]map[string]interface{} and assigns it to the Embedded field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetEmbedded(v map[string]map[string]interface{}) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetLinks() PingOneApplicationDaVinciFlowPolicyLinks {
	if o == nil || IsNil(o.Links) {
		var ret PingOneApplicationDaVinciFlowPolicyLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetLinksOk() (*PingOneApplicationDaVinciFlowPolicyLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PingOneApplicationDaVinciFlowPolicyLinks and assigns it to the Links field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetLinks(v PingOneApplicationDaVinciFlowPolicyLinks) {
	o.Links = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetApplication() PingOneApplicationFlowPolicyAssignmentApplication {
	if o == nil || IsNil(o.Application) {
		var ret PingOneApplicationFlowPolicyAssignmentApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetApplicationOk() (*PingOneApplicationFlowPolicyAssignmentApplication, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given PingOneApplicationFlowPolicyAssignmentApplication and assigns it to the Application field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetApplication(v PingOneApplicationFlowPolicyAssignmentApplication) {
	o.Application = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil || IsNil(o.Environment) {
		var ret ResourceRelationshipReadOnly
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ResourceRelationshipReadOnly and assigns it to the Environment field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetName(v string) {
	o.Name = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *PingOneApplicationDaVinciFlowPolicy) GetTrigger() DaVinciFlowPolicyTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret DaVinciFlowPolicyTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) GetTriggerOk() (*DaVinciFlowPolicyTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *PingOneApplicationDaVinciFlowPolicy) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given DaVinciFlowPolicyTrigger and assigns it to the Trigger field.
func (o *PingOneApplicationDaVinciFlowPolicy) SetTrigger(v DaVinciFlowPolicyTrigger) {
	o.Trigger = &v
}

func (o PingOneApplicationDaVinciFlowPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingOneApplicationDaVinciFlowPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PingOneApplicationDaVinciFlowPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPingOneApplicationDaVinciFlowPolicy := _PingOneApplicationDaVinciFlowPolicy{}

	err = json.Unmarshal(data, &varPingOneApplicationDaVinciFlowPolicy)

	if err != nil {
		return err
	}

	*o = PingOneApplicationDaVinciFlowPolicy(varPingOneApplicationDaVinciFlowPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "application")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "name")
		delete(additionalProperties, "trigger")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o PingOneApplicationDaVinciFlowPolicy) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	if !IsNil(o.Embedded) {
		logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	}
	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.Application) {
		logAttrs = append(logAttrs, slog.Any("application", *o.Application))
	}
	if !IsNil(o.Enabled) {
		logAttrs = append(logAttrs, slog.Any("enabled", *o.Enabled))
	}
	if !IsNil(o.Environment) {
		logAttrs = append(logAttrs, slog.Any("environment", *o.Environment))
	}
	if !IsNil(o.Name) {
		logAttrs = append(logAttrs, slog.Any("name", *o.Name))
	}
	if !IsNil(o.Trigger) {
		logAttrs = append(logAttrs, slog.Any("trigger", *o.Trigger))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullablePingOneApplicationDaVinciFlowPolicy struct {
	value *PingOneApplicationDaVinciFlowPolicy
	isSet bool
}

func (v NullablePingOneApplicationDaVinciFlowPolicy) Get() *PingOneApplicationDaVinciFlowPolicy {
	return v.value
}

func (v *NullablePingOneApplicationDaVinciFlowPolicy) Set(val *PingOneApplicationDaVinciFlowPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneApplicationDaVinciFlowPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneApplicationDaVinciFlowPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneApplicationDaVinciFlowPolicy(val *PingOneApplicationDaVinciFlowPolicy) *NullablePingOneApplicationDaVinciFlowPolicy {
	return &NullablePingOneApplicationDaVinciFlowPolicy{value: val, isSet: true}
}

func (v NullablePingOneApplicationDaVinciFlowPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneApplicationDaVinciFlowPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
