/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"

	"github.com/google/uuid"
)

// checks if the ResourceRelationshipPingOne type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRelationshipPingOne{}

// ResourceRelationshipPingOne struct for ResourceRelationshipPingOne
type ResourceRelationshipPingOne struct {
	Id                   uuid.UUID `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _ResourceRelationshipPingOne ResourceRelationshipPingOne

// NewResourceRelationshipPingOne instantiates a new ResourceRelationshipPingOne object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRelationshipPingOne(id uuid.UUID) *ResourceRelationshipPingOne {
	this := ResourceRelationshipPingOne{}
	this.Id = id
	return &this
}

// NewResourceRelationshipPingOneWithDefaults instantiates a new ResourceRelationshipPingOne object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRelationshipPingOneWithDefaults() *ResourceRelationshipPingOne {
	this := ResourceRelationshipPingOne{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceRelationshipPingOne) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceRelationshipPingOne) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceRelationshipPingOne) SetId(v uuid.UUID) {
	o.Id = v
}

func (o ResourceRelationshipPingOne) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRelationshipPingOne) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceRelationshipPingOne) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceRelationshipPingOne := _ResourceRelationshipPingOne{}

	err = json.Unmarshal(data, &varResourceRelationshipPingOne)

	if err != nil {
		return err
	}

	*o = ResourceRelationshipPingOne(varResourceRelationshipPingOne)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o ResourceRelationshipPingOne) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableResourceRelationshipPingOne struct {
	value *ResourceRelationshipPingOne
	isSet bool
}

func (v NullableResourceRelationshipPingOne) Get() *ResourceRelationshipPingOne {
	return v.value
}

func (v *NullableResourceRelationshipPingOne) Set(val *ResourceRelationshipPingOne) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRelationshipPingOne) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRelationshipPingOne) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRelationshipPingOne(val *ResourceRelationshipPingOne) *NullableResourceRelationshipPingOne {
	return &NullableResourceRelationshipPingOne{value: val, isSet: true}
}

func (v NullableResourceRelationshipPingOne) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRelationshipPingOne) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
