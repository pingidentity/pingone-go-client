/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentReplaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentReplaceRequest{}

// EnvironmentReplaceRequest struct for EnvironmentReplaceRequest
type EnvironmentReplaceRequest struct {
	BillOfMaterials      *BillOfMaterials            `json:"billOfMaterials,omitempty"`
	Description          *string                     `json:"description,omitempty"`
	Icon                 *string                     `json:"icon,omitempty"`
	License              ResourceRelationshipPingOne `json:"license"`
	Name                 string                      `json:"name"`
	Type                 EnvironmentType             `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentReplaceRequest EnvironmentReplaceRequest

// NewEnvironmentReplaceRequest instantiates a new EnvironmentReplaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentReplaceRequest(license ResourceRelationshipPingOne, name string, type_ EnvironmentType) *EnvironmentReplaceRequest {
	this := EnvironmentReplaceRequest{}
	this.License = license
	this.Name = name
	this.Type = type_
	return &this
}

// NewEnvironmentReplaceRequestWithDefaults instantiates a new EnvironmentReplaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentReplaceRequestWithDefaults() *EnvironmentReplaceRequest {
	this := EnvironmentReplaceRequest{}
	return &this
}

// GetBillOfMaterials returns the BillOfMaterials field value if set, zero value otherwise.
func (o *EnvironmentReplaceRequest) GetBillOfMaterials() BillOfMaterials {
	if o == nil || IsNil(o.BillOfMaterials) {
		var ret BillOfMaterials
		return ret
	}
	return *o.BillOfMaterials
}

// GetBillOfMaterialsOk returns a tuple with the BillOfMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentReplaceRequest) GetBillOfMaterialsOk() (*BillOfMaterials, bool) {
	if o == nil || IsNil(o.BillOfMaterials) {
		return nil, false
	}
	return o.BillOfMaterials, true
}

// HasBillOfMaterials returns a boolean if a field has been set.
func (o *EnvironmentReplaceRequest) HasBillOfMaterials() bool {
	if o != nil && !IsNil(o.BillOfMaterials) {
		return true
	}

	return false
}

// SetBillOfMaterials gets a reference to the given BillOfMaterials and assigns it to the BillOfMaterials field.
func (o *EnvironmentReplaceRequest) SetBillOfMaterials(v BillOfMaterials) {
	o.BillOfMaterials = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentReplaceRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentReplaceRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentReplaceRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentReplaceRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EnvironmentReplaceRequest) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentReplaceRequest) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EnvironmentReplaceRequest) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EnvironmentReplaceRequest) SetIcon(v string) {
	o.Icon = &v
}

// GetLicense returns the License field value
func (o *EnvironmentReplaceRequest) GetLicense() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *EnvironmentReplaceRequest) GetLicenseOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *EnvironmentReplaceRequest) SetLicense(v ResourceRelationshipPingOne) {
	o.License = v
}

// GetName returns the Name field value
func (o *EnvironmentReplaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentReplaceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentReplaceRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *EnvironmentReplaceRequest) GetType() EnvironmentType {
	if o == nil {
		var ret EnvironmentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnvironmentReplaceRequest) GetTypeOk() (*EnvironmentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnvironmentReplaceRequest) SetType(v EnvironmentType) {
	o.Type = v
}

func (o EnvironmentReplaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentReplaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillOfMaterials) {
		toSerialize["billOfMaterials"] = o.BillOfMaterials
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["license"] = o.License
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentReplaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentReplaceRequest := _EnvironmentReplaceRequest{}

	err = json.Unmarshal(data, &varEnvironmentReplaceRequest)

	if err != nil {
		return err
	}

	*o = EnvironmentReplaceRequest(varEnvironmentReplaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billOfMaterials")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "license")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentReplaceRequest struct {
	value *EnvironmentReplaceRequest
	isSet bool
}

func (v NullableEnvironmentReplaceRequest) Get() *EnvironmentReplaceRequest {
	return v.value
}

func (v *NullableEnvironmentReplaceRequest) Set(val *EnvironmentReplaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentReplaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentReplaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentReplaceRequest(val *EnvironmentReplaceRequest) *NullableEnvironmentReplaceRequest {
	return &NullableEnvironmentReplaceRequest{value: val, isSet: true}
}

func (v NullableEnvironmentReplaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentReplaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
