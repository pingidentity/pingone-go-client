// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"crypto/rand"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"iter"
	"log/slog"
	"math"
	"math/big"
	"mime/multipart"
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"slices"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"golang.org/x/oauth2"
)

var (
	JsonCheck       = regexp.MustCompile(`(?i:(?:application|text)/(?:[^;]+\+)?json)`)
	XmlCheck        = regexp.MustCompile(`(?i:(?:application|text)/(?:[^;]+\+)?xml)`)
	queryParamSplit = regexp.MustCompile(`(^|&)([^&]+)`)
	queryDescape    = strings.NewReplacer("%5B", "[", "%5D", "]")
)

// APIClient manages communication with the PingOne Platform User and Configuration Management API - Go SDK API v2025.08.04-development
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	common service // Reuse a single struct instead of allocating one for each service on the heap.

	// API Services

	DaVinciApplicationApi *DaVinciApplicationApiService

	DaVinciConnectorApi *DaVinciConnectorApiService

	DaVinciVariableApi *DaVinciVariableApiService

	EnvironmentApi *EnvironmentApiService

	// Static APIs
	// LinkApi *LinkApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) (*APIClient, error) {
	if cfg.HTTPClient == nil {
		if v := cfg.ProxyURL; v != nil && *v != "" {
			// Parse the proxy URL
			proxyURLParsed, err := url.Parse(*v)
			if err != nil {
				return nil, err
			}

			// Create a new Transport object with the proxy settings
			transport := &retryableTransport{
				transport: &http.Transport{
					Proxy: http.ProxyURL(proxyURLParsed),
				},
			}

			// Create a new HTTP client using the custom Transport
			cfg.HTTPClient = &http.Client{
				Transport: transport,
			}
		} else {
			cfg.HTTPClient = &http.Client{
				Transport: &retryableTransport{
					transport: &http.Transport{},
				},
			}
		}
	}

	if s := cfg.Service; s != nil {
		apiDomain, err := s.APIDomain()
		if err != nil {
			return nil, err
		}

		cfg.Host = apiDomain

		// Set the token client
		ctx := context.Background()
		httpClient, err := s.Client(ctx, cfg.HTTPClient)
		if err != nil {
			return nil, err
		}

		if httpClient != nil {
			cfg.HTTPClient = httpClient
		}
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.DaVinciApplicationApi = (*DaVinciApplicationApiService)(&c.common)
	c.DaVinciConnectorApi = (*DaVinciConnectorApiService)(&c.common)
	c.DaVinciVariableApi = (*DaVinciVariableApiService)(&c.common)
	c.EnvironmentApi = (*EnvironmentApiService)(&c.common)

	// Static APIs
	// c.LinkApi = (*LinkApiService)(&c.common)

	return c, nil
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}

// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insensitive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.EqualFold(a, needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("expected %s to be of type %s but received %s", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

func parameterValueToString(obj interface{}, key string) string {
	if reflect.TypeOf(obj).Kind() != reflect.Ptr {
		if actualObj, ok := obj.(interface{ GetActualInstanceValue() interface{} }); ok {
			return fmt.Sprintf("%v", actualObj.GetActualInstanceValue())
		}

		return fmt.Sprintf("%v", obj)
	}
	var param, ok = obj.(MappedNullable)
	if !ok {
		return ""
	}
	dataMap, err := param.ToMap()
	if err != nil {
		return ""
	}
	return fmt.Sprintf("%v", dataMap[key])
}

// parameterAddToHeaderOrQuery adds the provided object to the request header or url query
// supporting deep object syntax
func parameterAddToHeaderOrQuery(headerOrQueryParams interface{}, keyPrefix string, obj interface{}, style string, collectionType string) {
	var v = reflect.ValueOf(obj)
	var value = ""
	if v == reflect.ValueOf(nil) {
		value = "null"
	} else {
		switch v.Kind() {
		case reflect.Invalid:
			value = "invalid"

		case reflect.Struct:
			if t, ok := obj.(MappedNullable); ok {
				dataMap, err := t.ToMap()
				if err != nil {
					return
				}
				parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, dataMap, style, collectionType)
				return
			}
			if t, ok := obj.(time.Time); ok {
				parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, t.Format(time.RFC3339Nano), style, collectionType)
				return
			}
			value = v.Type().String() + " value"
		case reflect.Slice:
			var indValue = reflect.ValueOf(obj)
			if indValue == reflect.ValueOf(nil) {
				return
			}
			var lenIndValue = indValue.Len()
			for i := 0; i < lenIndValue; i++ {
				var arrayValue = indValue.Index(i)
				var keyPrefixForCollectionType = keyPrefix
				if style == "deepObject" {
					keyPrefixForCollectionType = keyPrefix + "[" + strconv.Itoa(i) + "]"
				}
				parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefixForCollectionType, arrayValue.Interface(), style, collectionType)
			}
			return

		case reflect.Map:
			var indValue = reflect.ValueOf(obj)
			if indValue == reflect.ValueOf(nil) {
				return
			}
			iter := indValue.MapRange()
			for iter.Next() {
				k, v := iter.Key(), iter.Value()
				parameterAddToHeaderOrQuery(headerOrQueryParams, fmt.Sprintf("%s[%s]", keyPrefix, k.String()), v.Interface(), style, collectionType)
			}
			return

		case reflect.Interface:
			fallthrough
		case reflect.Ptr:
			parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, v.Elem().Interface(), style, collectionType)
			return

		case reflect.Int, reflect.Int8, reflect.Int16,
			reflect.Int32, reflect.Int64:
			value = strconv.FormatInt(v.Int(), 10)
		case reflect.Uint, reflect.Uint8, reflect.Uint16,
			reflect.Uint32, reflect.Uint64, reflect.Uintptr:
			value = strconv.FormatUint(v.Uint(), 10)
		case reflect.Float32, reflect.Float64:
			value = strconv.FormatFloat(v.Float(), 'g', -1, 32)
		case reflect.Bool:
			value = strconv.FormatBool(v.Bool())
		case reflect.String:
			value = v.String()
		default:
			value = v.Type().String() + " value"
		}
	}

	switch valuesMap := headerOrQueryParams.(type) {
	case url.Values:
		if collectionType == "csv" && valuesMap.Get(keyPrefix) != "" {
			valuesMap.Set(keyPrefix, valuesMap.Get(keyPrefix)+","+value)
		} else {
			valuesMap.Add(keyPrefix, value)
		}
		break
	case map[string]string:
		valuesMap[keyPrefix] = value
		break
	}
}

// helper for converting interface{} parameters to json strings
func parameterToJson(obj interface{}) (string, error) {
	jsonBuf, err := json.Marshal(obj)
	if err != nil {
		return "", err
	}
	return string(jsonBuf), err
}

// callAPI do the request.
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	dump, err := httputil.DumpRequestOut(request, true)
	if err != nil {
		return nil, err
	}
	slog.Debug("HTTP Request", slog.String("request", string(dump)))

	resp, err := c.cfg.HTTPClient.Do(request)
	if err != nil {
		return resp, err
	}

	dump, err = httputil.DumpResponse(resp, true)
	if err != nil {
		return resp, err
	}
	slog.Debug("HTTP Response", slog.String("response", string(dump)))

	return resp, err
}

// Allow modification of underlying config for alternate implementations and testing
// Caution: modifying the configuration while live can cause data races and potentially unwanted behavior
func (c *APIClient) GetConfig() *Configuration {
	return c.cfg
}

type formFile struct {
	fileBytes    []byte
	fileName     string
	formFileName string
}

// prepareRequest build the request
func (c *APIClient) prepareRequest(
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	formFiles []formFile) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if strings.HasPrefix(headerParams["Content-Type"], "multipart/form-data") && len(formParams) > 0 || (len(formFiles) > 0) {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		for _, formFile := range formFiles {
			if len(formFile.fileBytes) > 0 && formFile.fileName != "" {
				w.Boundary()
				part, err := w.CreateFormFile(formFile.formFileName, filepath.Base(formFile.fileName))
				if err != nil {
					return nil, err
				}
				_, err = part.Write(formFile.fileBytes)
				if err != nil {
					return nil, err
				}
			}
		}

		// Set the Boundary in the Content-Type
		headerParams["Content-Type"] = w.FormDataContentType()

		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	if strings.HasPrefix(headerParams["Content-Type"], "application/x-www-form-urlencoded") && len(formParams) > 0 {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and x-www-form-urlencoded form at the same time.")
		}
		body = &bytes.Buffer{}
		body.WriteString(formParams.Encode())
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		url.Host = c.cfg.Host
	}

	// Override request scheme, if applicable
	if c.cfg.Scheme != "" {
		url.Scheme = c.cfg.Scheme
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = queryParamSplit.ReplaceAllStringFunc(query.Encode(), func(s string) string {
		pieces := strings.Split(s, "=")
		pieces[0] = queryDescape.Replace(pieces[0])
		return strings.Join(pieces, "=")
	})

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers[h] = []string{v}
		}
		localVarRequest.Header = headers
	}

	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer "+auth)
		}

	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}
	return localVarRequest, nil
}

func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
	if len(b) == 0 {
		return nil
	}
	if s, ok := v.(*string); ok {
		*s = string(b)
		return nil
	}
	if f, ok := v.(*os.File); ok {
		f, err = os.CreateTemp("", "HttpClientFile")
		if err != nil {
			return
		}
		_, err = f.Write(b)
		if err != nil {
			return
		}
		_, err = f.Seek(0, io.SeekStart)
		return
	}
	if f, ok := v.(**os.File); ok {
		*f, err = os.CreateTemp("", "HttpClientFile")
		if err != nil {
			return
		}
		_, err = (*f).Write(b)
		if err != nil {
			return
		}
		_, err = (*f).Seek(0, io.SeekStart)
		return
	}
	if XmlCheck.MatchString(contentType) {
		if err = xml.Unmarshal(b, v); err != nil {
			return err
		}
		return nil
	}
	if JsonCheck.MatchString(contentType) {
		if actualObj, ok := v.(interface{ GetActualInstance() interface{} }); ok { // oneOf, anyOf schemas
			if unmarshalObj, ok := actualObj.(interface{ UnmarshalJSON([]byte) error }); ok { // make sure it has UnmarshalJSON defined
				if err = unmarshalObj.UnmarshalJSON(b); err != nil {
					return err
				}
			} else {
				return errors.New("Unknown type with GetActualInstance but no unmarshalObj.UnmarshalJSON defined")
			}
		} else if err = json.Unmarshal(b, v); err != nil { // simple model
			return err
		}
		return nil
	}
	return errors.New("undefined response type")
}

// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(filepath.Clean(path))
	if err != nil {
		return err
	}
	err = file.Close()
	if err != nil {
		return err
	}

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if fp, ok := body.(*os.File); ok {
		_, err = bodyBuf.ReadFrom(fp)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if s, ok := body.(*string); ok {
		_, err = bodyBuf.WriteString(*s)
	} else if JsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if XmlCheck.MatchString(contentType) {
		var bs []byte
		bs, err = xml.Marshal(body)
		if err == nil {
			bodyBuf.Write(bs)
		}
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()

	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}

// From https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		} else {
			expires = now.Add(lifetime)
		}
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) int {
	return utf8.RuneCountInString(s)
}

// APIError Provides access to the body, error and model on returned errors.
type APIError struct {
	body  []byte
	error string
	model interface{}
}

// Error returns non-empty string if there was an error.
func (e APIError) Error() string {
	return e.error
}

// Body returns the raw bytes of the response
func (e APIError) Body() []byte {
	return e.body
}

// Model returns the unpacked model of the error
func (e APIError) Model() interface{} {
	return e.model
}

// format error message using title and detail when model implements rfc7807
func formatErrorMessage(status string, v interface{}) string {
	str := ""
	metaValue := reflect.ValueOf(v).Elem()

	if metaValue.Kind() == reflect.Struct {
		field := metaValue.FieldByName("Title")
		if field != (reflect.Value{}) {
			str = fmt.Sprintf("%s", field.Interface())
		}

		field = metaValue.FieldByName("Detail")
		if field != (reflect.Value{}) {
			str = fmt.Sprintf("%s (%s)", str, field.Interface())
		}
	}

	return strings.TrimSpace(fmt.Sprintf("%s %s", status, str))
}

type oneOfErrorIntf interface {
	GetActualInstanceValue() interface{}
}

func getErrorObject(v interface{}) error {
	if v == nil {
		return nil
	}

	if reflect.TypeOf(v).Kind() == reflect.Ptr {
		v = reflect.ValueOf(v).Elem().Interface()
	}

	if actualObj, ok := v.(oneOfErrorIntf); ok {
		// we have a oneOf schema
		if err := actualObj.GetActualInstanceValue(); err != nil {
			v = err
		}
	}

	if err, ok := v.(error); ok && err != nil {
		return err
	}

	return errors.New(fmt.Sprintf("Unknown error type %T", v))
}

func logDeprecationHeaders(httpHeaders http.Header, localVarPath, localVarHTTPMethod string) {
	if httpHeaders == nil {
		return
	}

	for key, values := range httpHeaders {
		if strings.Contains(strings.ToLower(key), "api-deprecation-date") {
			for _, value := range values {
				slog.Warn("API deprecation warning", "header", key, "value", value, "request path", localVarPath, "request method", localVarHTTPMethod)
			}
		}
		if strings.Contains(strings.ToLower(key), "api-deprecation-message") {
			for _, value := range values {
				slog.Warn("API deprecation warning", "header", key, "value", value, "request path", localVarPath, "request method", localVarHTTPMethod)
			}
		}
	}
}

// Paging
type PagedCursor[T MappedNullable] struct {
	Data         *T
	HTTPResponse *http.Response
}

type PagedIterator[T MappedNullable] iter.Seq2[PagedCursor[T], error]

func paginationIterator[T MappedNullable](initialPageAPIFunc func() (*T, *http.Response, error), pageByLinkAPIFunc func(link JSONHALLink) (*T, *http.Response, error)) PagedIterator[T] {
	var err error
	return func(yield func(PagedCursor[T], error) bool) {

		initialCursor := PagedCursor[T]{}
		initialCursor.Data, initialCursor.HTTPResponse, err = initialPageAPIFunc()

		if !yield(initialCursor, err) {
			return
		}

		paginationNextLink, err := parsePagination(*initialCursor.Data)
		if err != nil {
			if !yield(initialCursor, err) {
				return
			}
		}

		for paginationNextLink != nil {
			loopCursor := PagedCursor[T]{}

			var halResponse interface{}
			halResponse, loopCursor.HTTPResponse, err = pageByLinkAPIFunc(*paginationNextLink)
			if err != nil {
				if !yield(loopCursor, err) {
					return
				}
				break
			}

			bytes, err := json.Marshal(halResponse)
			if err != nil {
				if !yield(loopCursor, err) {
					return
				}
				break
			}

			err = json.Unmarshal(bytes, &loopCursor.Data)
			if err != nil {
				if !yield(loopCursor, err) {
					return
				}
				break
			}

			if loopCursor.Data == nil {
				if !yield(loopCursor, fmt.Errorf("paged results unexpectedly nil")) {
					return
				}
				break
			}

			paginationNextLink, err = parsePagination(*loopCursor.Data)
			if err != nil {
				if !yield(loopCursor, err) {
					return
				}
			}

			if !yield(loopCursor, nil) {
				return
			}
		}
	}
}

func parsePagination[T MappedNullable](response T) (*JSONHALLink, error) {
	responseMap, err := response.ToMap()
	if err != nil {
		return nil, err
	}

	// Check if the response has a "_links" field
	if links, ok := responseMap["_links"]; ok {
		if linksObj, ok := links.(MappedNullable); ok {
			linksMap, err := linksObj.ToMap()
			if err != nil {
				return nil, err
			}

			if nextLink, ok := linksMap["next"]; ok {
				switch v := nextLink.(type) {
				case JSONHALLink:
					slog.Debug("Type JSONHALLink")
					return &v, nil
				case *JSONHALLink:
					slog.Debug("Type *JSONHALLink")
					return v, nil
				default:
					slog.Error("Unknown type for next link", "type", reflect.TypeOf(v))
					return nil, fmt.Errorf("unknown links type")
				}
			} else {
				// Next not found, at the end of the pages (or no pages)
				return nil, nil
			}
		}
	}

	return nil, fmt.Errorf("links object not found in response, but expected for pagination")
}

// Retrying requests
type retryableTransport struct {
	transport http.RoundTripper
}

func (t *retryableTransport) RoundTrip(req *http.Request) (*http.Response, error) {

	var bodyBytes []byte
	var isRetryable bool
	backOffTime := time.Second
	var resp *http.Response
	var err error

	if req.Body != nil {
		bodyBytes, _ = io.ReadAll(req.Body)
	}

	for i := range maxRetries {
		if req.Body != nil {
			req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
		}
		resp, err := t.transport.RoundTrip(req)
		retryAttempt := i + 1

		backOffTime, isRetryable = testForRetryable(resp, err, retryAttempt)

		if !isRetryable {
			break
		}

		if resp.Body != nil {
			_, _ = io.Copy(io.Discard, resp.Body)
			_ = resp.Body.Close()
		}

		slog.Info("Attempt failed, backing off by calculated duration.", "retry attempt", retryAttempt, "error", err, "backoff duration", backOffTime.String())
		time.Sleep(backOffTime)
	}

	return resp, err
}

var (
	maxRetries                       = 10
	maximumRetryAfterBackoff         = 30
	maximumRetryAfterBackoffDuration = time.Duration(maximumRetryAfterBackoff) * time.Second
)

func testForRetryable(r *http.Response, err error, retryAttempt int) (time.Duration, bool) {

	baseDelay := time.Second
	requestDelayDuration, ebErr := calculateExponentialBackoff(retryAttempt, baseDelay)
	if ebErr != nil {
		slog.Error("Invalid backoff delay duration", "error", ebErr, "baseDelay", baseDelay, "retry", false)
		return maximumRetryAfterBackoffDuration, false
	}

	if r != nil {
		if r.StatusCode == http.StatusNotImplemented || r.StatusCode == http.StatusServiceUnavailable || r.StatusCode == http.StatusTooManyRequests {
			retryAfter, err := parseRetryAfterHeader(r)
			if err != nil {
				slog.Warn("Cannot parse the expected \"Retry-After\" header", "error", err)
			}

			if err == nil {
				if retryAfter >= maximumRetryAfterBackoffDuration {
					return maximumRetryAfterBackoffDuration, true // optimistically set to the maximum if beyond
				} else {
					return retryAfter, true
				}
			}
		}

		retryAbleCodes := []int{
			http.StatusRequestTimeout,
			http.StatusTooManyRequests,
			http.StatusInternalServerError,
			http.StatusBadGateway,
			http.StatusServiceUnavailable,
			http.StatusGatewayTimeout,
		}

		if slices.Contains(retryAbleCodes, r.StatusCode) {
			slog.Info("HTTP status code detected, available for retry", "status code", r.StatusCode)

			if r.StatusCode == http.StatusInternalServerError {
				slog.Error("Server error detected, retrying", "status code", r.StatusCode)
			}
			return requestDelayDuration, true
		}
	}

	return requestDelayDuration, false
}

func parseRetryAfterHeader(resp *http.Response) (time.Duration, error) {
	retryAfterHeader := resp.Header.Get("Retry-After")

	if retryAfterHeader == "" {
		return 0, fmt.Errorf("retry-after header not found")
	}

	retryAfterSeconds, err := strconv.Atoi(retryAfterHeader)

	if err == nil {
		return time.Duration(retryAfterSeconds) * time.Second, nil
	}

	retryAfterTime, err := http.ParseTime(retryAfterHeader)

	if err != nil {
		return 0, fmt.Errorf("Uunable to parse retry-after header value: %v", err)
	}

	return time.Until(retryAfterTime), nil
}

func calculateExponentialBackoff(attempt int, baseDelay time.Duration) (time.Duration, error) {
	n, err := rand.Int(rand.Reader, big.NewInt(101))
	if err != nil {
		return 0, err
	}

	if !n.IsInt64() {
		return 0, fmt.Errorf("generated random jitter value is too large. This is always a problem with the SDK. Please raise an issue with the SDK maintainers.")
	}

	jitter := time.Duration(n.Int64()) * time.Millisecond // Add random jitter
	calculatedBackOff := baseDelay*time.Duration(math.Pow(2, float64(attempt))) + jitter

	slog.Debug("Calculated backoff duration", "maximumRetryAfterBackoffDuration", maximumRetryAfterBackoffDuration.String(), "attempt", attempt, "baseDelay", baseDelay.String(), "jitter", jitter.String(), "calculatedBackOff", calculatedBackOff.String())

	return time.Duration(math.Min(float64(calculatedBackOff), float64(maximumRetryAfterBackoffDuration))), nil
}
