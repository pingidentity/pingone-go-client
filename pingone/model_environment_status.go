// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentStatus the model 'EnvironmentStatus'
type EnvironmentStatus string

// List of Environment_Status
const (
	ENVIRONMENTSTATUS_ACTIVE         EnvironmentStatus = "ACTIVE"
	ENVIRONMENTSTATUS_DELETE_PENDING EnvironmentStatus = "DELETE_PENDING"
)

// All allowed values of EnvironmentStatus enum
var AllowedEnvironmentStatusEnumValues = []EnvironmentStatus{
	"ACTIVE",
	"DELETE_PENDING",
}

func (v *EnvironmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentStatus(value)
	for _, existing := range AllowedEnvironmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentStatusFromValue returns a pointer to a valid EnvironmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentStatusFromValue(v string) (*EnvironmentStatus, error) {
	ev := EnvironmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentStatus: valid values are %v", v, AllowedEnvironmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentStatus) IsValid() bool {
	for _, existing := range AllowedEnvironmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Status value
func (v EnvironmentStatus) Ptr() *EnvironmentStatus {
	return &v
}

type NullableEnvironmentStatus struct {
	value *EnvironmentStatus
	isSet bool
}

func (v NullableEnvironmentStatus) Get() *EnvironmentStatus {
	return v.value
}

func (v *NullableEnvironmentStatus) Set(val *EnvironmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentStatus(val *EnvironmentStatus) *NullableEnvironmentStatus {
	return &NullableEnvironmentStatus{value: val, isSet: true}
}

func (v NullableEnvironmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
