/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the EnvironmentStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentStatus{}

// checks if the EnvironmentStatus type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentStatus{}

// EnvironmentStatus struct for EnvironmentStatus
type EnvironmentStatus struct {
	Status               *EnvironmentStatusValue `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentStatus EnvironmentStatus

// NewEnvironmentStatus instantiates a new EnvironmentStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentStatus() *EnvironmentStatus {
	this := EnvironmentStatus{}
	return &this
}

// NewEnvironmentStatusWithDefaults instantiates a new EnvironmentStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentStatusWithDefaults() *EnvironmentStatus {
	this := EnvironmentStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EnvironmentStatus) GetStatus() EnvironmentStatusValue {
	if o == nil || IsNil(o.Status) {
		var ret EnvironmentStatusValue
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStatus) GetStatusOk() (*EnvironmentStatusValue, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EnvironmentStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given EnvironmentStatusValue and assigns it to the Status field.
func (o *EnvironmentStatus) SetStatus(v EnvironmentStatusValue) {
	o.Status = &v
}

func (o EnvironmentStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentStatus) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentStatus := _EnvironmentStatus{}

	err = json.Unmarshal(data, &varEnvironmentStatus)

	if err != nil {
		return err
	}

	*o = EnvironmentStatus(varEnvironmentStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentStatus) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentStatus struct {
	value *EnvironmentStatus
	isSet bool
}

func (v NullableEnvironmentStatus) Get() *EnvironmentStatus {
	return v.value
}

func (v *NullableEnvironmentStatus) Set(val *EnvironmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentStatus(val *EnvironmentStatus) *NullableEnvironmentStatus {
	return &NullableEnvironmentStatus{value: val, isSet: true}
}

func (v NullableEnvironmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
