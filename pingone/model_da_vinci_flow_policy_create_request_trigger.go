// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowPolicyCreateRequestTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyCreateRequestTrigger{}

// checks if the DaVinciFlowPolicyCreateRequestTrigger type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyCreateRequestTrigger{}

// DaVinciFlowPolicyCreateRequestTrigger struct for DaVinciFlowPolicyCreateRequestTrigger
type DaVinciFlowPolicyCreateRequestTrigger struct {
	Configuration        *DaVinciFlowPolicyCreateRequestTriggerConfiguration `json:"configuration,omitempty"`
	Type                 *DaVinciFlowPolicyCreateRequestTriggerType          `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyCreateRequestTrigger DaVinciFlowPolicyCreateRequestTrigger

// NewDaVinciFlowPolicyCreateRequestTrigger instantiates a new DaVinciFlowPolicyCreateRequestTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyCreateRequestTrigger() *DaVinciFlowPolicyCreateRequestTrigger {
	this := DaVinciFlowPolicyCreateRequestTrigger{}
	var type_ DaVinciFlowPolicyCreateRequestTriggerType = DAVINCIFLOWPOLICYCREATEREQUESTTRIGGERTYPE_AUTHENTICATION
	this.Type = &type_
	return &this
}

// NewDaVinciFlowPolicyCreateRequestTriggerWithDefaults instantiates a new DaVinciFlowPolicyCreateRequestTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyCreateRequestTriggerWithDefaults() *DaVinciFlowPolicyCreateRequestTrigger {
	this := DaVinciFlowPolicyCreateRequestTrigger{}
	var type_ DaVinciFlowPolicyCreateRequestTriggerType = DAVINCIFLOWPOLICYCREATEREQUESTTRIGGERTYPE_AUTHENTICATION
	this.Type = &type_
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyCreateRequestTrigger) GetConfiguration() DaVinciFlowPolicyCreateRequestTriggerConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret DaVinciFlowPolicyCreateRequestTriggerConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestTrigger) GetConfigurationOk() (*DaVinciFlowPolicyCreateRequestTriggerConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyCreateRequestTrigger) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given DaVinciFlowPolicyCreateRequestTriggerConfiguration and assigns it to the Configuration field.
func (o *DaVinciFlowPolicyCreateRequestTrigger) SetConfiguration(v DaVinciFlowPolicyCreateRequestTriggerConfiguration) {
	o.Configuration = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyCreateRequestTrigger) GetType() DaVinciFlowPolicyCreateRequestTriggerType {
	if o == nil || IsNil(o.Type) {
		var ret DaVinciFlowPolicyCreateRequestTriggerType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestTrigger) GetTypeOk() (*DaVinciFlowPolicyCreateRequestTriggerType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyCreateRequestTrigger) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DaVinciFlowPolicyCreateRequestTriggerType and assigns it to the Type field.
func (o *DaVinciFlowPolicyCreateRequestTrigger) SetType(v DaVinciFlowPolicyCreateRequestTriggerType) {
	o.Type = &v
}

func (o DaVinciFlowPolicyCreateRequestTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyCreateRequestTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyCreateRequestTrigger) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowPolicyCreateRequestTrigger := _DaVinciFlowPolicyCreateRequestTrigger{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyCreateRequestTrigger)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyCreateRequestTrigger(varDaVinciFlowPolicyCreateRequestTrigger)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyCreateRequestTrigger) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Configuration) {
		logAttrs = append(logAttrs, slog.Any("configuration", *o.Configuration))
	}
	if !IsNil(o.Type) {
		logAttrs = append(logAttrs, slog.Any("type", *o.Type))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyCreateRequestTrigger struct {
	value *DaVinciFlowPolicyCreateRequestTrigger
	isSet bool
}

func (v NullableDaVinciFlowPolicyCreateRequestTrigger) Get() *DaVinciFlowPolicyCreateRequestTrigger {
	return v.value
}

func (v *NullableDaVinciFlowPolicyCreateRequestTrigger) Set(val *DaVinciFlowPolicyCreateRequestTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyCreateRequestTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyCreateRequestTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyCreateRequestTrigger(val *DaVinciFlowPolicyCreateRequestTrigger) *NullableDaVinciFlowPolicyCreateRequestTrigger {
	return &NullableDaVinciFlowPolicyCreateRequestTrigger{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyCreateRequestTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyCreateRequestTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
