// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowVersionDetailResponseOutputSchemaOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionDetailResponseOutputSchemaOutput{}

// checks if the DaVinciFlowVersionDetailResponseOutputSchemaOutput type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionDetailResponseOutputSchemaOutput{}

// DaVinciFlowVersionDetailResponseOutputSchemaOutput struct for DaVinciFlowVersionDetailResponseOutputSchemaOutput
type DaVinciFlowVersionDetailResponseOutputSchemaOutput struct {
	Properties                map[string]interface{}                                 `json:"properties"`
	Type                      DaVinciFlowVersionDetailResponseOutputSchemaOutputType `json:"type"`
	AdditionalPropertiesField *bool                                                  `json:"additionalProperties,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _DaVinciFlowVersionDetailResponseOutputSchemaOutput DaVinciFlowVersionDetailResponseOutputSchemaOutput

// NewDaVinciFlowVersionDetailResponseOutputSchemaOutput instantiates a new DaVinciFlowVersionDetailResponseOutputSchemaOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionDetailResponseOutputSchemaOutput(properties map[string]interface{}, type_ DaVinciFlowVersionDetailResponseOutputSchemaOutputType) *DaVinciFlowVersionDetailResponseOutputSchemaOutput {
	this := DaVinciFlowVersionDetailResponseOutputSchemaOutput{}
	this.Properties = properties
	this.Type = type_
	return &this
}

// NewDaVinciFlowVersionDetailResponseOutputSchemaOutputWithDefaults instantiates a new DaVinciFlowVersionDetailResponseOutputSchemaOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionDetailResponseOutputSchemaOutputWithDefaults() *DaVinciFlowVersionDetailResponseOutputSchemaOutput {
	this := DaVinciFlowVersionDetailResponseOutputSchemaOutput{}
	return &this
}

// GetProperties returns the Properties field value
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetType returns the Type field value
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) GetType() DaVinciFlowVersionDetailResponseOutputSchemaOutputType {
	if o == nil {
		var ret DaVinciFlowVersionDetailResponseOutputSchemaOutputType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) GetTypeOk() (*DaVinciFlowVersionDetailResponseOutputSchemaOutputType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) SetType(v DaVinciFlowVersionDetailResponseOutputSchemaOutputType) {
	o.Type = v
}

// GetAdditionalPropertiesField returns the AdditionalPropertiesField field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) GetAdditionalPropertiesField() bool {
	if o == nil || IsNil(o.AdditionalPropertiesField) {
		var ret bool
		return ret
	}
	return *o.AdditionalPropertiesField
}

// GetAdditionalPropertiesFieldOk returns a tuple with the AdditionalPropertiesField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) GetAdditionalPropertiesFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.AdditionalPropertiesField) {
		return nil, false
	}
	return o.AdditionalPropertiesField, true
}

// HasAdditionalPropertiesField returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) HasAdditionalPropertiesField() bool {
	if o != nil && !IsNil(o.AdditionalPropertiesField) {
		return true
	}

	return false
}

// SetAdditionalPropertiesField gets a reference to the given bool and assigns it to the AdditionalPropertiesField field.
func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) SetAdditionalPropertiesField(v bool) {
	o.AdditionalPropertiesField = &v
}

func (o DaVinciFlowVersionDetailResponseOutputSchemaOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionDetailResponseOutputSchemaOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["properties"] = o.Properties
	toSerialize["type"] = o.Type
	if !IsNil(o.AdditionalPropertiesField) {
		toSerialize["additionalProperties"] = o.AdditionalPropertiesField
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionDetailResponseOutputSchemaOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"properties",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowVersionDetailResponseOutputSchemaOutput := _DaVinciFlowVersionDetailResponseOutputSchemaOutput{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionDetailResponseOutputSchemaOutput)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionDetailResponseOutputSchemaOutput(varDaVinciFlowVersionDetailResponseOutputSchemaOutput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "properties")
		delete(additionalProperties, "type")
		delete(additionalProperties, "additionalProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionDetailResponseOutputSchemaOutput) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("properties", o.Properties))
	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	if !IsNil(o.AdditionalPropertiesField) {
		logAttrs = append(logAttrs, slog.Any("additionalProperties", *o.AdditionalPropertiesField))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput struct {
	value *DaVinciFlowVersionDetailResponseOutputSchemaOutput
	isSet bool
}

func (v NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput) Get() *DaVinciFlowVersionDetailResponseOutputSchemaOutput {
	return v.value
}

func (v *NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput) Set(val *DaVinciFlowVersionDetailResponseOutputSchemaOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionDetailResponseOutputSchemaOutput(val *DaVinciFlowVersionDetailResponseOutputSchemaOutput) *NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput {
	return &NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionDetailResponseOutputSchemaOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
