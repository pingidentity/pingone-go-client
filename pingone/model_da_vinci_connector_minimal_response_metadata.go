// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciConnectorMinimalResponseMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorMinimalResponseMetadata{}

// checks if the DaVinciConnectorMinimalResponseMetadata type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorMinimalResponseMetadata{}

// DaVinciConnectorMinimalResponseMetadata struct for DaVinciConnectorMinimalResponseMetadata
type DaVinciConnectorMinimalResponseMetadata struct {
	Colors               *DaVinciConnectorMinimalResponseMetadataColors `json:"colors,omitempty"`
	Logos                *DaVinciConnectorMinimalResponseMetadataLogos  `json:"logos,omitempty"`
	Type                 *DaVinciConnectorMinimalResponseMetadataType   `json:"type,omitempty"`
	Vendor               *string                                        `json:"vendor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorMinimalResponseMetadata DaVinciConnectorMinimalResponseMetadata

// NewDaVinciConnectorMinimalResponseMetadata instantiates a new DaVinciConnectorMinimalResponseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorMinimalResponseMetadata() *DaVinciConnectorMinimalResponseMetadata {
	this := DaVinciConnectorMinimalResponseMetadata{}
	return &this
}

// NewDaVinciConnectorMinimalResponseMetadataWithDefaults instantiates a new DaVinciConnectorMinimalResponseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorMinimalResponseMetadataWithDefaults() *DaVinciConnectorMinimalResponseMetadata {
	this := DaVinciConnectorMinimalResponseMetadata{}
	return &this
}

// GetColors returns the Colors field value if set, zero value otherwise.
func (o *DaVinciConnectorMinimalResponseMetadata) GetColors() DaVinciConnectorMinimalResponseMetadataColors {
	if o == nil || IsNil(o.Colors) {
		var ret DaVinciConnectorMinimalResponseMetadataColors
		return ret
	}
	return *o.Colors
}

// GetColorsOk returns a tuple with the Colors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) GetColorsOk() (*DaVinciConnectorMinimalResponseMetadataColors, bool) {
	if o == nil || IsNil(o.Colors) {
		return nil, false
	}
	return o.Colors, true
}

// HasColors returns a boolean if a field has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) HasColors() bool {
	if o != nil && !IsNil(o.Colors) {
		return true
	}

	return false
}

// SetColors gets a reference to the given DaVinciConnectorMinimalResponseMetadataColors and assigns it to the Colors field.
func (o *DaVinciConnectorMinimalResponseMetadata) SetColors(v DaVinciConnectorMinimalResponseMetadataColors) {
	o.Colors = &v
}

// GetLogos returns the Logos field value if set, zero value otherwise.
func (o *DaVinciConnectorMinimalResponseMetadata) GetLogos() DaVinciConnectorMinimalResponseMetadataLogos {
	if o == nil || IsNil(o.Logos) {
		var ret DaVinciConnectorMinimalResponseMetadataLogos
		return ret
	}
	return *o.Logos
}

// GetLogosOk returns a tuple with the Logos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) GetLogosOk() (*DaVinciConnectorMinimalResponseMetadataLogos, bool) {
	if o == nil || IsNil(o.Logos) {
		return nil, false
	}
	return o.Logos, true
}

// HasLogos returns a boolean if a field has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) HasLogos() bool {
	if o != nil && !IsNil(o.Logos) {
		return true
	}

	return false
}

// SetLogos gets a reference to the given DaVinciConnectorMinimalResponseMetadataLogos and assigns it to the Logos field.
func (o *DaVinciConnectorMinimalResponseMetadata) SetLogos(v DaVinciConnectorMinimalResponseMetadataLogos) {
	o.Logos = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DaVinciConnectorMinimalResponseMetadata) GetType() DaVinciConnectorMinimalResponseMetadataType {
	if o == nil || IsNil(o.Type) {
		var ret DaVinciConnectorMinimalResponseMetadataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) GetTypeOk() (*DaVinciConnectorMinimalResponseMetadataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DaVinciConnectorMinimalResponseMetadataType and assigns it to the Type field.
func (o *DaVinciConnectorMinimalResponseMetadata) SetType(v DaVinciConnectorMinimalResponseMetadataType) {
	o.Type = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *DaVinciConnectorMinimalResponseMetadata) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *DaVinciConnectorMinimalResponseMetadata) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *DaVinciConnectorMinimalResponseMetadata) SetVendor(v string) {
	o.Vendor = &v
}

func (o DaVinciConnectorMinimalResponseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorMinimalResponseMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Colors) {
		toSerialize["colors"] = o.Colors
	}
	if !IsNil(o.Logos) {
		toSerialize["logos"] = o.Logos
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorMinimalResponseMetadata) UnmarshalJSON(data []byte) (err error) {
	varDaVinciConnectorMinimalResponseMetadata := _DaVinciConnectorMinimalResponseMetadata{}

	err = json.Unmarshal(data, &varDaVinciConnectorMinimalResponseMetadata)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorMinimalResponseMetadata(varDaVinciConnectorMinimalResponseMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "colors")
		delete(additionalProperties, "logos")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorMinimalResponseMetadata) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Colors) {
		logAttrs = append(logAttrs, slog.Any("colors", *o.Colors))
	}
	if !IsNil(o.Logos) {
		logAttrs = append(logAttrs, slog.Any("logos", *o.Logos))
	}
	if !IsNil(o.Type) {
		logAttrs = append(logAttrs, slog.Any("type", *o.Type))
	}
	if !IsNil(o.Vendor) {
		logAttrs = append(logAttrs, slog.Any("vendor", *o.Vendor))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorMinimalResponseMetadata struct {
	value *DaVinciConnectorMinimalResponseMetadata
	isSet bool
}

func (v NullableDaVinciConnectorMinimalResponseMetadata) Get() *DaVinciConnectorMinimalResponseMetadata {
	return v.value
}

func (v *NullableDaVinciConnectorMinimalResponseMetadata) Set(val *DaVinciConnectorMinimalResponseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorMinimalResponseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorMinimalResponseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorMinimalResponseMetadata(val *DaVinciConnectorMinimalResponseMetadata) *NullableDaVinciConnectorMinimalResponseMetadata {
	return &NullableDaVinciConnectorMinimalResponseMetadata{value: val, isSet: true}
}

func (v NullableDaVinciConnectorMinimalResponseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorMinimalResponseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
