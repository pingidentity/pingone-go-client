// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DavinciConnectorDetailsResponseSections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorDetailsResponseSections{}

// checks if the DavinciConnectorDetailsResponseSections type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorDetailsResponseSections{}

// DavinciConnectorDetailsResponseSections struct for DavinciConnectorDetailsResponseSections
type DavinciConnectorDetailsResponseSections struct {
	Default              *bool  `json:"default,omitempty"`
	Name                 string `json:"name"`
	Value                string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorDetailsResponseSections DavinciConnectorDetailsResponseSections

// NewDavinciConnectorDetailsResponseSections instantiates a new DavinciConnectorDetailsResponseSections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorDetailsResponseSections(name string, value string) *DavinciConnectorDetailsResponseSections {
	this := DavinciConnectorDetailsResponseSections{}
	this.Name = name
	this.Value = value
	return &this
}

// NewDavinciConnectorDetailsResponseSectionsWithDefaults instantiates a new DavinciConnectorDetailsResponseSections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorDetailsResponseSectionsWithDefaults() *DavinciConnectorDetailsResponseSections {
	this := DavinciConnectorDetailsResponseSections{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponseSections) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponseSections) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponseSections) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *DavinciConnectorDetailsResponseSections) SetDefault(v bool) {
	o.Default = &v
}

// GetName returns the Name field value
func (o *DavinciConnectorDetailsResponseSections) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponseSections) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DavinciConnectorDetailsResponseSections) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *DavinciConnectorDetailsResponseSections) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponseSections) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DavinciConnectorDetailsResponseSections) SetValue(v string) {
	o.Value = v
}

func (o DavinciConnectorDetailsResponseSections) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorDetailsResponseSections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorDetailsResponseSections) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDavinciConnectorDetailsResponseSections := _DavinciConnectorDetailsResponseSections{}

	err = json.Unmarshal(data, &varDavinciConnectorDetailsResponseSections)

	if err != nil {
		return err
	}

	*o = DavinciConnectorDetailsResponseSections(varDavinciConnectorDetailsResponseSections)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default")
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorDetailsResponseSections) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Default) {
		logAttrs = append(logAttrs, slog.Any("default", *o.Default))
	}
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("value", o.Value))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorDetailsResponseSections struct {
	value *DavinciConnectorDetailsResponseSections
	isSet bool
}

func (v NullableDavinciConnectorDetailsResponseSections) Get() *DavinciConnectorDetailsResponseSections {
	return v.value
}

func (v *NullableDavinciConnectorDetailsResponseSections) Set(val *DavinciConnectorDetailsResponseSections) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorDetailsResponseSections) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorDetailsResponseSections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorDetailsResponseSections(val *DavinciConnectorDetailsResponseSections) *NullableDavinciConnectorDetailsResponseSections {
	return &NullableDavinciConnectorDetailsResponseSections{value: val, isSet: true}
}

func (v NullableDavinciConnectorDetailsResponseSections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorDetailsResponseSections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
