// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableReplaceRequestContext the model 'DaVinciVariableReplaceRequestContext'
type DaVinciVariableReplaceRequestContext string

// List of DaVinci_Variable_Replace_Request_Context
const (
	DAVINCIVARIABLEREPLACEREQUESTCONTEXT_COMPANY       DaVinciVariableReplaceRequestContext = "company"
	DAVINCIVARIABLEREPLACEREQUESTCONTEXT_FLOW          DaVinciVariableReplaceRequestContext = "flow"
	DAVINCIVARIABLEREPLACEREQUESTCONTEXT_FLOW_INSTANCE DaVinciVariableReplaceRequestContext = "flowInstance"
	DAVINCIVARIABLEREPLACEREQUESTCONTEXT_USER          DaVinciVariableReplaceRequestContext = "user"
)

// All allowed values of DaVinciVariableReplaceRequestContext enum
var AllowedDaVinciVariableReplaceRequestContextEnumValues = []DaVinciVariableReplaceRequestContext{
	"company",
	"flow",
	"flowInstance",
	"user",
}

func (v *DaVinciVariableReplaceRequestContext) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciVariableReplaceRequestContext(value)
	for _, existing := range AllowedDaVinciVariableReplaceRequestContextEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciVariableReplaceRequestContext(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciVariableReplaceRequestContextFromValue returns a pointer to a valid DaVinciVariableReplaceRequestContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciVariableReplaceRequestContextFromValue(v string) (*DaVinciVariableReplaceRequestContext, error) {
	ev := DaVinciVariableReplaceRequestContext(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciVariableReplaceRequestContext: valid values are %v", v, AllowedDaVinciVariableReplaceRequestContextEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciVariableReplaceRequestContext) IsValid() bool {
	for _, existing := range AllowedDaVinciVariableReplaceRequestContextEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Variable_Replace_Request_Context value
func (v DaVinciVariableReplaceRequestContext) Ptr() *DaVinciVariableReplaceRequestContext {
	return &v
}

type NullableDaVinciVariableReplaceRequestContext struct {
	value *DaVinciVariableReplaceRequestContext
	isSet bool
}

func (v NullableDaVinciVariableReplaceRequestContext) Get() *DaVinciVariableReplaceRequestContext {
	return v.value
}

func (v *NullableDaVinciVariableReplaceRequestContext) Set(val *DaVinciVariableReplaceRequestContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableReplaceRequestContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableReplaceRequestContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableReplaceRequestContext(val *DaVinciVariableReplaceRequestContext) *NullableDaVinciVariableReplaceRequestContext {
	return &NullableDaVinciVariableReplaceRequestContext{value: val, isSet: true}
}

func (v NullableDaVinciVariableReplaceRequestContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableReplaceRequestContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
