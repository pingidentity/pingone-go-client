// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableResponseDataType the model 'DaVinciVariableResponseDataType'
type DaVinciVariableResponseDataType string

// List of DaVinci_Variable_Response_Data_Type
const (
	DAVINCIVARIABLERESPONSEDATATYPE_ARRAY             DaVinciVariableResponseDataType = "array"
	DAVINCIVARIABLERESPONSEDATATYPE_BOOLEAN           DaVinciVariableResponseDataType = "boolean"
	DAVINCIVARIABLERESPONSEDATATYPE_BUTTON            DaVinciVariableResponseDataType = "button"
	DAVINCIVARIABLERESPONSEDATATYPE_LIST              DaVinciVariableResponseDataType = "list"
	DAVINCIVARIABLERESPONSEDATATYPE_LIST_INT          DaVinciVariableResponseDataType = "listInt"
	DAVINCIVARIABLERESPONSEDATATYPE_MAPPING           DaVinciVariableResponseDataType = "mapping"
	DAVINCIVARIABLERESPONSEDATATYPE_NUMBER            DaVinciVariableResponseDataType = "number"
	DAVINCIVARIABLERESPONSEDATATYPE_OBJECT            DaVinciVariableResponseDataType = "object"
	DAVINCIVARIABLERESPONSEDATATYPE_PROPERTY_GROUP    DaVinciVariableResponseDataType = "propertyGroup"
	DAVINCIVARIABLERESPONSEDATATYPE_SCREEN_CONFIG     DaVinciVariableResponseDataType = "screenConfig"
	DAVINCIVARIABLERESPONSEDATATYPE_SECRET            DaVinciVariableResponseDataType = "secret"
	DAVINCIVARIABLERESPONSEDATATYPE_SK_CONNECTOR_LIST DaVinciVariableResponseDataType = "skConnectorList"
	DAVINCIVARIABLERESPONSEDATATYPE_SK_EVENT          DaVinciVariableResponseDataType = "skEvent"
	DAVINCIVARIABLERESPONSEDATATYPE_STRING            DaVinciVariableResponseDataType = "string"
	DAVINCIVARIABLERESPONSEDATATYPE_TIMESTAMP         DaVinciVariableResponseDataType = "timestamp"
)

// All allowed values of DaVinciVariableResponseDataType enum
var AllowedDaVinciVariableResponseDataTypeEnumValues = []DaVinciVariableResponseDataType{
	"array",
	"boolean",
	"button",
	"list",
	"listInt",
	"mapping",
	"number",
	"object",
	"propertyGroup",
	"screenConfig",
	"secret",
	"skConnectorList",
	"skEvent",
	"string",
	"timestamp",
}

func (v *DaVinciVariableResponseDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciVariableResponseDataType(value)
	for _, existing := range AllowedDaVinciVariableResponseDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciVariableResponseDataType(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciVariableResponseDataTypeFromValue returns a pointer to a valid DaVinciVariableResponseDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciVariableResponseDataTypeFromValue(v string) (*DaVinciVariableResponseDataType, error) {
	ev := DaVinciVariableResponseDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciVariableResponseDataType: valid values are %v", v, AllowedDaVinciVariableResponseDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciVariableResponseDataType) IsValid() bool {
	for _, existing := range AllowedDaVinciVariableResponseDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Variable_Response_Data_Type value
func (v DaVinciVariableResponseDataType) Ptr() *DaVinciVariableResponseDataType {
	return &v
}

type NullableDaVinciVariableResponseDataType struct {
	value *DaVinciVariableResponseDataType
	isSet bool
}

func (v NullableDaVinciVariableResponseDataType) Get() *DaVinciVariableResponseDataType {
	return v.value
}

func (v *NullableDaVinciVariableResponseDataType) Set(val *DaVinciVariableResponseDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableResponseDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableResponseDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableResponseDataType(val *DaVinciVariableResponseDataType) *NullableDaVinciVariableResponseDataType {
	return &NullableDaVinciVariableResponseDataType{value: val, isSet: true}
}

func (v NullableDaVinciVariableResponseDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableResponseDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
