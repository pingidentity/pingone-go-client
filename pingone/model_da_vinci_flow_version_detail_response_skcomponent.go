// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowVersionDetailResponseSkcomponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionDetailResponseSkcomponent{}

// checks if the DaVinciFlowVersionDetailResponseSkcomponent type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionDetailResponseSkcomponent{}

// DaVinciFlowVersionDetailResponseSkcomponent struct for DaVinciFlowVersionDetailResponseSkcomponent
type DaVinciFlowVersionDetailResponseSkcomponent struct {
	Id                   *string                                             `json:"id,omitempty"`
	Name                 *string                                             `json:"name,omitempty"`
	NodeId               *string                                             `json:"nodeId,omitempty"`
	Options              *DaVinciFlowVersionDetailResponseSkcomponentOptions `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowVersionDetailResponseSkcomponent DaVinciFlowVersionDetailResponseSkcomponent

// NewDaVinciFlowVersionDetailResponseSkcomponent instantiates a new DaVinciFlowVersionDetailResponseSkcomponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionDetailResponseSkcomponent() *DaVinciFlowVersionDetailResponseSkcomponent {
	this := DaVinciFlowVersionDetailResponseSkcomponent{}
	return &this
}

// NewDaVinciFlowVersionDetailResponseSkcomponentWithDefaults instantiates a new DaVinciFlowVersionDetailResponseSkcomponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionDetailResponseSkcomponentWithDefaults() *DaVinciFlowVersionDetailResponseSkcomponent {
	this := DaVinciFlowVersionDetailResponseSkcomponent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) SetName(v string) {
	o.Name = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) SetNodeId(v string) {
	o.NodeId = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetOptions() DaVinciFlowVersionDetailResponseSkcomponentOptions {
	if o == nil || IsNil(o.Options) {
		var ret DaVinciFlowVersionDetailResponseSkcomponentOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) GetOptionsOk() (*DaVinciFlowVersionDetailResponseSkcomponentOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given DaVinciFlowVersionDetailResponseSkcomponentOptions and assigns it to the Options field.
func (o *DaVinciFlowVersionDetailResponseSkcomponent) SetOptions(v DaVinciFlowVersionDetailResponseSkcomponentOptions) {
	o.Options = &v
}

func (o DaVinciFlowVersionDetailResponseSkcomponent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionDetailResponseSkcomponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionDetailResponseSkcomponent) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowVersionDetailResponseSkcomponent := _DaVinciFlowVersionDetailResponseSkcomponent{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionDetailResponseSkcomponent)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionDetailResponseSkcomponent(varDaVinciFlowVersionDetailResponseSkcomponent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nodeId")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionDetailResponseSkcomponent) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	if !IsNil(o.Name) {
		logAttrs = append(logAttrs, slog.Any("name", *o.Name))
	}
	if !IsNil(o.NodeId) {
		logAttrs = append(logAttrs, slog.Any("nodeId", *o.NodeId))
	}
	if !IsNil(o.Options) {
		logAttrs = append(logAttrs, slog.Any("options", *o.Options))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionDetailResponseSkcomponent struct {
	value *DaVinciFlowVersionDetailResponseSkcomponent
	isSet bool
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponent) Get() *DaVinciFlowVersionDetailResponseSkcomponent {
	return v.value
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponent) Set(val *DaVinciFlowVersionDetailResponseSkcomponent) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponent) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionDetailResponseSkcomponent(val *DaVinciFlowVersionDetailResponseSkcomponent) *NullableDaVinciFlowVersionDetailResponseSkcomponent {
	return &NullableDaVinciFlowVersionDetailResponseSkcomponent{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
