// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the SnapshotVersionCollectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotVersionCollectionResponse{}

// checks if the SnapshotVersionCollectionResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &SnapshotVersionCollectionResponse{}

// SnapshotVersionCollectionResponse struct for SnapshotVersionCollectionResponse
type SnapshotVersionCollectionResponse struct {
	Embedded             *SnapshotVersionCollectionResponseEmbedded `json:"_embedded,omitempty"`
	Links                *SnapshotVersionCollectionResponseLinks    `json:"_links,omitempty"`
	Count                *int32                                     `json:"count,omitempty"`
	Size                 *int32                                     `json:"size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnapshotVersionCollectionResponse SnapshotVersionCollectionResponse

// NewSnapshotVersionCollectionResponse instantiates a new SnapshotVersionCollectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotVersionCollectionResponse() *SnapshotVersionCollectionResponse {
	this := SnapshotVersionCollectionResponse{}
	return &this
}

// NewSnapshotVersionCollectionResponseWithDefaults instantiates a new SnapshotVersionCollectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotVersionCollectionResponseWithDefaults() *SnapshotVersionCollectionResponse {
	this := SnapshotVersionCollectionResponse{}
	return &this
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *SnapshotVersionCollectionResponse) GetEmbedded() SnapshotVersionCollectionResponseEmbedded {
	if o == nil || IsNil(o.Embedded) {
		var ret SnapshotVersionCollectionResponseEmbedded
		return ret
	}
	return *o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotVersionCollectionResponse) GetEmbeddedOk() (*SnapshotVersionCollectionResponseEmbedded, bool) {
	if o == nil || IsNil(o.Embedded) {
		return nil, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *SnapshotVersionCollectionResponse) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given SnapshotVersionCollectionResponseEmbedded and assigns it to the Embedded field.
func (o *SnapshotVersionCollectionResponse) SetEmbedded(v SnapshotVersionCollectionResponseEmbedded) {
	o.Embedded = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SnapshotVersionCollectionResponse) GetLinks() SnapshotVersionCollectionResponseLinks {
	if o == nil || IsNil(o.Links) {
		var ret SnapshotVersionCollectionResponseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotVersionCollectionResponse) GetLinksOk() (*SnapshotVersionCollectionResponseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SnapshotVersionCollectionResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SnapshotVersionCollectionResponseLinks and assigns it to the Links field.
func (o *SnapshotVersionCollectionResponse) SetLinks(v SnapshotVersionCollectionResponseLinks) {
	o.Links = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SnapshotVersionCollectionResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotVersionCollectionResponse) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SnapshotVersionCollectionResponse) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *SnapshotVersionCollectionResponse) SetCount(v int32) {
	o.Count = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SnapshotVersionCollectionResponse) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotVersionCollectionResponse) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SnapshotVersionCollectionResponse) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *SnapshotVersionCollectionResponse) SetSize(v int32) {
	o.Size = &v
}

func (o SnapshotVersionCollectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotVersionCollectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnapshotVersionCollectionResponse) UnmarshalJSON(data []byte) (err error) {
	varSnapshotVersionCollectionResponse := _SnapshotVersionCollectionResponse{}

	err = json.Unmarshal(data, &varSnapshotVersionCollectionResponse)

	if err != nil {
		return err
	}

	*o = SnapshotVersionCollectionResponse(varSnapshotVersionCollectionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "count")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o SnapshotVersionCollectionResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Embedded) {
		logAttrs = append(logAttrs, slog.Any("_embedded", *o.Embedded))
	}
	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.Count) {
		logAttrs = append(logAttrs, slog.Any("count", *o.Count))
	}
	if !IsNil(o.Size) {
		logAttrs = append(logAttrs, slog.Any("size", *o.Size))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableSnapshotVersionCollectionResponse struct {
	value *SnapshotVersionCollectionResponse
	isSet bool
}

func (v NullableSnapshotVersionCollectionResponse) Get() *SnapshotVersionCollectionResponse {
	return v.value
}

func (v *NullableSnapshotVersionCollectionResponse) Set(val *SnapshotVersionCollectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotVersionCollectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotVersionCollectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotVersionCollectionResponse(val *SnapshotVersionCollectionResponse) *NullableSnapshotVersionCollectionResponse {
	return &NullableSnapshotVersionCollectionResponse{value: val, isSet: true}
}

func (v NullableSnapshotVersionCollectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotVersionCollectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
