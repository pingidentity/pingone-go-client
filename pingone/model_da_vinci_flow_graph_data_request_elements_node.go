// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataRequestElementsNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataRequestElementsNode{}

// checks if the DaVinciFlowGraphDataRequestElementsNode type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataRequestElementsNode{}

// DaVinciFlowGraphDataRequestElementsNode struct for DaVinciFlowGraphDataRequestElementsNode
type DaVinciFlowGraphDataRequestElementsNode struct {
	Data                 DaVinciFlowGraphDataRequestElementsNodeData      `json:"data"`
	Classes              *string                                          `json:"classes,omitempty"`
	Grabbable            *bool                                            `json:"grabbable,omitempty"`
	Group                *string                                          `json:"group,omitempty"`
	Locked               *bool                                            `json:"locked,omitempty"`
	Pannable             *bool                                            `json:"pannable,omitempty"`
	Position             *DaVinciFlowGraphDataRequestElementsNodePosition `json:"position,omitempty"`
	Removed              *bool                                            `json:"removed,omitempty"`
	Selectable           *bool                                            `json:"selectable,omitempty"`
	Selected             *bool                                            `json:"selected,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataRequestElementsNode DaVinciFlowGraphDataRequestElementsNode

// NewDaVinciFlowGraphDataRequestElementsNode instantiates a new DaVinciFlowGraphDataRequestElementsNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataRequestElementsNode(data DaVinciFlowGraphDataRequestElementsNodeData) *DaVinciFlowGraphDataRequestElementsNode {
	this := DaVinciFlowGraphDataRequestElementsNode{}
	this.Data = data
	return &this
}

// NewDaVinciFlowGraphDataRequestElementsNodeWithDefaults instantiates a new DaVinciFlowGraphDataRequestElementsNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataRequestElementsNodeWithDefaults() *DaVinciFlowGraphDataRequestElementsNode {
	this := DaVinciFlowGraphDataRequestElementsNode{}
	return &this
}

// GetData returns the Data field value
func (o *DaVinciFlowGraphDataRequestElementsNode) GetData() DaVinciFlowGraphDataRequestElementsNodeData {
	if o == nil {
		var ret DaVinciFlowGraphDataRequestElementsNodeData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetDataOk() (*DaVinciFlowGraphDataRequestElementsNodeData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DaVinciFlowGraphDataRequestElementsNode) SetData(v DaVinciFlowGraphDataRequestElementsNodeData) {
	o.Data = v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetClasses() string {
	if o == nil || IsNil(o.Classes) {
		var ret string
		return ret
	}
	return *o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetClassesOk() (*string, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given string and assigns it to the Classes field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetClasses(v string) {
	o.Classes = &v
}

// GetGrabbable returns the Grabbable field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetGrabbable() bool {
	if o == nil || IsNil(o.Grabbable) {
		var ret bool
		return ret
	}
	return *o.Grabbable
}

// GetGrabbableOk returns a tuple with the Grabbable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetGrabbableOk() (*bool, bool) {
	if o == nil || IsNil(o.Grabbable) {
		return nil, false
	}
	return o.Grabbable, true
}

// HasGrabbable returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasGrabbable() bool {
	if o != nil && !IsNil(o.Grabbable) {
		return true
	}

	return false
}

// SetGrabbable gets a reference to the given bool and assigns it to the Grabbable field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetGrabbable(v bool) {
	o.Grabbable = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetGroup(v string) {
	o.Group = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetLocked(v bool) {
	o.Locked = &v
}

// GetPannable returns the Pannable field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetPannable() bool {
	if o == nil || IsNil(o.Pannable) {
		var ret bool
		return ret
	}
	return *o.Pannable
}

// GetPannableOk returns a tuple with the Pannable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetPannableOk() (*bool, bool) {
	if o == nil || IsNil(o.Pannable) {
		return nil, false
	}
	return o.Pannable, true
}

// HasPannable returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasPannable() bool {
	if o != nil && !IsNil(o.Pannable) {
		return true
	}

	return false
}

// SetPannable gets a reference to the given bool and assigns it to the Pannable field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetPannable(v bool) {
	o.Pannable = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetPosition() DaVinciFlowGraphDataRequestElementsNodePosition {
	if o == nil || IsNil(o.Position) {
		var ret DaVinciFlowGraphDataRequestElementsNodePosition
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetPositionOk() (*DaVinciFlowGraphDataRequestElementsNodePosition, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given DaVinciFlowGraphDataRequestElementsNodePosition and assigns it to the Position field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetPosition(v DaVinciFlowGraphDataRequestElementsNodePosition) {
	o.Position = &v
}

// GetRemoved returns the Removed field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetRemoved() bool {
	if o == nil || IsNil(o.Removed) {
		var ret bool
		return ret
	}
	return *o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetRemovedOk() (*bool, bool) {
	if o == nil || IsNil(o.Removed) {
		return nil, false
	}
	return o.Removed, true
}

// HasRemoved returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasRemoved() bool {
	if o != nil && !IsNil(o.Removed) {
		return true
	}

	return false
}

// SetRemoved gets a reference to the given bool and assigns it to the Removed field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetRemoved(v bool) {
	o.Removed = &v
}

// GetSelectable returns the Selectable field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetSelectable() bool {
	if o == nil || IsNil(o.Selectable) {
		var ret bool
		return ret
	}
	return *o.Selectable
}

// GetSelectableOk returns a tuple with the Selectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetSelectableOk() (*bool, bool) {
	if o == nil || IsNil(o.Selectable) {
		return nil, false
	}
	return o.Selectable, true
}

// HasSelectable returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasSelectable() bool {
	if o != nil && !IsNil(o.Selectable) {
		return true
	}

	return false
}

// SetSelectable gets a reference to the given bool and assigns it to the Selectable field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetSelectable(v bool) {
	o.Selectable = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetSelected() bool {
	if o == nil || IsNil(o.Selected) {
		var ret bool
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) GetSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNode) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given bool and assigns it to the Selected field.
func (o *DaVinciFlowGraphDataRequestElementsNode) SetSelected(v bool) {
	o.Selected = &v
}

func (o DaVinciFlowGraphDataRequestElementsNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataRequestElementsNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	if !IsNil(o.Grabbable) {
		toSerialize["grabbable"] = o.Grabbable
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.Pannable) {
		toSerialize["pannable"] = o.Pannable
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Removed) {
		toSerialize["removed"] = o.Removed
	}
	if !IsNil(o.Selectable) {
		toSerialize["selectable"] = o.Selectable
	}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataRequestElementsNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataRequestElementsNode := _DaVinciFlowGraphDataRequestElementsNode{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataRequestElementsNode)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataRequestElementsNode(varDaVinciFlowGraphDataRequestElementsNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "classes")
		delete(additionalProperties, "grabbable")
		delete(additionalProperties, "group")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "pannable")
		delete(additionalProperties, "position")
		delete(additionalProperties, "removed")
		delete(additionalProperties, "selectable")
		delete(additionalProperties, "selected")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataRequestElementsNode) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("data", o.Data))
	if !IsNil(o.Classes) {
		logAttrs = append(logAttrs, slog.Any("classes", *o.Classes))
	}
	if !IsNil(o.Grabbable) {
		logAttrs = append(logAttrs, slog.Any("grabbable", *o.Grabbable))
	}
	if !IsNil(o.Group) {
		logAttrs = append(logAttrs, slog.Any("group", *o.Group))
	}
	if !IsNil(o.Locked) {
		logAttrs = append(logAttrs, slog.Any("locked", *o.Locked))
	}
	if !IsNil(o.Pannable) {
		logAttrs = append(logAttrs, slog.Any("pannable", *o.Pannable))
	}
	if !IsNil(o.Position) {
		logAttrs = append(logAttrs, slog.Any("position", *o.Position))
	}
	if !IsNil(o.Removed) {
		logAttrs = append(logAttrs, slog.Any("removed", *o.Removed))
	}
	if !IsNil(o.Selectable) {
		logAttrs = append(logAttrs, slog.Any("selectable", *o.Selectable))
	}
	if !IsNil(o.Selected) {
		logAttrs = append(logAttrs, slog.Any("selected", *o.Selected))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataRequestElementsNode struct {
	value *DaVinciFlowGraphDataRequestElementsNode
	isSet bool
}

func (v NullableDaVinciFlowGraphDataRequestElementsNode) Get() *DaVinciFlowGraphDataRequestElementsNode {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataRequestElementsNode) Set(val *DaVinciFlowGraphDataRequestElementsNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataRequestElementsNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataRequestElementsNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataRequestElementsNode(val *DaVinciFlowGraphDataRequestElementsNode) *NullableDaVinciFlowGraphDataRequestElementsNode {
	return &NullableDaVinciFlowGraphDataRequestElementsNode{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataRequestElementsNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataRequestElementsNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
