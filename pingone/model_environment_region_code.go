// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentRegionCode the model 'EnvironmentRegionCode'
type EnvironmentRegionCode string

// List of EnvironmentRegionCode
const (
	ENVIRONMENTREGIONCODE_AP EnvironmentRegionCode = "AP"
	ENVIRONMENTREGIONCODE_AU EnvironmentRegionCode = "AU"
	ENVIRONMENTREGIONCODE_CA EnvironmentRegionCode = "CA"
	ENVIRONMENTREGIONCODE_EU EnvironmentRegionCode = "EU"
	ENVIRONMENTREGIONCODE_NA EnvironmentRegionCode = "NA"
	ENVIRONMENTREGIONCODE_SG EnvironmentRegionCode = "SG"
)

// All allowed values of EnvironmentRegionCode enum
var AllowedEnvironmentRegionCodeEnumValues = []EnvironmentRegionCode{
	"AP",
	"AU",
	"CA",
	"EU",
	"NA",
	"SG",
}

func (v *EnvironmentRegionCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentRegionCode(value)
	for _, existing := range AllowedEnvironmentRegionCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentRegionCode(fmt.Sprintf("%s", value))
	return nil
}

// NewEnvironmentRegionCodeFromValue returns a pointer to a valid EnvironmentRegionCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentRegionCodeFromValue(v string) (*EnvironmentRegionCode, error) {
	ev := EnvironmentRegionCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentRegionCode: valid values are %v", v, AllowedEnvironmentRegionCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentRegionCode) IsValid() bool {
	for _, existing := range AllowedEnvironmentRegionCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnvironmentRegionCode value
func (v EnvironmentRegionCode) Ptr() *EnvironmentRegionCode {
	return &v
}

type NullableEnvironmentRegionCode struct {
	value *EnvironmentRegionCode
	isSet bool
}

func (v NullableEnvironmentRegionCode) Get() *EnvironmentRegionCode {
	return v.value
}

func (v *NullableEnvironmentRegionCode) Set(val *EnvironmentRegionCode) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentRegionCode) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentRegionCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentRegionCode(val *EnvironmentRegionCode) *NullableEnvironmentRegionCode {
	return &NullableEnvironmentRegionCode{value: val, isSet: true}
}

func (v NullableEnvironmentRegionCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentRegionCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
