// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciConnectorDetailsResponseCredentialsView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorDetailsResponseCredentialsView{}

// checks if the DaVinciConnectorDetailsResponseCredentialsView type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorDetailsResponseCredentialsView{}

// DaVinciConnectorDetailsResponseCredentialsView struct for DaVinciConnectorDetailsResponseCredentialsView
type DaVinciConnectorDetailsResponseCredentialsView struct {
	Items                []map[string]interface{} `json:"items"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorDetailsResponseCredentialsView DaVinciConnectorDetailsResponseCredentialsView

// NewDaVinciConnectorDetailsResponseCredentialsView instantiates a new DaVinciConnectorDetailsResponseCredentialsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorDetailsResponseCredentialsView(items []map[string]interface{}) *DaVinciConnectorDetailsResponseCredentialsView {
	this := DaVinciConnectorDetailsResponseCredentialsView{}
	this.Items = items
	return &this
}

// NewDaVinciConnectorDetailsResponseCredentialsViewWithDefaults instantiates a new DaVinciConnectorDetailsResponseCredentialsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorDetailsResponseCredentialsViewWithDefaults() *DaVinciConnectorDetailsResponseCredentialsView {
	this := DaVinciConnectorDetailsResponseCredentialsView{}
	return &this
}

// GetItems returns the Items field value
func (o *DaVinciConnectorDetailsResponseCredentialsView) GetItems() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponseCredentialsView) GetItemsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *DaVinciConnectorDetailsResponseCredentialsView) SetItems(v []map[string]interface{}) {
	o.Items = v
}

func (o DaVinciConnectorDetailsResponseCredentialsView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorDetailsResponseCredentialsView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorDetailsResponseCredentialsView) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorDetailsResponseCredentialsView := _DaVinciConnectorDetailsResponseCredentialsView{}

	err = json.Unmarshal(data, &varDaVinciConnectorDetailsResponseCredentialsView)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorDetailsResponseCredentialsView(varDaVinciConnectorDetailsResponseCredentialsView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorDetailsResponseCredentialsView) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("items", o.Items))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorDetailsResponseCredentialsView struct {
	value *DaVinciConnectorDetailsResponseCredentialsView
	isSet bool
}

func (v NullableDaVinciConnectorDetailsResponseCredentialsView) Get() *DaVinciConnectorDetailsResponseCredentialsView {
	return v.value
}

func (v *NullableDaVinciConnectorDetailsResponseCredentialsView) Set(val *DaVinciConnectorDetailsResponseCredentialsView) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorDetailsResponseCredentialsView) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorDetailsResponseCredentialsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorDetailsResponseCredentialsView(val *DaVinciConnectorDetailsResponseCredentialsView) *NullableDaVinciConnectorDetailsResponseCredentialsView {
	return &NullableDaVinciConnectorDetailsResponseCredentialsView{value: val, isSet: true}
}

func (v NullableDaVinciConnectorDetailsResponseCredentialsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorDetailsResponseCredentialsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
