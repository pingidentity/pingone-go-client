// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowVersionAliasResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionAliasResponse{}

// checks if the DaVinciFlowVersionAliasResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionAliasResponse{}

// DaVinciFlowVersionAliasResponse struct for DaVinciFlowVersionAliasResponse
type DaVinciFlowVersionAliasResponse struct {
	Links                DaVinciFlowVersionAliasResponseLinks `json:"_links"`
	Alias                string                               `json:"alias"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowVersionAliasResponse DaVinciFlowVersionAliasResponse

// NewDaVinciFlowVersionAliasResponse instantiates a new DaVinciFlowVersionAliasResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionAliasResponse(links DaVinciFlowVersionAliasResponseLinks, alias string) *DaVinciFlowVersionAliasResponse {
	this := DaVinciFlowVersionAliasResponse{}
	this.Links = links
	this.Alias = alias
	return &this
}

// NewDaVinciFlowVersionAliasResponseWithDefaults instantiates a new DaVinciFlowVersionAliasResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionAliasResponseWithDefaults() *DaVinciFlowVersionAliasResponse {
	this := DaVinciFlowVersionAliasResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciFlowVersionAliasResponse) GetLinks() DaVinciFlowVersionAliasResponseLinks {
	if o == nil {
		var ret DaVinciFlowVersionAliasResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionAliasResponse) GetLinksOk() (*DaVinciFlowVersionAliasResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciFlowVersionAliasResponse) SetLinks(v DaVinciFlowVersionAliasResponseLinks) {
	o.Links = v
}

// GetAlias returns the Alias field value
func (o *DaVinciFlowVersionAliasResponse) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionAliasResponse) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *DaVinciFlowVersionAliasResponse) SetAlias(v string) {
	o.Alias = v
}

func (o DaVinciFlowVersionAliasResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionAliasResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["alias"] = o.Alias

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionAliasResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"alias",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowVersionAliasResponse := _DaVinciFlowVersionAliasResponse{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionAliasResponse)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionAliasResponse(varDaVinciFlowVersionAliasResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "alias")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionAliasResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("alias", o.Alias))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionAliasResponse struct {
	value *DaVinciFlowVersionAliasResponse
	isSet bool
}

func (v NullableDaVinciFlowVersionAliasResponse) Get() *DaVinciFlowVersionAliasResponse {
	return v.value
}

func (v *NullableDaVinciFlowVersionAliasResponse) Set(val *DaVinciFlowVersionAliasResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionAliasResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionAliasResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionAliasResponse(val *DaVinciFlowVersionAliasResponse) *NullableDaVinciFlowVersionAliasResponse {
	return &NullableDaVinciFlowVersionAliasResponse{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionAliasResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionAliasResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
