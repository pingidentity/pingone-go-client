// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyResponseTriggerConfigurationPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyResponseTriggerConfigurationPassword{}

// checks if the DaVinciFlowPolicyResponseTriggerConfigurationPassword type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyResponseTriggerConfigurationPassword{}

// DaVinciFlowPolicyResponseTriggerConfigurationPassword struct for DaVinciFlowPolicyResponseTriggerConfigurationPassword
type DaVinciFlowPolicyResponseTriggerConfigurationPassword struct {
	Enabled              bool    `json:"enabled"`
	Time                 float32 `json:"time"`
	TimeFormat           string  `json:"timeFormat"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyResponseTriggerConfigurationPassword DaVinciFlowPolicyResponseTriggerConfigurationPassword

// NewDaVinciFlowPolicyResponseTriggerConfigurationPassword instantiates a new DaVinciFlowPolicyResponseTriggerConfigurationPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyResponseTriggerConfigurationPassword(enabled bool, time float32, timeFormat string) *DaVinciFlowPolicyResponseTriggerConfigurationPassword {
	this := DaVinciFlowPolicyResponseTriggerConfigurationPassword{}
	this.Enabled = enabled
	this.Time = time
	this.TimeFormat = timeFormat
	return &this
}

// NewDaVinciFlowPolicyResponseTriggerConfigurationPasswordWithDefaults instantiates a new DaVinciFlowPolicyResponseTriggerConfigurationPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyResponseTriggerConfigurationPasswordWithDefaults() *DaVinciFlowPolicyResponseTriggerConfigurationPassword {
	this := DaVinciFlowPolicyResponseTriggerConfigurationPassword{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTime returns the Time field value
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) GetTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) GetTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) SetTime(v float32) {
	o.Time = v
}

// GetTimeFormat returns the TimeFormat field value
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) GetTimeFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) GetTimeFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeFormat, true
}

// SetTimeFormat sets field value
func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) SetTimeFormat(v string) {
	o.TimeFormat = v
}

func (o DaVinciFlowPolicyResponseTriggerConfigurationPassword) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyResponseTriggerConfigurationPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["time"] = o.Time
	toSerialize["timeFormat"] = o.TimeFormat

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyResponseTriggerConfigurationPassword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"time",
		"timeFormat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyResponseTriggerConfigurationPassword := _DaVinciFlowPolicyResponseTriggerConfigurationPassword{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyResponseTriggerConfigurationPassword)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyResponseTriggerConfigurationPassword(varDaVinciFlowPolicyResponseTriggerConfigurationPassword)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "time")
		delete(additionalProperties, "timeFormat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyResponseTriggerConfigurationPassword) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("enabled", o.Enabled))
	logAttrs = append(logAttrs, slog.Any("time", o.Time))
	logAttrs = append(logAttrs, slog.Any("timeFormat", o.TimeFormat))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword struct {
	value *DaVinciFlowPolicyResponseTriggerConfigurationPassword
	isSet bool
}

func (v NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword) Get() *DaVinciFlowPolicyResponseTriggerConfigurationPassword {
	return v.value
}

func (v *NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword) Set(val *DaVinciFlowPolicyResponseTriggerConfigurationPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyResponseTriggerConfigurationPassword(val *DaVinciFlowPolicyResponseTriggerConfigurationPassword) *NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword {
	return &NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyResponseTriggerConfigurationPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
