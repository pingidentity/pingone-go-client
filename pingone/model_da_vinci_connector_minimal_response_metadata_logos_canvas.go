// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciConnectorMinimalResponseMetadataLogosCanvas type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorMinimalResponseMetadataLogosCanvas{}

// checks if the DaVinciConnectorMinimalResponseMetadataLogosCanvas type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorMinimalResponseMetadataLogosCanvas{}

// DaVinciConnectorMinimalResponseMetadataLogosCanvas struct for DaVinciConnectorMinimalResponseMetadataLogosCanvas
type DaVinciConnectorMinimalResponseMetadataLogosCanvas struct {
	ImageFileName        *string `json:"imageFileName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorMinimalResponseMetadataLogosCanvas DaVinciConnectorMinimalResponseMetadataLogosCanvas

// NewDaVinciConnectorMinimalResponseMetadataLogosCanvas instantiates a new DaVinciConnectorMinimalResponseMetadataLogosCanvas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorMinimalResponseMetadataLogosCanvas() *DaVinciConnectorMinimalResponseMetadataLogosCanvas {
	this := DaVinciConnectorMinimalResponseMetadataLogosCanvas{}
	return &this
}

// NewDaVinciConnectorMinimalResponseMetadataLogosCanvasWithDefaults instantiates a new DaVinciConnectorMinimalResponseMetadataLogosCanvas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorMinimalResponseMetadataLogosCanvasWithDefaults() *DaVinciConnectorMinimalResponseMetadataLogosCanvas {
	this := DaVinciConnectorMinimalResponseMetadataLogosCanvas{}
	return &this
}

// GetImageFileName returns the ImageFileName field value if set, zero value otherwise.
func (o *DaVinciConnectorMinimalResponseMetadataLogosCanvas) GetImageFileName() string {
	if o == nil || IsNil(o.ImageFileName) {
		var ret string
		return ret
	}
	return *o.ImageFileName
}

// GetImageFileNameOk returns a tuple with the ImageFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponseMetadataLogosCanvas) GetImageFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageFileName) {
		return nil, false
	}
	return o.ImageFileName, true
}

// HasImageFileName returns a boolean if a field has been set.
func (o *DaVinciConnectorMinimalResponseMetadataLogosCanvas) HasImageFileName() bool {
	if o != nil && !IsNil(o.ImageFileName) {
		return true
	}

	return false
}

// SetImageFileName gets a reference to the given string and assigns it to the ImageFileName field.
func (o *DaVinciConnectorMinimalResponseMetadataLogosCanvas) SetImageFileName(v string) {
	o.ImageFileName = &v
}

func (o DaVinciConnectorMinimalResponseMetadataLogosCanvas) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorMinimalResponseMetadataLogosCanvas) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageFileName) {
		toSerialize["imageFileName"] = o.ImageFileName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorMinimalResponseMetadataLogosCanvas) UnmarshalJSON(data []byte) (err error) {
	varDaVinciConnectorMinimalResponseMetadataLogosCanvas := _DaVinciConnectorMinimalResponseMetadataLogosCanvas{}

	err = json.Unmarshal(data, &varDaVinciConnectorMinimalResponseMetadataLogosCanvas)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorMinimalResponseMetadataLogosCanvas(varDaVinciConnectorMinimalResponseMetadataLogosCanvas)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "imageFileName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorMinimalResponseMetadataLogosCanvas) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.ImageFileName) {
		logAttrs = append(logAttrs, slog.Any("imageFileName", *o.ImageFileName))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas struct {
	value *DaVinciConnectorMinimalResponseMetadataLogosCanvas
	isSet bool
}

func (v NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas) Get() *DaVinciConnectorMinimalResponseMetadataLogosCanvas {
	return v.value
}

func (v *NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas) Set(val *DaVinciConnectorMinimalResponseMetadataLogosCanvas) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorMinimalResponseMetadataLogosCanvas(val *DaVinciConnectorMinimalResponseMetadataLogosCanvas) *NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas {
	return &NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas{value: val, isSet: true}
}

func (v NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorMinimalResponseMetadataLogosCanvas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
