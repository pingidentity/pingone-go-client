// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the SnapshotVersionCollectionResponseEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotVersionCollectionResponseEmbedded{}

// checks if the SnapshotVersionCollectionResponseEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &SnapshotVersionCollectionResponseEmbedded{}

// SnapshotVersionCollectionResponseEmbedded struct for SnapshotVersionCollectionResponseEmbedded
type SnapshotVersionCollectionResponseEmbedded struct {
	Versions             []SnapshotView `json:"versions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnapshotVersionCollectionResponseEmbedded SnapshotVersionCollectionResponseEmbedded

// NewSnapshotVersionCollectionResponseEmbedded instantiates a new SnapshotVersionCollectionResponseEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotVersionCollectionResponseEmbedded() *SnapshotVersionCollectionResponseEmbedded {
	this := SnapshotVersionCollectionResponseEmbedded{}
	return &this
}

// NewSnapshotVersionCollectionResponseEmbeddedWithDefaults instantiates a new SnapshotVersionCollectionResponseEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotVersionCollectionResponseEmbeddedWithDefaults() *SnapshotVersionCollectionResponseEmbedded {
	this := SnapshotVersionCollectionResponseEmbedded{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *SnapshotVersionCollectionResponseEmbedded) GetVersions() []SnapshotView {
	if o == nil || IsNil(o.Versions) {
		var ret []SnapshotView
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotVersionCollectionResponseEmbedded) GetVersionsOk() ([]SnapshotView, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *SnapshotVersionCollectionResponseEmbedded) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []SnapshotView and assigns it to the Versions field.
func (o *SnapshotVersionCollectionResponseEmbedded) SetVersions(v []SnapshotView) {
	o.Versions = v
}

func (o SnapshotVersionCollectionResponseEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotVersionCollectionResponseEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnapshotVersionCollectionResponseEmbedded) UnmarshalJSON(data []byte) (err error) {
	varSnapshotVersionCollectionResponseEmbedded := _SnapshotVersionCollectionResponseEmbedded{}

	err = json.Unmarshal(data, &varSnapshotVersionCollectionResponseEmbedded)

	if err != nil {
		return err
	}

	*o = SnapshotVersionCollectionResponseEmbedded(varSnapshotVersionCollectionResponseEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "versions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o SnapshotVersionCollectionResponseEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Versions) {
		logAttrs = append(logAttrs, slog.Any("versions", o.Versions))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableSnapshotVersionCollectionResponseEmbedded struct {
	value *SnapshotVersionCollectionResponseEmbedded
	isSet bool
}

func (v NullableSnapshotVersionCollectionResponseEmbedded) Get() *SnapshotVersionCollectionResponseEmbedded {
	return v.value
}

func (v *NullableSnapshotVersionCollectionResponseEmbedded) Set(val *SnapshotVersionCollectionResponseEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotVersionCollectionResponseEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotVersionCollectionResponseEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotVersionCollectionResponseEmbedded(val *SnapshotVersionCollectionResponseEmbedded) *NullableSnapshotVersionCollectionResponseEmbedded {
	return &NullableSnapshotVersionCollectionResponseEmbedded{value: val, isSet: true}
}

func (v NullableSnapshotVersionCollectionResponseEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotVersionCollectionResponseEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
