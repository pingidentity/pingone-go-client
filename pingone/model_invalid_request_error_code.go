// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// InvalidRequestErrorCode the model 'InvalidRequestErrorCode'
type InvalidRequestErrorCode string

// List of Invalid_Request_Error_Code
const (
	INVALIDREQUESTERRORCODE_INVALID_REQUEST InvalidRequestErrorCode = "INVALID_REQUEST"
)

// All allowed values of InvalidRequestErrorCode enum
var AllowedInvalidRequestErrorCodeEnumValues = []InvalidRequestErrorCode{
	"INVALID_REQUEST",
}

func (v *InvalidRequestErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvalidRequestErrorCode(value)
	for _, existing := range AllowedInvalidRequestErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = InvalidRequestErrorCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewInvalidRequestErrorCodeFromValue returns a pointer to a valid InvalidRequestErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvalidRequestErrorCodeFromValue(v string) (*InvalidRequestErrorCode, error) {
	ev := InvalidRequestErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvalidRequestErrorCode: valid values are %v", v, AllowedInvalidRequestErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvalidRequestErrorCode) IsValid() bool {
	for _, existing := range AllowedInvalidRequestErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Invalid_Request_Error_Code value
func (v InvalidRequestErrorCode) Ptr() *InvalidRequestErrorCode {
	return &v
}

type NullableInvalidRequestErrorCode struct {
	value *InvalidRequestErrorCode
	isSet bool
}

func (v NullableInvalidRequestErrorCode) Get() *InvalidRequestErrorCode {
	return v.value
}

func (v *NullableInvalidRequestErrorCode) Set(val *InvalidRequestErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidRequestErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidRequestErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidRequestErrorCode(val *InvalidRequestErrorCode) *NullableInvalidRequestErrorCode {
	return &NullableInvalidRequestErrorCode{value: val, isSet: true}
}

func (v NullableInvalidRequestErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidRequestErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
