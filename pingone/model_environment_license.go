// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"

	"github.com/google/uuid"
)

// checks if the EnvironmentLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentLicense{}

// checks if the EnvironmentLicense type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentLicense{}

// EnvironmentLicense struct for EnvironmentLicense
type EnvironmentLicense struct {
	Id                   uuid.UUID `json:"id"`
	Package              *string   `json:"package,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentLicense EnvironmentLicense

// NewEnvironmentLicense instantiates a new EnvironmentLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentLicense(id uuid.UUID) *EnvironmentLicense {
	this := EnvironmentLicense{}
	this.Id = id
	return &this
}

// NewEnvironmentLicenseWithDefaults instantiates a new EnvironmentLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentLicenseWithDefaults() *EnvironmentLicense {
	this := EnvironmentLicense{}
	return &this
}

// GetId returns the Id field value
func (o *EnvironmentLicense) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentLicense) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentLicense) SetId(v uuid.UUID) {
	o.Id = v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *EnvironmentLicense) GetPackage() string {
	if o == nil || IsNil(o.Package) {
		var ret string
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentLicense) GetPackageOk() (*string, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *EnvironmentLicense) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given string and assigns it to the Package field.
func (o *EnvironmentLicense) SetPackage(v string) {
	o.Package = &v
}

func (o EnvironmentLicense) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentLicense) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentLicense := _EnvironmentLicense{}

	err = json.Unmarshal(data, &varEnvironmentLicense)

	if err != nil {
		return err
	}

	*o = EnvironmentLicense(varEnvironmentLicense)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "package")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentLicense) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	if !IsNil(o.Package) {
		logAttrs = append(logAttrs, slog.Any("package", *o.Package))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentLicense struct {
	value *EnvironmentLicense
	isSet bool
}

func (v NullableEnvironmentLicense) Get() *EnvironmentLicense {
	return v.value
}

func (v *NullableEnvironmentLicense) Set(val *EnvironmentLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentLicense(val *EnvironmentLicense) *NullableEnvironmentLicense {
	return &NullableEnvironmentLicense{value: val, isSet: true}
}

func (v NullableEnvironmentLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
