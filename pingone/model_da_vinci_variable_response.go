// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"

	"github.com/google/uuid"
)

// checks if the DaVinciVariableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciVariableResponse{}

// checks if the DaVinciVariableResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciVariableResponse{}

// DaVinciVariableResponse struct for DaVinciVariableResponse
type DaVinciVariableResponse struct {
	Links                DaVinciVariableResponseLinks         `json:"_links"`
	DataType             DaVinciVariableResponseDataType      `json:"dataType"`
	Environment          ResourceRelationshipReadOnly         `json:"environment"`
	Id                   uuid.UUID                            `json:"id"`
	Name                 string                               `json:"name"`
	Context              *string                              `json:"context,omitempty"`
	CreatedAt            *time.Time                           `json:"createdAt,omitempty"`
	DisplayName          *string                              `json:"displayName,omitempty"`
	Flow                 *ResourceRelationshipDaVinciReadOnly `json:"flow,omitempty"`
	Max                  *float32                             `json:"max,omitempty"`
	Min                  *float32                             `json:"min,omitempty"`
	Mutable              *bool                                `json:"mutable,omitempty"`
	UpdatedAt            *time.Time                           `json:"updatedAt,omitempty"`
	Value                *DaVinciVariableResponseValue        `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciVariableResponse DaVinciVariableResponse

// NewDaVinciVariableResponse instantiates a new DaVinciVariableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciVariableResponse(links DaVinciVariableResponseLinks, dataType DaVinciVariableResponseDataType, environment ResourceRelationshipReadOnly, id uuid.UUID, name string) *DaVinciVariableResponse {
	this := DaVinciVariableResponse{}
	this.Links = links
	this.DataType = dataType
	this.Environment = environment
	this.Id = id
	this.Name = name
	return &this
}

// NewDaVinciVariableResponseWithDefaults instantiates a new DaVinciVariableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciVariableResponseWithDefaults() *DaVinciVariableResponse {
	this := DaVinciVariableResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciVariableResponse) GetLinks() DaVinciVariableResponseLinks {
	if o == nil {
		var ret DaVinciVariableResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetLinksOk() (*DaVinciVariableResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciVariableResponse) SetLinks(v DaVinciVariableResponseLinks) {
	o.Links = v
}

// GetDataType returns the DataType field value
func (o *DaVinciVariableResponse) GetDataType() DaVinciVariableResponseDataType {
	if o == nil {
		var ret DaVinciVariableResponseDataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetDataTypeOk() (*DaVinciVariableResponseDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *DaVinciVariableResponse) SetDataType(v DaVinciVariableResponseDataType) {
	o.DataType = v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciVariableResponse) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciVariableResponse) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DaVinciVariableResponse) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciVariableResponse) SetId(v uuid.UUID) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DaVinciVariableResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciVariableResponse) SetName(v string) {
	o.Name = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *DaVinciVariableResponse) SetContext(v string) {
	o.Context = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciVariableResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DaVinciVariableResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetFlow() ResourceRelationshipDaVinciReadOnly {
	if o == nil || IsNil(o.Flow) {
		var ret ResourceRelationshipDaVinciReadOnly
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetFlowOk() (*ResourceRelationshipDaVinciReadOnly, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given ResourceRelationshipDaVinciReadOnly and assigns it to the Flow field.
func (o *DaVinciVariableResponse) SetFlow(v ResourceRelationshipDaVinciReadOnly) {
	o.Flow = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetMax() float32 {
	if o == nil || IsNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *DaVinciVariableResponse) SetMax(v float32) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *DaVinciVariableResponse) SetMin(v float32) {
	o.Min = &v
}

// GetMutable returns the Mutable field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetMutable() bool {
	if o == nil || IsNil(o.Mutable) {
		var ret bool
		return ret
	}
	return *o.Mutable
}

// GetMutableOk returns a tuple with the Mutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetMutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Mutable) {
		return nil, false
	}
	return o.Mutable, true
}

// HasMutable returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasMutable() bool {
	if o != nil && !IsNil(o.Mutable) {
		return true
	}

	return false
}

// SetMutable gets a reference to the given bool and assigns it to the Mutable field.
func (o *DaVinciVariableResponse) SetMutable(v bool) {
	o.Mutable = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciVariableResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DaVinciVariableResponse) GetValue() DaVinciVariableResponseValue {
	if o == nil || IsNil(o.Value) {
		var ret DaVinciVariableResponseValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableResponse) GetValueOk() (*DaVinciVariableResponseValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DaVinciVariableResponse) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given DaVinciVariableResponseValue and assigns it to the Value field.
func (o *DaVinciVariableResponse) SetValue(v DaVinciVariableResponseValue) {
	o.Value = &v
}

func (o DaVinciVariableResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciVariableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["dataType"] = o.DataType
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Mutable) {
		toSerialize["mutable"] = o.Mutable
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciVariableResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"dataType",
		"environment",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciVariableResponse := _DaVinciVariableResponse{}

	err = json.Unmarshal(data, &varDaVinciVariableResponse)

	if err != nil {
		return err
	}

	*o = DaVinciVariableResponse(varDaVinciVariableResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "dataType")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "context")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "max")
		delete(additionalProperties, "min")
		delete(additionalProperties, "mutable")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciVariableResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("dataType", o.DataType))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.Context) {
		logAttrs = append(logAttrs, slog.Any("context", *o.Context))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.DisplayName) {
		logAttrs = append(logAttrs, slog.Any("displayName", *o.DisplayName))
	}
	if !IsNil(o.Flow) {
		logAttrs = append(logAttrs, slog.Any("flow", *o.Flow))
	}
	if !IsNil(o.Max) {
		logAttrs = append(logAttrs, slog.Any("max", *o.Max))
	}
	if !IsNil(o.Min) {
		logAttrs = append(logAttrs, slog.Any("min", *o.Min))
	}
	if !IsNil(o.Mutable) {
		logAttrs = append(logAttrs, slog.Any("mutable", *o.Mutable))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	if !IsNil(o.Value) {
		logAttrs = append(logAttrs, slog.Any("value", *o.Value))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciVariableResponse struct {
	value *DaVinciVariableResponse
	isSet bool
}

func (v NullableDaVinciVariableResponse) Get() *DaVinciVariableResponse {
	return v.value
}

func (v *NullableDaVinciVariableResponse) Set(val *DaVinciVariableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableResponse(val *DaVinciVariableResponse) *NullableDaVinciVariableResponse {
	return &NullableDaVinciVariableResponse{value: val, isSet: true}
}

func (v NullableDaVinciVariableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
