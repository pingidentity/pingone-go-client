// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DavinciConnectorInstanceCollectionEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorInstanceCollectionEmbedded{}

// checks if the DavinciConnectorInstanceCollectionEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorInstanceCollectionEmbedded{}

// DavinciConnectorInstanceCollectionEmbedded struct for DavinciConnectorInstanceCollectionEmbedded
type DavinciConnectorInstanceCollectionEmbedded struct {
	ConnectorInstances   []DavinciConnectorInstance `json:"connectorInstances"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorInstanceCollectionEmbedded DavinciConnectorInstanceCollectionEmbedded

// NewDavinciConnectorInstanceCollectionEmbedded instantiates a new DavinciConnectorInstanceCollectionEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorInstanceCollectionEmbedded(connectorInstances []DavinciConnectorInstance) *DavinciConnectorInstanceCollectionEmbedded {
	this := DavinciConnectorInstanceCollectionEmbedded{}
	this.ConnectorInstances = connectorInstances
	return &this
}

// NewDavinciConnectorInstanceCollectionEmbeddedWithDefaults instantiates a new DavinciConnectorInstanceCollectionEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorInstanceCollectionEmbeddedWithDefaults() *DavinciConnectorInstanceCollectionEmbedded {
	this := DavinciConnectorInstanceCollectionEmbedded{}
	return &this
}

// GetConnectorInstances returns the ConnectorInstances field value
func (o *DavinciConnectorInstanceCollectionEmbedded) GetConnectorInstances() []DavinciConnectorInstance {
	if o == nil {
		var ret []DavinciConnectorInstance
		return ret
	}

	return o.ConnectorInstances
}

// GetConnectorInstancesOk returns a tuple with the ConnectorInstances field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorInstanceCollectionEmbedded) GetConnectorInstancesOk() ([]DavinciConnectorInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorInstances, true
}

// SetConnectorInstances sets field value
func (o *DavinciConnectorInstanceCollectionEmbedded) SetConnectorInstances(v []DavinciConnectorInstance) {
	o.ConnectorInstances = v
}

func (o DavinciConnectorInstanceCollectionEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorInstanceCollectionEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorInstances"] = o.ConnectorInstances

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorInstanceCollectionEmbedded) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorInstances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDavinciConnectorInstanceCollectionEmbedded := _DavinciConnectorInstanceCollectionEmbedded{}

	err = json.Unmarshal(data, &varDavinciConnectorInstanceCollectionEmbedded)

	if err != nil {
		return err
	}

	*o = DavinciConnectorInstanceCollectionEmbedded(varDavinciConnectorInstanceCollectionEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectorInstances")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorInstanceCollectionEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("connectorInstances", o.ConnectorInstances))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorInstanceCollectionEmbedded struct {
	value *DavinciConnectorInstanceCollectionEmbedded
	isSet bool
}

func (v NullableDavinciConnectorInstanceCollectionEmbedded) Get() *DavinciConnectorInstanceCollectionEmbedded {
	return v.value
}

func (v *NullableDavinciConnectorInstanceCollectionEmbedded) Set(val *DavinciConnectorInstanceCollectionEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorInstanceCollectionEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorInstanceCollectionEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorInstanceCollectionEmbedded(val *DavinciConnectorInstanceCollectionEmbedded) *NullableDavinciConnectorInstanceCollectionEmbedded {
	return &NullableDavinciConnectorInstanceCollectionEmbedded{value: val, isSet: true}
}

func (v NullableDavinciConnectorInstanceCollectionEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorInstanceCollectionEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
