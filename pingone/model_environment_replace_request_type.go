// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentReplaceRequestType the model 'EnvironmentReplaceRequestType'
type EnvironmentReplaceRequestType string

// List of Environment_Replace_Request_Type
const (
	ENVIRONMENTREPLACEREQUESTTYPE_PRODUCTION EnvironmentReplaceRequestType = "PRODUCTION"
	ENVIRONMENTREPLACEREQUESTTYPE_SANDBOX    EnvironmentReplaceRequestType = "SANDBOX"
)

// All allowed values of EnvironmentReplaceRequestType enum
var AllowedEnvironmentReplaceRequestTypeEnumValues = []EnvironmentReplaceRequestType{
	"PRODUCTION",
	"SANDBOX",
}

func (v *EnvironmentReplaceRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentReplaceRequestType(value)
	for _, existing := range AllowedEnvironmentReplaceRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentReplaceRequestType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentReplaceRequestTypeFromValue returns a pointer to a valid EnvironmentReplaceRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentReplaceRequestTypeFromValue(v string) (*EnvironmentReplaceRequestType, error) {
	ev := EnvironmentReplaceRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentReplaceRequestType: valid values are %v", v, AllowedEnvironmentReplaceRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentReplaceRequestType) IsValid() bool {
	for _, existing := range AllowedEnvironmentReplaceRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Replace_Request_Type value
func (v EnvironmentReplaceRequestType) Ptr() *EnvironmentReplaceRequestType {
	return &v
}

type NullableEnvironmentReplaceRequestType struct {
	value *EnvironmentReplaceRequestType
	isSet bool
}

func (v NullableEnvironmentReplaceRequestType) Get() *EnvironmentReplaceRequestType {
	return v.value
}

func (v *NullableEnvironmentReplaceRequestType) Set(val *EnvironmentReplaceRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentReplaceRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentReplaceRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentReplaceRequestType(val *EnvironmentReplaceRequestType) *NullableEnvironmentReplaceRequestType {
	return &NullableEnvironmentReplaceRequestType{value: val, isSet: true}
}

func (v NullableEnvironmentReplaceRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentReplaceRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
