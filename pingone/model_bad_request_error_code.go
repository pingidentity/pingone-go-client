// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// BadRequestErrorCode the model 'BadRequestErrorCode'
type BadRequestErrorCode string

// List of Bad_Request_Error_Code
const (
	BADREQUESTERRORCODE_INVALID_DATA    BadRequestErrorCode = "INVALID_DATA"
	BADREQUESTERRORCODE_INVALID_REQUEST BadRequestErrorCode = "INVALID_REQUEST"
	BADREQUESTERRORCODE_REQUEST_FAILED  BadRequestErrorCode = "REQUEST_FAILED"
)

// All allowed values of BadRequestErrorCode enum
var AllowedBadRequestErrorCodeEnumValues = []BadRequestErrorCode{
	"INVALID_DATA",
	"INVALID_REQUEST",
	"REQUEST_FAILED",
}

func (v *BadRequestErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BadRequestErrorCode(value)
	for _, existing := range AllowedBadRequestErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = BadRequestErrorCode(fmt.Sprintf("%s", value))
	return nil
}

// NewBadRequestErrorCodeFromValue returns a pointer to a valid BadRequestErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBadRequestErrorCodeFromValue(v string) (*BadRequestErrorCode, error) {
	ev := BadRequestErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BadRequestErrorCode: valid values are %v", v, AllowedBadRequestErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BadRequestErrorCode) IsValid() bool {
	for _, existing := range AllowedBadRequestErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Bad_Request_Error_Code value
func (v BadRequestErrorCode) Ptr() *BadRequestErrorCode {
	return &v
}

type NullableBadRequestErrorCode struct {
	value *BadRequestErrorCode
	isSet bool
}

func (v NullableBadRequestErrorCode) Get() *BadRequestErrorCode {
	return v.value
}

func (v *NullableBadRequestErrorCode) Set(val *BadRequestErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableBadRequestErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableBadRequestErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadRequestErrorCode(val *BadRequestErrorCode) *NullableBadRequestErrorCode {
	return &NullableBadRequestErrorCode{value: val, isSet: true}
}

func (v NullableBadRequestErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadRequestErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
