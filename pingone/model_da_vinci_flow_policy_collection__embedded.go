// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyCollectionEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyCollectionEmbedded{}

// checks if the DaVinciFlowPolicyCollectionEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyCollectionEmbedded{}

// DaVinciFlowPolicyCollectionEmbedded struct for DaVinciFlowPolicyCollectionEmbedded
type DaVinciFlowPolicyCollectionEmbedded struct {
	FlowPolicies         []DaVinciFlowPolicyResponse `json:"flowPolicies"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyCollectionEmbedded DaVinciFlowPolicyCollectionEmbedded

// NewDaVinciFlowPolicyCollectionEmbedded instantiates a new DaVinciFlowPolicyCollectionEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyCollectionEmbedded(flowPolicies []DaVinciFlowPolicyResponse) *DaVinciFlowPolicyCollectionEmbedded {
	this := DaVinciFlowPolicyCollectionEmbedded{}
	this.FlowPolicies = flowPolicies
	return &this
}

// NewDaVinciFlowPolicyCollectionEmbeddedWithDefaults instantiates a new DaVinciFlowPolicyCollectionEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyCollectionEmbeddedWithDefaults() *DaVinciFlowPolicyCollectionEmbedded {
	this := DaVinciFlowPolicyCollectionEmbedded{}
	return &this
}

// GetFlowPolicies returns the FlowPolicies field value
func (o *DaVinciFlowPolicyCollectionEmbedded) GetFlowPolicies() []DaVinciFlowPolicyResponse {
	if o == nil {
		var ret []DaVinciFlowPolicyResponse
		return ret
	}

	return o.FlowPolicies
}

// GetFlowPoliciesOk returns a tuple with the FlowPolicies field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCollectionEmbedded) GetFlowPoliciesOk() ([]DaVinciFlowPolicyResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlowPolicies, true
}

// SetFlowPolicies sets field value
func (o *DaVinciFlowPolicyCollectionEmbedded) SetFlowPolicies(v []DaVinciFlowPolicyResponse) {
	o.FlowPolicies = v
}

func (o DaVinciFlowPolicyCollectionEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyCollectionEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flowPolicies"] = o.FlowPolicies

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyCollectionEmbedded) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flowPolicies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyCollectionEmbedded := _DaVinciFlowPolicyCollectionEmbedded{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyCollectionEmbedded)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyCollectionEmbedded(varDaVinciFlowPolicyCollectionEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "flowPolicies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyCollectionEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("flowPolicies", o.FlowPolicies))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyCollectionEmbedded struct {
	value *DaVinciFlowPolicyCollectionEmbedded
	isSet bool
}

func (v NullableDaVinciFlowPolicyCollectionEmbedded) Get() *DaVinciFlowPolicyCollectionEmbedded {
	return v.value
}

func (v *NullableDaVinciFlowPolicyCollectionEmbedded) Set(val *DaVinciFlowPolicyCollectionEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyCollectionEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyCollectionEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyCollectionEmbedded(val *DaVinciFlowPolicyCollectionEmbedded) *NullableDaVinciFlowPolicyCollectionEmbedded {
	return &NullableDaVinciFlowPolicyCollectionEmbedded{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyCollectionEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyCollectionEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
