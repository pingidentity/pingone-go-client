// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
	"time"

	"github.com/google/uuid"
)

// checks if the SnapshotView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotView{}

// checks if the SnapshotView type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &SnapshotView{}

// SnapshotView struct for SnapshotView
type SnapshotView struct {
	Embedded             map[string]map[string]interface{} `json:"_embedded,omitempty"`
	Links                *SnapshotViewLinks                `json:"_links,omitempty"`
	CompletedAt          *time.Time                        `json:"completedAt,omitempty"`
	Configuration        *string                           `json:"configuration,omitempty"`
	CreatedAt            *time.Time                        `json:"createdAt,omitempty"`
	Environment          *ResourceRelationshipReadOnly     `json:"environment,omitempty"`
	Error                *string                           `json:"error,omitempty"`
	Id                   *uuid.UUID                        `json:"id,omitempty"`
	ImportMetadata       map[string]map[string]interface{} `json:"importMetadata,omitempty"`
	ReferencedResources  []string                          `json:"referencedResources,omitempty"`
	Resource             *SnapshotResourceInformation      `json:"resource,omitempty"`
	ResourceUrl          *string                           `json:"resourceUrl,omitempty"`
	SnapshotId           *uuid.UUID                        `json:"snapshotId,omitempty"`
	StartedAt            *time.Time                        `json:"startedAt,omitempty"`
	Status               *SnapshotViewStatus               `json:"status,omitempty"`
	VersionedAt          *time.Time                        `json:"versionedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnapshotView SnapshotView

// NewSnapshotView instantiates a new SnapshotView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotView() *SnapshotView {
	this := SnapshotView{}
	return &this
}

// NewSnapshotViewWithDefaults instantiates a new SnapshotView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotViewWithDefaults() *SnapshotView {
	this := SnapshotView{}
	return &this
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *SnapshotView) GetEmbedded() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Embedded) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetEmbeddedOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Embedded) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *SnapshotView) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given map[string]map[string]interface{} and assigns it to the Embedded field.
func (o *SnapshotView) SetEmbedded(v map[string]map[string]interface{}) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SnapshotView) GetLinks() SnapshotViewLinks {
	if o == nil || IsNil(o.Links) {
		var ret SnapshotViewLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetLinksOk() (*SnapshotViewLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SnapshotView) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SnapshotViewLinks and assigns it to the Links field.
func (o *SnapshotView) SetLinks(v SnapshotViewLinks) {
	o.Links = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *SnapshotView) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *SnapshotView) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *SnapshotView) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *SnapshotView) GetConfiguration() string {
	if o == nil || IsNil(o.Configuration) {
		var ret string
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetConfigurationOk() (*string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *SnapshotView) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given string and assigns it to the Configuration field.
func (o *SnapshotView) SetConfiguration(v string) {
	o.Configuration = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SnapshotView) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SnapshotView) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SnapshotView) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *SnapshotView) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil || IsNil(o.Environment) {
		var ret ResourceRelationshipReadOnly
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *SnapshotView) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ResourceRelationshipReadOnly and assigns it to the Environment field.
func (o *SnapshotView) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SnapshotView) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SnapshotView) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SnapshotView) SetError(v string) {
	o.Error = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SnapshotView) GetId() uuid.UUID {
	if o == nil || IsNil(o.Id) {
		var ret uuid.UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SnapshotView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given uuid.UUID and assigns it to the Id field.
func (o *SnapshotView) SetId(v uuid.UUID) {
	o.Id = &v
}

// GetImportMetadata returns the ImportMetadata field value if set, zero value otherwise.
func (o *SnapshotView) GetImportMetadata() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ImportMetadata) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.ImportMetadata
}

// GetImportMetadataOk returns a tuple with the ImportMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetImportMetadataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ImportMetadata) {
		return map[string]map[string]interface{}{}, false
	}
	return o.ImportMetadata, true
}

// HasImportMetadata returns a boolean if a field has been set.
func (o *SnapshotView) HasImportMetadata() bool {
	if o != nil && !IsNil(o.ImportMetadata) {
		return true
	}

	return false
}

// SetImportMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the ImportMetadata field.
func (o *SnapshotView) SetImportMetadata(v map[string]map[string]interface{}) {
	o.ImportMetadata = v
}

// GetReferencedResources returns the ReferencedResources field value if set, zero value otherwise.
func (o *SnapshotView) GetReferencedResources() []string {
	if o == nil || IsNil(o.ReferencedResources) {
		var ret []string
		return ret
	}
	return o.ReferencedResources
}

// GetReferencedResourcesOk returns a tuple with the ReferencedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetReferencedResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferencedResources) {
		return nil, false
	}
	return o.ReferencedResources, true
}

// HasReferencedResources returns a boolean if a field has been set.
func (o *SnapshotView) HasReferencedResources() bool {
	if o != nil && !IsNil(o.ReferencedResources) {
		return true
	}

	return false
}

// SetReferencedResources gets a reference to the given []string and assigns it to the ReferencedResources field.
func (o *SnapshotView) SetReferencedResources(v []string) {
	o.ReferencedResources = v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *SnapshotView) GetResource() SnapshotResourceInformation {
	if o == nil || IsNil(o.Resource) {
		var ret SnapshotResourceInformation
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetResourceOk() (*SnapshotResourceInformation, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SnapshotView) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given SnapshotResourceInformation and assigns it to the Resource field.
func (o *SnapshotView) SetResource(v SnapshotResourceInformation) {
	o.Resource = &v
}

// GetResourceUrl returns the ResourceUrl field value if set, zero value otherwise.
func (o *SnapshotView) GetResourceUrl() string {
	if o == nil || IsNil(o.ResourceUrl) {
		var ret string
		return ret
	}
	return *o.ResourceUrl
}

// GetResourceUrlOk returns a tuple with the ResourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetResourceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceUrl) {
		return nil, false
	}
	return o.ResourceUrl, true
}

// HasResourceUrl returns a boolean if a field has been set.
func (o *SnapshotView) HasResourceUrl() bool {
	if o != nil && !IsNil(o.ResourceUrl) {
		return true
	}

	return false
}

// SetResourceUrl gets a reference to the given string and assigns it to the ResourceUrl field.
func (o *SnapshotView) SetResourceUrl(v string) {
	o.ResourceUrl = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *SnapshotView) GetSnapshotId() uuid.UUID {
	if o == nil || IsNil(o.SnapshotId) {
		var ret uuid.UUID
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetSnapshotIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *SnapshotView) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given uuid.UUID and assigns it to the SnapshotId field.
func (o *SnapshotView) SetSnapshotId(v uuid.UUID) {
	o.SnapshotId = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *SnapshotView) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *SnapshotView) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *SnapshotView) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SnapshotView) GetStatus() SnapshotViewStatus {
	if o == nil || IsNil(o.Status) {
		var ret SnapshotViewStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetStatusOk() (*SnapshotViewStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SnapshotView) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SnapshotViewStatus and assigns it to the Status field.
func (o *SnapshotView) SetStatus(v SnapshotViewStatus) {
	o.Status = &v
}

// GetVersionedAt returns the VersionedAt field value if set, zero value otherwise.
func (o *SnapshotView) GetVersionedAt() time.Time {
	if o == nil || IsNil(o.VersionedAt) {
		var ret time.Time
		return ret
	}
	return *o.VersionedAt
}

// GetVersionedAtOk returns a tuple with the VersionedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotView) GetVersionedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.VersionedAt) {
		return nil, false
	}
	return o.VersionedAt, true
}

// HasVersionedAt returns a boolean if a field has been set.
func (o *SnapshotView) HasVersionedAt() bool {
	if o != nil && !IsNil(o.VersionedAt) {
		return true
	}

	return false
}

// SetVersionedAt gets a reference to the given time.Time and assigns it to the VersionedAt field.
func (o *SnapshotView) SetVersionedAt(v time.Time) {
	o.VersionedAt = &v
}

func (o SnapshotView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ImportMetadata) {
		toSerialize["importMetadata"] = o.ImportMetadata
	}
	if !IsNil(o.ReferencedResources) {
		toSerialize["referencedResources"] = o.ReferencedResources
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.ResourceUrl) {
		toSerialize["resourceUrl"] = o.ResourceUrl
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshotId"] = o.SnapshotId
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VersionedAt) {
		toSerialize["versionedAt"] = o.VersionedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnapshotView) UnmarshalJSON(data []byte) (err error) {
	varSnapshotView := _SnapshotView{}

	err = json.Unmarshal(data, &varSnapshotView)

	if err != nil {
		return err
	}

	*o = SnapshotView(varSnapshotView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "completedAt")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "error")
		delete(additionalProperties, "id")
		delete(additionalProperties, "importMetadata")
		delete(additionalProperties, "referencedResources")
		delete(additionalProperties, "resource")
		delete(additionalProperties, "resourceUrl")
		delete(additionalProperties, "snapshotId")
		delete(additionalProperties, "startedAt")
		delete(additionalProperties, "status")
		delete(additionalProperties, "versionedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o SnapshotView) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Embedded) {
		logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	}
	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.CompletedAt) {
		logAttrs = append(logAttrs, slog.Any("completedAt", *o.CompletedAt))
	}
	if !IsNil(o.Configuration) {
		logAttrs = append(logAttrs, slog.Any("configuration", *o.Configuration))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.Environment) {
		logAttrs = append(logAttrs, slog.Any("environment", *o.Environment))
	}
	if !IsNil(o.Error) {
		logAttrs = append(logAttrs, slog.Any("error", *o.Error))
	}
	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	if !IsNil(o.ImportMetadata) {
		logAttrs = append(logAttrs, slog.Any("importMetadata", o.ImportMetadata))
	}
	if !IsNil(o.ReferencedResources) {
		logAttrs = append(logAttrs, slog.Any("referencedResources", o.ReferencedResources))
	}
	if !IsNil(o.Resource) {
		logAttrs = append(logAttrs, slog.Any("resource", *o.Resource))
	}
	if !IsNil(o.ResourceUrl) {
		logAttrs = append(logAttrs, slog.Any("resourceUrl", *o.ResourceUrl))
	}
	if !IsNil(o.SnapshotId) {
		logAttrs = append(logAttrs, slog.Any("snapshotId", *o.SnapshotId))
	}
	if !IsNil(o.StartedAt) {
		logAttrs = append(logAttrs, slog.Any("startedAt", *o.StartedAt))
	}
	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	if !IsNil(o.VersionedAt) {
		logAttrs = append(logAttrs, slog.Any("versionedAt", *o.VersionedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableSnapshotView struct {
	value *SnapshotView
	isSet bool
}

func (v NullableSnapshotView) Get() *SnapshotView {
	return v.value
}

func (v *NullableSnapshotView) Set(val *SnapshotView) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotView) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotView(val *SnapshotView) *NullableSnapshotView {
	return &NullableSnapshotView{value: val, isSet: true}
}

func (v NullableSnapshotView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
