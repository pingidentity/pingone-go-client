// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowInputSchemaRequestItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowInputSchemaRequestItem{}

// checks if the DaVinciFlowInputSchemaRequestItem type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowInputSchemaRequestItem{}

// DaVinciFlowInputSchemaRequestItem struct for DaVinciFlowInputSchemaRequestItem
type DaVinciFlowInputSchemaRequestItem struct {
	PropertyName         string                                                 `json:"propertyName"`
	PreferredDataType    DaVinciFlowInputSchemaRequestItemPreferredDataType     `json:"preferredDataType"`
	Description          *string                                                `json:"description,omitempty"`
	PreferredControlType *DaVinciFlowInputSchemaRequestItemPreferredControlType `json:"preferredControlType,omitempty"`
	Required             *bool                                                  `json:"required,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowInputSchemaRequestItem DaVinciFlowInputSchemaRequestItem

// NewDaVinciFlowInputSchemaRequestItem instantiates a new DaVinciFlowInputSchemaRequestItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowInputSchemaRequestItem(propertyName string, preferredDataType DaVinciFlowInputSchemaRequestItemPreferredDataType) *DaVinciFlowInputSchemaRequestItem {
	this := DaVinciFlowInputSchemaRequestItem{}
	this.PropertyName = propertyName
	this.PreferredDataType = preferredDataType
	return &this
}

// NewDaVinciFlowInputSchemaRequestItemWithDefaults instantiates a new DaVinciFlowInputSchemaRequestItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowInputSchemaRequestItemWithDefaults() *DaVinciFlowInputSchemaRequestItem {
	this := DaVinciFlowInputSchemaRequestItem{}
	return &this
}

// GetPropertyName returns the PropertyName field value
func (o *DaVinciFlowInputSchemaRequestItem) GetPropertyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaRequestItem) GetPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyName, true
}

// SetPropertyName sets field value
func (o *DaVinciFlowInputSchemaRequestItem) SetPropertyName(v string) {
	o.PropertyName = v
}

// GetPreferredDataType returns the PreferredDataType field value
func (o *DaVinciFlowInputSchemaRequestItem) GetPreferredDataType() DaVinciFlowInputSchemaRequestItemPreferredDataType {
	if o == nil {
		var ret DaVinciFlowInputSchemaRequestItemPreferredDataType
		return ret
	}

	return o.PreferredDataType
}

// GetPreferredDataTypeOk returns a tuple with the PreferredDataType field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaRequestItem) GetPreferredDataTypeOk() (*DaVinciFlowInputSchemaRequestItemPreferredDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreferredDataType, true
}

// SetPreferredDataType sets field value
func (o *DaVinciFlowInputSchemaRequestItem) SetPreferredDataType(v DaVinciFlowInputSchemaRequestItemPreferredDataType) {
	o.PreferredDataType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DaVinciFlowInputSchemaRequestItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaRequestItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DaVinciFlowInputSchemaRequestItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DaVinciFlowInputSchemaRequestItem) SetDescription(v string) {
	o.Description = &v
}

// GetPreferredControlType returns the PreferredControlType field value if set, zero value otherwise.
func (o *DaVinciFlowInputSchemaRequestItem) GetPreferredControlType() DaVinciFlowInputSchemaRequestItemPreferredControlType {
	if o == nil || IsNil(o.PreferredControlType) {
		var ret DaVinciFlowInputSchemaRequestItemPreferredControlType
		return ret
	}
	return *o.PreferredControlType
}

// GetPreferredControlTypeOk returns a tuple with the PreferredControlType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaRequestItem) GetPreferredControlTypeOk() (*DaVinciFlowInputSchemaRequestItemPreferredControlType, bool) {
	if o == nil || IsNil(o.PreferredControlType) {
		return nil, false
	}
	return o.PreferredControlType, true
}

// HasPreferredControlType returns a boolean if a field has been set.
func (o *DaVinciFlowInputSchemaRequestItem) HasPreferredControlType() bool {
	if o != nil && !IsNil(o.PreferredControlType) {
		return true
	}

	return false
}

// SetPreferredControlType gets a reference to the given DaVinciFlowInputSchemaRequestItemPreferredControlType and assigns it to the PreferredControlType field.
func (o *DaVinciFlowInputSchemaRequestItem) SetPreferredControlType(v DaVinciFlowInputSchemaRequestItemPreferredControlType) {
	o.PreferredControlType = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *DaVinciFlowInputSchemaRequestItem) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaRequestItem) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *DaVinciFlowInputSchemaRequestItem) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *DaVinciFlowInputSchemaRequestItem) SetRequired(v bool) {
	o.Required = &v
}

func (o DaVinciFlowInputSchemaRequestItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowInputSchemaRequestItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["propertyName"] = o.PropertyName
	toSerialize["preferredDataType"] = o.PreferredDataType
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PreferredControlType) {
		toSerialize["preferredControlType"] = o.PreferredControlType
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowInputSchemaRequestItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"propertyName",
		"preferredDataType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowInputSchemaRequestItem := _DaVinciFlowInputSchemaRequestItem{}

	err = json.Unmarshal(data, &varDaVinciFlowInputSchemaRequestItem)

	if err != nil {
		return err
	}

	*o = DaVinciFlowInputSchemaRequestItem(varDaVinciFlowInputSchemaRequestItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "propertyName")
		delete(additionalProperties, "preferredDataType")
		delete(additionalProperties, "description")
		delete(additionalProperties, "preferredControlType")
		delete(additionalProperties, "required")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowInputSchemaRequestItem) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("propertyName", o.PropertyName))
	logAttrs = append(logAttrs, slog.Any("preferredDataType", o.PreferredDataType))
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.PreferredControlType) {
		logAttrs = append(logAttrs, slog.Any("preferredControlType", *o.PreferredControlType))
	}
	if !IsNil(o.Required) {
		logAttrs = append(logAttrs, slog.Any("required", *o.Required))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowInputSchemaRequestItem struct {
	value *DaVinciFlowInputSchemaRequestItem
	isSet bool
}

func (v NullableDaVinciFlowInputSchemaRequestItem) Get() *DaVinciFlowInputSchemaRequestItem {
	return v.value
}

func (v *NullableDaVinciFlowInputSchemaRequestItem) Set(val *DaVinciFlowInputSchemaRequestItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowInputSchemaRequestItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowInputSchemaRequestItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowInputSchemaRequestItem(val *DaVinciFlowInputSchemaRequestItem) *NullableDaVinciFlowInputSchemaRequestItem {
	return &NullableDaVinciFlowInputSchemaRequestItem{value: val, isSet: true}
}

func (v NullableDaVinciFlowInputSchemaRequestItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowInputSchemaRequestItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
