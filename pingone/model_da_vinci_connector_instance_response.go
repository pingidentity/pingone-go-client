// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DaVinciConnectorInstanceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorInstanceResponse{}

// checks if the DaVinciConnectorInstanceResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorInstanceResponse{}

// DaVinciConnectorInstanceResponse struct for DaVinciConnectorInstanceResponse
type DaVinciConnectorInstanceResponse struct {
	Links                DaVinciConnectorInstanceResponseLinks `json:"_links"`
	Connector            ResourceRelationshipDaVinciReadOnly   `json:"connector"`
	Environment          ResourceRelationshipReadOnly          `json:"environment"`
	Id                   string                                `json:"id"`
	Name                 string                                `json:"name"`
	CreatedAt            *time.Time                            `json:"createdAt,omitempty"`
	Properties           map[string]interface{}                `json:"properties,omitempty"`
	UpdatedAt            *time.Time                            `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorInstanceResponse DaVinciConnectorInstanceResponse

// NewDaVinciConnectorInstanceResponse instantiates a new DaVinciConnectorInstanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorInstanceResponse(links DaVinciConnectorInstanceResponseLinks, connector ResourceRelationshipDaVinciReadOnly, environment ResourceRelationshipReadOnly, id string, name string) *DaVinciConnectorInstanceResponse {
	this := DaVinciConnectorInstanceResponse{}
	this.Links = links
	this.Connector = connector
	this.Environment = environment
	this.Id = id
	this.Name = name
	return &this
}

// NewDaVinciConnectorInstanceResponseWithDefaults instantiates a new DaVinciConnectorInstanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorInstanceResponseWithDefaults() *DaVinciConnectorInstanceResponse {
	this := DaVinciConnectorInstanceResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciConnectorInstanceResponse) GetLinks() DaVinciConnectorInstanceResponseLinks {
	if o == nil {
		var ret DaVinciConnectorInstanceResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetLinksOk() (*DaVinciConnectorInstanceResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciConnectorInstanceResponse) SetLinks(v DaVinciConnectorInstanceResponseLinks) {
	o.Links = v
}

// GetConnector returns the Connector field value
func (o *DaVinciConnectorInstanceResponse) GetConnector() ResourceRelationshipDaVinciReadOnly {
	if o == nil {
		var ret ResourceRelationshipDaVinciReadOnly
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetConnectorOk() (*ResourceRelationshipDaVinciReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *DaVinciConnectorInstanceResponse) SetConnector(v ResourceRelationshipDaVinciReadOnly) {
	o.Connector = v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciConnectorInstanceResponse) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciConnectorInstanceResponse) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DaVinciConnectorInstanceResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciConnectorInstanceResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DaVinciConnectorInstanceResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciConnectorInstanceResponse) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciConnectorInstanceResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciConnectorInstanceResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciConnectorInstanceResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DaVinciConnectorInstanceResponse) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DaVinciConnectorInstanceResponse) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *DaVinciConnectorInstanceResponse) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciConnectorInstanceResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorInstanceResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciConnectorInstanceResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciConnectorInstanceResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DaVinciConnectorInstanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorInstanceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["connector"] = o.Connector
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorInstanceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"connector",
		"environment",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorInstanceResponse := _DaVinciConnectorInstanceResponse{}

	err = json.Unmarshal(data, &varDaVinciConnectorInstanceResponse)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorInstanceResponse(varDaVinciConnectorInstanceResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorInstanceResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("connector", o.Connector))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.Properties) {
		logAttrs = append(logAttrs, slog.Any("properties", o.Properties))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorInstanceResponse struct {
	value *DaVinciConnectorInstanceResponse
	isSet bool
}

func (v NullableDaVinciConnectorInstanceResponse) Get() *DaVinciConnectorInstanceResponse {
	return v.value
}

func (v *NullableDaVinciConnectorInstanceResponse) Set(val *DaVinciConnectorInstanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorInstanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorInstanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorInstanceResponse(val *DaVinciConnectorInstanceResponse) *NullableDaVinciConnectorInstanceResponse {
	return &NullableDaVinciConnectorInstanceResponse{value: val, isSet: true}
}

func (v NullableDaVinciConnectorInstanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorInstanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
