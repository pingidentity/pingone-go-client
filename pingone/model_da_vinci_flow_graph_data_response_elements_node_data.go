// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataResponseElementsNodeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataResponseElementsNodeData{}

// checks if the DaVinciFlowGraphDataResponseElementsNodeData type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataResponseElementsNodeData{}

// DaVinciFlowGraphDataResponseElementsNodeData struct for DaVinciFlowGraphDataResponseElementsNodeData
type DaVinciFlowGraphDataResponseElementsNodeData struct {
	Id                   string                                                        `json:"id"`
	NodeType             string                                                        `json:"nodeType"`
	CapabilityName       *string                                                       `json:"capabilityName,omitempty"`
	ConnectionId         *string                                                       `json:"connectionId,omitempty"`
	ConnectorId          *string                                                       `json:"connectorId,omitempty"`
	IdUnique             *string                                                       `json:"idUnique,omitempty"`
	Label                *string                                                       `json:"label,omitempty"`
	LinterError          []DaVinciFlowGraphDataResponseElementsNodeDataLinterErrorItem `json:"linterError,omitempty"`
	Name                 *string                                                       `json:"name,omitempty"`
	Properties           *DaVinciFlowGraphDataResponseElementsNodeData                 `json:"properties,omitempty"`
	Status               *string                                                       `json:"status,omitempty"`
	Type                 *string                                                       `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataResponseElementsNodeData DaVinciFlowGraphDataResponseElementsNodeData

// NewDaVinciFlowGraphDataResponseElementsNodeData instantiates a new DaVinciFlowGraphDataResponseElementsNodeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataResponseElementsNodeData(id string, nodeType string) *DaVinciFlowGraphDataResponseElementsNodeData {
	this := DaVinciFlowGraphDataResponseElementsNodeData{}
	this.Id = id
	this.NodeType = nodeType
	return &this
}

// NewDaVinciFlowGraphDataResponseElementsNodeDataWithDefaults instantiates a new DaVinciFlowGraphDataResponseElementsNodeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataResponseElementsNodeDataWithDefaults() *DaVinciFlowGraphDataResponseElementsNodeData {
	this := DaVinciFlowGraphDataResponseElementsNodeData{}
	return &this
}

// GetId returns the Id field value
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetId(v string) {
	o.Id = v
}

// GetNodeType returns the NodeType field value
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetNodeType(v string) {
	o.NodeType = v
}

// GetCapabilityName returns the CapabilityName field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetCapabilityName() string {
	if o == nil || IsNil(o.CapabilityName) {
		var ret string
		return ret
	}
	return *o.CapabilityName
}

// GetCapabilityNameOk returns a tuple with the CapabilityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetCapabilityNameOk() (*string, bool) {
	if o == nil || IsNil(o.CapabilityName) {
		return nil, false
	}
	return o.CapabilityName, true
}

// HasCapabilityName returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasCapabilityName() bool {
	if o != nil && !IsNil(o.CapabilityName) {
		return true
	}

	return false
}

// SetCapabilityName gets a reference to the given string and assigns it to the CapabilityName field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetCapabilityName(v string) {
	o.CapabilityName = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetIdUnique returns the IdUnique field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetIdUnique() string {
	if o == nil || IsNil(o.IdUnique) {
		var ret string
		return ret
	}
	return *o.IdUnique
}

// GetIdUniqueOk returns a tuple with the IdUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetIdUniqueOk() (*string, bool) {
	if o == nil || IsNil(o.IdUnique) {
		return nil, false
	}
	return o.IdUnique, true
}

// HasIdUnique returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasIdUnique() bool {
	if o != nil && !IsNil(o.IdUnique) {
		return true
	}

	return false
}

// SetIdUnique gets a reference to the given string and assigns it to the IdUnique field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetIdUnique(v string) {
	o.IdUnique = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetLabel(v string) {
	o.Label = &v
}

// GetLinterError returns the LinterError field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetLinterError() []DaVinciFlowGraphDataResponseElementsNodeDataLinterErrorItem {
	if o == nil || IsNil(o.LinterError) {
		var ret []DaVinciFlowGraphDataResponseElementsNodeDataLinterErrorItem
		return ret
	}
	return o.LinterError
}

// GetLinterErrorOk returns a tuple with the LinterError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetLinterErrorOk() ([]DaVinciFlowGraphDataResponseElementsNodeDataLinterErrorItem, bool) {
	if o == nil || IsNil(o.LinterError) {
		return nil, false
	}
	return o.LinterError, true
}

// HasLinterError returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasLinterError() bool {
	if o != nil && !IsNil(o.LinterError) {
		return true
	}

	return false
}

// SetLinterError gets a reference to the given []DaVinciFlowGraphDataResponseElementsNodeDataLinterErrorItem and assigns it to the LinterError field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetLinterError(v []DaVinciFlowGraphDataResponseElementsNodeDataLinterErrorItem) {
	o.LinterError = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetProperties() DaVinciFlowGraphDataResponseElementsNodeData {
	if o == nil || IsNil(o.Properties) {
		var ret DaVinciFlowGraphDataResponseElementsNodeData
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetPropertiesOk() (*DaVinciFlowGraphDataResponseElementsNodeData, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given DaVinciFlowGraphDataResponseElementsNodeData and assigns it to the Properties field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetProperties(v DaVinciFlowGraphDataResponseElementsNodeData) {
	o.Properties = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DaVinciFlowGraphDataResponseElementsNodeData) SetType(v string) {
	o.Type = &v
}

func (o DaVinciFlowGraphDataResponseElementsNodeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataResponseElementsNodeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["nodeType"] = o.NodeType
	if !IsNil(o.CapabilityName) {
		toSerialize["capabilityName"] = o.CapabilityName
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connectionId"] = o.ConnectionId
	}
	if !IsNil(o.ConnectorId) {
		toSerialize["connectorId"] = o.ConnectorId
	}
	if !IsNil(o.IdUnique) {
		toSerialize["idUnique"] = o.IdUnique
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.LinterError) {
		toSerialize["linterError"] = o.LinterError
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataResponseElementsNodeData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"nodeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataResponseElementsNodeData := _DaVinciFlowGraphDataResponseElementsNodeData{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataResponseElementsNodeData)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataResponseElementsNodeData(varDaVinciFlowGraphDataResponseElementsNodeData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "nodeType")
		delete(additionalProperties, "capabilityName")
		delete(additionalProperties, "connectionId")
		delete(additionalProperties, "connectorId")
		delete(additionalProperties, "idUnique")
		delete(additionalProperties, "label")
		delete(additionalProperties, "linterError")
		delete(additionalProperties, "name")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataResponseElementsNodeData) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("nodeType", o.NodeType))
	if !IsNil(o.CapabilityName) {
		logAttrs = append(logAttrs, slog.Any("capabilityName", *o.CapabilityName))
	}
	if !IsNil(o.ConnectionId) {
		logAttrs = append(logAttrs, slog.Any("connectionId", *o.ConnectionId))
	}
	if !IsNil(o.ConnectorId) {
		logAttrs = append(logAttrs, slog.Any("connectorId", *o.ConnectorId))
	}
	if !IsNil(o.IdUnique) {
		logAttrs = append(logAttrs, slog.Any("idUnique", *o.IdUnique))
	}
	if !IsNil(o.Label) {
		logAttrs = append(logAttrs, slog.Any("label", *o.Label))
	}
	if !IsNil(o.LinterError) {
		logAttrs = append(logAttrs, slog.Any("linterError", o.LinterError))
	}
	if !IsNil(o.Name) {
		logAttrs = append(logAttrs, slog.Any("name", *o.Name))
	}
	if !IsNil(o.Properties) {
		logAttrs = append(logAttrs, slog.Any("properties", *o.Properties))
	}
	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	if !IsNil(o.Type) {
		logAttrs = append(logAttrs, slog.Any("type", *o.Type))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataResponseElementsNodeData struct {
	value *DaVinciFlowGraphDataResponseElementsNodeData
	isSet bool
}

func (v NullableDaVinciFlowGraphDataResponseElementsNodeData) Get() *DaVinciFlowGraphDataResponseElementsNodeData {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNodeData) Set(val *DaVinciFlowGraphDataResponseElementsNodeData) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataResponseElementsNodeData) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNodeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataResponseElementsNodeData(val *DaVinciFlowGraphDataResponseElementsNodeData) *NullableDaVinciFlowGraphDataResponseElementsNodeData {
	return &NullableDaVinciFlowGraphDataResponseElementsNodeData{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataResponseElementsNodeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNodeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
