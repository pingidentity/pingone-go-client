// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciConnectorCollectionMinimalResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorCollectionMinimalResponse{}

// checks if the DaVinciConnectorCollectionMinimalResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorCollectionMinimalResponse{}

// DaVinciConnectorCollectionMinimalResponse struct for DaVinciConnectorCollectionMinimalResponse
type DaVinciConnectorCollectionMinimalResponse struct {
	Embedded             DaVinciConnectorCollectionMinimalResponseEmbedded `json:"_embedded"`
	Links                DaVinciConnectorCollectionMinimalResponseLinks    `json:"_links"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorCollectionMinimalResponse DaVinciConnectorCollectionMinimalResponse

// NewDaVinciConnectorCollectionMinimalResponse instantiates a new DaVinciConnectorCollectionMinimalResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorCollectionMinimalResponse(embedded DaVinciConnectorCollectionMinimalResponseEmbedded, links DaVinciConnectorCollectionMinimalResponseLinks) *DaVinciConnectorCollectionMinimalResponse {
	this := DaVinciConnectorCollectionMinimalResponse{}
	this.Embedded = embedded
	this.Links = links
	return &this
}

// NewDaVinciConnectorCollectionMinimalResponseWithDefaults instantiates a new DaVinciConnectorCollectionMinimalResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorCollectionMinimalResponseWithDefaults() *DaVinciConnectorCollectionMinimalResponse {
	this := DaVinciConnectorCollectionMinimalResponse{}
	return &this
}

// GetEmbedded returns the Embedded field value
func (o *DaVinciConnectorCollectionMinimalResponse) GetEmbedded() DaVinciConnectorCollectionMinimalResponseEmbedded {
	if o == nil {
		var ret DaVinciConnectorCollectionMinimalResponseEmbedded
		return ret
	}

	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorCollectionMinimalResponse) GetEmbeddedOk() (*DaVinciConnectorCollectionMinimalResponseEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedded, true
}

// SetEmbedded sets field value
func (o *DaVinciConnectorCollectionMinimalResponse) SetEmbedded(v DaVinciConnectorCollectionMinimalResponseEmbedded) {
	o.Embedded = v
}

// GetLinks returns the Links field value
func (o *DaVinciConnectorCollectionMinimalResponse) GetLinks() DaVinciConnectorCollectionMinimalResponseLinks {
	if o == nil {
		var ret DaVinciConnectorCollectionMinimalResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorCollectionMinimalResponse) GetLinksOk() (*DaVinciConnectorCollectionMinimalResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciConnectorCollectionMinimalResponse) SetLinks(v DaVinciConnectorCollectionMinimalResponseLinks) {
	o.Links = v
}

func (o DaVinciConnectorCollectionMinimalResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorCollectionMinimalResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_embedded"] = o.Embedded
	toSerialize["_links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorCollectionMinimalResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_embedded",
		"_links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorCollectionMinimalResponse := _DaVinciConnectorCollectionMinimalResponse{}

	err = json.Unmarshal(data, &varDaVinciConnectorCollectionMinimalResponse)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorCollectionMinimalResponse(varDaVinciConnectorCollectionMinimalResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorCollectionMinimalResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorCollectionMinimalResponse struct {
	value *DaVinciConnectorCollectionMinimalResponse
	isSet bool
}

func (v NullableDaVinciConnectorCollectionMinimalResponse) Get() *DaVinciConnectorCollectionMinimalResponse {
	return v.value
}

func (v *NullableDaVinciConnectorCollectionMinimalResponse) Set(val *DaVinciConnectorCollectionMinimalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorCollectionMinimalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorCollectionMinimalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorCollectionMinimalResponse(val *DaVinciConnectorCollectionMinimalResponse) *NullableDaVinciConnectorCollectionMinimalResponse {
	return &NullableDaVinciConnectorCollectionMinimalResponse{value: val, isSet: true}
}

func (v NullableDaVinciConnectorCollectionMinimalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorCollectionMinimalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
