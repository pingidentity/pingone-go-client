// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationReplaceRequestOauthGrantTypes the model 'DaVinciApplicationReplaceRequestOauthGrantTypes'
type DaVinciApplicationReplaceRequestOauthGrantTypes string

// List of DaVinciApplicationReplaceRequest_oauth_grantTypes
const (
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHGRANTTYPES_AUTHORIZATION_CODE DaVinciApplicationReplaceRequestOauthGrantTypes = "authorizationCode"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHGRANTTYPES_CLIENT_CREDENTIALS DaVinciApplicationReplaceRequestOauthGrantTypes = "clientCredentials"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHGRANTTYPES_IMPLICIT           DaVinciApplicationReplaceRequestOauthGrantTypes = "implicit"
)

// All allowed values of DaVinciApplicationReplaceRequestOauthGrantTypes enum
var AllowedDaVinciApplicationReplaceRequestOauthGrantTypesEnumValues = []DaVinciApplicationReplaceRequestOauthGrantTypes{
	"authorizationCode",
	"clientCredentials",
	"implicit",
}

func (v *DaVinciApplicationReplaceRequestOauthGrantTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationReplaceRequestOauthGrantTypes(value)
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOauthGrantTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationReplaceRequestOauthGrantTypes(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciApplicationReplaceRequestOauthGrantTypesFromValue returns a pointer to a valid DaVinciApplicationReplaceRequestOauthGrantTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationReplaceRequestOauthGrantTypesFromValue(v string) (*DaVinciApplicationReplaceRequestOauthGrantTypes, error) {
	ev := DaVinciApplicationReplaceRequestOauthGrantTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationReplaceRequestOauthGrantTypes: valid values are %v", v, AllowedDaVinciApplicationReplaceRequestOauthGrantTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationReplaceRequestOauthGrantTypes) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOauthGrantTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinciApplicationReplaceRequest_oauth_grantTypes value
func (v DaVinciApplicationReplaceRequestOauthGrantTypes) Ptr() *DaVinciApplicationReplaceRequestOauthGrantTypes {
	return &v
}

type NullableDaVinciApplicationReplaceRequestOauthGrantTypes struct {
	value *DaVinciApplicationReplaceRequestOauthGrantTypes
	isSet bool
}

func (v NullableDaVinciApplicationReplaceRequestOauthGrantTypes) Get() *DaVinciApplicationReplaceRequestOauthGrantTypes {
	return v.value
}

func (v *NullableDaVinciApplicationReplaceRequestOauthGrantTypes) Set(val *DaVinciApplicationReplaceRequestOauthGrantTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationReplaceRequestOauthGrantTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationReplaceRequestOauthGrantTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationReplaceRequestOauthGrantTypes(val *DaVinciApplicationReplaceRequestOauthGrantTypes) *NullableDaVinciApplicationReplaceRequestOauthGrantTypes {
	return &NullableDaVinciApplicationReplaceRequestOauthGrantTypes{value: val, isSet: true}
}

func (v NullableDaVinciApplicationReplaceRequestOauthGrantTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationReplaceRequestOauthGrantTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
