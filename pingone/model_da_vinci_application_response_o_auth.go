// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciApplicationResponseOAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciApplicationResponseOAuth{}

// checks if the DaVinciApplicationResponseOAuth type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciApplicationResponseOAuth{}

// DaVinciApplicationResponseOAuth struct for DaVinciApplicationResponseOAuth
type DaVinciApplicationResponseOAuth struct {
	ClientSecret               string                                     `json:"clientSecret"`
	EnforceSignedRequestOpenid *bool                                      `json:"enforceSignedRequestOpenid,omitempty"`
	GrantTypes                 []DaVinciApplicationResponseOAuthGrantType `json:"grantTypes,omitempty"`
	LogoutUris                 []string                                   `json:"logoutUris,omitempty"`
	RedirectUris               []string                                   `json:"redirectUris,omitempty"`
	Scopes                     []DaVinciApplicationResponseOAuthScope     `json:"scopes,omitempty"`
	SpJwksOpenid               *string                                    `json:"spJwksOpenid,omitempty"`
	SpjwksUrl                  *string                                    `json:"spjwksUrl,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _DaVinciApplicationResponseOAuth DaVinciApplicationResponseOAuth

// NewDaVinciApplicationResponseOAuth instantiates a new DaVinciApplicationResponseOAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciApplicationResponseOAuth(clientSecret string) *DaVinciApplicationResponseOAuth {
	this := DaVinciApplicationResponseOAuth{}
	this.ClientSecret = clientSecret
	return &this
}

// NewDaVinciApplicationResponseOAuthWithDefaults instantiates a new DaVinciApplicationResponseOAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciApplicationResponseOAuthWithDefaults() *DaVinciApplicationResponseOAuth {
	this := DaVinciApplicationResponseOAuth{}
	return &this
}

// GetClientSecret returns the ClientSecret field value
func (o *DaVinciApplicationResponseOAuth) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *DaVinciApplicationResponseOAuth) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetEnforceSignedRequestOpenid returns the EnforceSignedRequestOpenid field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetEnforceSignedRequestOpenid() bool {
	if o == nil || IsNil(o.EnforceSignedRequestOpenid) {
		var ret bool
		return ret
	}
	return *o.EnforceSignedRequestOpenid
}

// GetEnforceSignedRequestOpenidOk returns a tuple with the EnforceSignedRequestOpenid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetEnforceSignedRequestOpenidOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceSignedRequestOpenid) {
		return nil, false
	}
	return o.EnforceSignedRequestOpenid, true
}

// HasEnforceSignedRequestOpenid returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasEnforceSignedRequestOpenid() bool {
	if o != nil && !IsNil(o.EnforceSignedRequestOpenid) {
		return true
	}

	return false
}

// SetEnforceSignedRequestOpenid gets a reference to the given bool and assigns it to the EnforceSignedRequestOpenid field.
func (o *DaVinciApplicationResponseOAuth) SetEnforceSignedRequestOpenid(v bool) {
	o.EnforceSignedRequestOpenid = &v
}

// GetGrantTypes returns the GrantTypes field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetGrantTypes() []DaVinciApplicationResponseOAuthGrantType {
	if o == nil || IsNil(o.GrantTypes) {
		var ret []DaVinciApplicationResponseOAuthGrantType
		return ret
	}
	return o.GrantTypes
}

// GetGrantTypesOk returns a tuple with the GrantTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetGrantTypesOk() ([]DaVinciApplicationResponseOAuthGrantType, bool) {
	if o == nil || IsNil(o.GrantTypes) {
		return nil, false
	}
	return o.GrantTypes, true
}

// HasGrantTypes returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasGrantTypes() bool {
	if o != nil && !IsNil(o.GrantTypes) {
		return true
	}

	return false
}

// SetGrantTypes gets a reference to the given []DaVinciApplicationResponseOAuthGrantType and assigns it to the GrantTypes field.
func (o *DaVinciApplicationResponseOAuth) SetGrantTypes(v []DaVinciApplicationResponseOAuthGrantType) {
	o.GrantTypes = v
}

// GetLogoutUris returns the LogoutUris field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetLogoutUris() []string {
	if o == nil || IsNil(o.LogoutUris) {
		var ret []string
		return ret
	}
	return o.LogoutUris
}

// GetLogoutUrisOk returns a tuple with the LogoutUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetLogoutUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.LogoutUris) {
		return nil, false
	}
	return o.LogoutUris, true
}

// HasLogoutUris returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasLogoutUris() bool {
	if o != nil && !IsNil(o.LogoutUris) {
		return true
	}

	return false
}

// SetLogoutUris gets a reference to the given []string and assigns it to the LogoutUris field.
func (o *DaVinciApplicationResponseOAuth) SetLogoutUris(v []string) {
	o.LogoutUris = v
}

// GetRedirectUris returns the RedirectUris field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetRedirectUris() []string {
	if o == nil || IsNil(o.RedirectUris) {
		var ret []string
		return ret
	}
	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetRedirectUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.RedirectUris) {
		return nil, false
	}
	return o.RedirectUris, true
}

// HasRedirectUris returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasRedirectUris() bool {
	if o != nil && !IsNil(o.RedirectUris) {
		return true
	}

	return false
}

// SetRedirectUris gets a reference to the given []string and assigns it to the RedirectUris field.
func (o *DaVinciApplicationResponseOAuth) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetScopes() []DaVinciApplicationResponseOAuthScope {
	if o == nil || IsNil(o.Scopes) {
		var ret []DaVinciApplicationResponseOAuthScope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetScopesOk() ([]DaVinciApplicationResponseOAuthScope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []DaVinciApplicationResponseOAuthScope and assigns it to the Scopes field.
func (o *DaVinciApplicationResponseOAuth) SetScopes(v []DaVinciApplicationResponseOAuthScope) {
	o.Scopes = v
}

// GetSpJwksOpenid returns the SpJwksOpenid field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetSpJwksOpenid() string {
	if o == nil || IsNil(o.SpJwksOpenid) {
		var ret string
		return ret
	}
	return *o.SpJwksOpenid
}

// GetSpJwksOpenidOk returns a tuple with the SpJwksOpenid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetSpJwksOpenidOk() (*string, bool) {
	if o == nil || IsNil(o.SpJwksOpenid) {
		return nil, false
	}
	return o.SpJwksOpenid, true
}

// HasSpJwksOpenid returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasSpJwksOpenid() bool {
	if o != nil && !IsNil(o.SpJwksOpenid) {
		return true
	}

	return false
}

// SetSpJwksOpenid gets a reference to the given string and assigns it to the SpJwksOpenid field.
func (o *DaVinciApplicationResponseOAuth) SetSpJwksOpenid(v string) {
	o.SpJwksOpenid = &v
}

// GetSpjwksUrl returns the SpjwksUrl field value if set, zero value otherwise.
func (o *DaVinciApplicationResponseOAuth) GetSpjwksUrl() string {
	if o == nil || IsNil(o.SpjwksUrl) {
		var ret string
		return ret
	}
	return *o.SpjwksUrl
}

// GetSpjwksUrlOk returns a tuple with the SpjwksUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationResponseOAuth) GetSpjwksUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SpjwksUrl) {
		return nil, false
	}
	return o.SpjwksUrl, true
}

// HasSpjwksUrl returns a boolean if a field has been set.
func (o *DaVinciApplicationResponseOAuth) HasSpjwksUrl() bool {
	if o != nil && !IsNil(o.SpjwksUrl) {
		return true
	}

	return false
}

// SetSpjwksUrl gets a reference to the given string and assigns it to the SpjwksUrl field.
func (o *DaVinciApplicationResponseOAuth) SetSpjwksUrl(v string) {
	o.SpjwksUrl = &v
}

func (o DaVinciApplicationResponseOAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciApplicationResponseOAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientSecret"] = o.ClientSecret
	if !IsNil(o.EnforceSignedRequestOpenid) {
		toSerialize["enforceSignedRequestOpenid"] = o.EnforceSignedRequestOpenid
	}
	if !IsNil(o.GrantTypes) {
		toSerialize["grantTypes"] = o.GrantTypes
	}
	if !IsNil(o.LogoutUris) {
		toSerialize["logoutUris"] = o.LogoutUris
	}
	if !IsNil(o.RedirectUris) {
		toSerialize["redirectUris"] = o.RedirectUris
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.SpJwksOpenid) {
		toSerialize["spJwksOpenid"] = o.SpJwksOpenid
	}
	if !IsNil(o.SpjwksUrl) {
		toSerialize["spjwksUrl"] = o.SpjwksUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciApplicationResponseOAuth) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientSecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciApplicationResponseOAuth := _DaVinciApplicationResponseOAuth{}

	err = json.Unmarshal(data, &varDaVinciApplicationResponseOAuth)

	if err != nil {
		return err
	}

	*o = DaVinciApplicationResponseOAuth(varDaVinciApplicationResponseOAuth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "enforceSignedRequestOpenid")
		delete(additionalProperties, "grantTypes")
		delete(additionalProperties, "logoutUris")
		delete(additionalProperties, "redirectUris")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "spJwksOpenid")
		delete(additionalProperties, "spjwksUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciApplicationResponseOAuth) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.String("clientSecret", "****"))
	if !IsNil(o.EnforceSignedRequestOpenid) {
		logAttrs = append(logAttrs, slog.Any("enforceSignedRequestOpenid", *o.EnforceSignedRequestOpenid))
	}
	if !IsNil(o.GrantTypes) {
		logAttrs = append(logAttrs, slog.Any("grantTypes", o.GrantTypes))
	}
	if !IsNil(o.LogoutUris) {
		logAttrs = append(logAttrs, slog.Any("logoutUris", o.LogoutUris))
	}
	if !IsNil(o.RedirectUris) {
		logAttrs = append(logAttrs, slog.Any("redirectUris", o.RedirectUris))
	}
	if !IsNil(o.Scopes) {
		logAttrs = append(logAttrs, slog.Any("scopes", o.Scopes))
	}
	if !IsNil(o.SpJwksOpenid) {
		logAttrs = append(logAttrs, slog.Any("spJwksOpenid", *o.SpJwksOpenid))
	}
	if !IsNil(o.SpjwksUrl) {
		logAttrs = append(logAttrs, slog.Any("spjwksUrl", *o.SpjwksUrl))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciApplicationResponseOAuth struct {
	value *DaVinciApplicationResponseOAuth
	isSet bool
}

func (v NullableDaVinciApplicationResponseOAuth) Get() *DaVinciApplicationResponseOAuth {
	return v.value
}

func (v *NullableDaVinciApplicationResponseOAuth) Set(val *DaVinciApplicationResponseOAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationResponseOAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationResponseOAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationResponseOAuth(val *DaVinciApplicationResponseOAuth) *NullableDaVinciApplicationResponseOAuth {
	return &NullableDaVinciApplicationResponseOAuth{value: val, isSet: true}
}

func (v NullableDaVinciApplicationResponseOAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationResponseOAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
