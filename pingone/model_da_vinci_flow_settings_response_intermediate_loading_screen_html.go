// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML - struct for DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML
type DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML struct {
	MapmapOfStringAny *map[string]interface{}
	String            *string
}

// map[string]interface{}AsDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML is a convenience function that returns map[string]interface{} wrapped in DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML
func MapmapOfStringAnyAsDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML(v *map[string]interface{}) DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML {
	return DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML{
		MapmapOfStringAny: v,
	}
}

// stringAsDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML is a convenience function that returns string wrapped in DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML
func StringAsDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML(v *string) DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML {
	return DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringAny
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringAny = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) GetActualInstanceValue() interface{} {
	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML struct {
	value *DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML
	isSet bool
}

func (v NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) Get() *DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML {
	return v.value
}

func (v *NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) Set(val *DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML(val *DaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) *NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML {
	return &NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML{value: val, isSet: true}
}

func (v NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowSettingsResponseIntermediateLoadingScreenHTML) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
