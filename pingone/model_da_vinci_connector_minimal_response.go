// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DaVinciConnectorMinimalResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorMinimalResponse{}

// checks if the DaVinciConnectorMinimalResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorMinimalResponse{}

// DaVinciConnectorMinimalResponse struct for DaVinciConnectorMinimalResponse
type DaVinciConnectorMinimalResponse struct {
	Links                DaVinciConnectorMinimalResponseLinks    `json:"_links"`
	CreatedAt            time.Time                               `json:"createdAt"`
	Description          string                                  `json:"description"`
	Environment          ResourceRelationshipReadOnly            `json:"environment"`
	Id                   string                                  `json:"id"`
	Metadata             DaVinciConnectorMinimalResponseMetadata `json:"metadata"`
	Name                 string                                  `json:"name"`
	UpdatedAt            time.Time                               `json:"updatedAt"`
	Version              string                                  `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorMinimalResponse DaVinciConnectorMinimalResponse

// NewDaVinciConnectorMinimalResponse instantiates a new DaVinciConnectorMinimalResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorMinimalResponse(links DaVinciConnectorMinimalResponseLinks, createdAt time.Time, description string, environment ResourceRelationshipReadOnly, id string, metadata DaVinciConnectorMinimalResponseMetadata, name string, updatedAt time.Time, version string) *DaVinciConnectorMinimalResponse {
	this := DaVinciConnectorMinimalResponse{}
	this.Links = links
	this.CreatedAt = createdAt
	this.Description = description
	this.Environment = environment
	this.Id = id
	this.Metadata = metadata
	this.Name = name
	this.UpdatedAt = updatedAt
	this.Version = version
	return &this
}

// NewDaVinciConnectorMinimalResponseWithDefaults instantiates a new DaVinciConnectorMinimalResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorMinimalResponseWithDefaults() *DaVinciConnectorMinimalResponse {
	this := DaVinciConnectorMinimalResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciConnectorMinimalResponse) GetLinks() DaVinciConnectorMinimalResponseLinks {
	if o == nil {
		var ret DaVinciConnectorMinimalResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetLinksOk() (*DaVinciConnectorMinimalResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciConnectorMinimalResponse) SetLinks(v DaVinciConnectorMinimalResponseLinks) {
	o.Links = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DaVinciConnectorMinimalResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DaVinciConnectorMinimalResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *DaVinciConnectorMinimalResponse) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DaVinciConnectorMinimalResponse) SetDescription(v string) {
	o.Description = v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciConnectorMinimalResponse) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciConnectorMinimalResponse) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DaVinciConnectorMinimalResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciConnectorMinimalResponse) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value
func (o *DaVinciConnectorMinimalResponse) GetMetadata() DaVinciConnectorMinimalResponseMetadata {
	if o == nil {
		var ret DaVinciConnectorMinimalResponseMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetMetadataOk() (*DaVinciConnectorMinimalResponseMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *DaVinciConnectorMinimalResponse) SetMetadata(v DaVinciConnectorMinimalResponseMetadata) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *DaVinciConnectorMinimalResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciConnectorMinimalResponse) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DaVinciConnectorMinimalResponse) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DaVinciConnectorMinimalResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetVersion returns the Version field value
func (o *DaVinciConnectorMinimalResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorMinimalResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DaVinciConnectorMinimalResponse) SetVersion(v string) {
	o.Version = v
}

func (o DaVinciConnectorMinimalResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorMinimalResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorMinimalResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"createdAt",
		"description",
		"environment",
		"id",
		"metadata",
		"name",
		"updatedAt",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorMinimalResponse := _DaVinciConnectorMinimalResponse{}

	err = json.Unmarshal(data, &varDaVinciConnectorMinimalResponse)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorMinimalResponse(varDaVinciConnectorMinimalResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "description")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "name")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorMinimalResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("createdAt", o.CreatedAt))
	logAttrs = append(logAttrs, slog.Any("description", o.Description))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("metadata", o.Metadata))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("updatedAt", o.UpdatedAt))
	logAttrs = append(logAttrs, slog.Any("version", o.Version))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorMinimalResponse struct {
	value *DaVinciConnectorMinimalResponse
	isSet bool
}

func (v NullableDaVinciConnectorMinimalResponse) Get() *DaVinciConnectorMinimalResponse {
	return v.value
}

func (v *NullableDaVinciConnectorMinimalResponse) Set(val *DaVinciConnectorMinimalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorMinimalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorMinimalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorMinimalResponse(val *DaVinciConnectorMinimalResponse) *NullableDaVinciConnectorMinimalResponse {
	return &NullableDaVinciConnectorMinimalResponse{value: val, isSet: true}
}

func (v NullableDaVinciConnectorMinimalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorMinimalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
