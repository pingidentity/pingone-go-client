// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the EnvironmentBillOfMaterials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentBillOfMaterials{}

// checks if the EnvironmentBillOfMaterials type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentBillOfMaterials{}

// EnvironmentBillOfMaterials struct for EnvironmentBillOfMaterials
type EnvironmentBillOfMaterials struct {
	Products             []EnvironmentBillOfMaterialsProduct     `json:"products"`
	SolutionType         *EnvironmentBillOfMaterialsSolutionType `json:"solutionType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentBillOfMaterials EnvironmentBillOfMaterials

// NewEnvironmentBillOfMaterials instantiates a new EnvironmentBillOfMaterials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentBillOfMaterials(products []EnvironmentBillOfMaterialsProduct) *EnvironmentBillOfMaterials {
	this := EnvironmentBillOfMaterials{}
	this.Products = products
	return &this
}

// NewEnvironmentBillOfMaterialsWithDefaults instantiates a new EnvironmentBillOfMaterials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentBillOfMaterialsWithDefaults() *EnvironmentBillOfMaterials {
	this := EnvironmentBillOfMaterials{}
	return &this
}

// GetProducts returns the Products field value
func (o *EnvironmentBillOfMaterials) GetProducts() []EnvironmentBillOfMaterialsProduct {
	if o == nil {
		var ret []EnvironmentBillOfMaterialsProduct
		return ret
	}

	return o.Products
}

// GetProductsOk returns a tuple with the Products field value
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterials) GetProductsOk() ([]EnvironmentBillOfMaterialsProduct, bool) {
	if o == nil {
		return nil, false
	}
	return o.Products, true
}

// SetProducts sets field value
func (o *EnvironmentBillOfMaterials) SetProducts(v []EnvironmentBillOfMaterialsProduct) {
	o.Products = v
}

// GetSolutionType returns the SolutionType field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterials) GetSolutionType() EnvironmentBillOfMaterialsSolutionType {
	if o == nil || IsNil(o.SolutionType) {
		var ret EnvironmentBillOfMaterialsSolutionType
		return ret
	}
	return *o.SolutionType
}

// GetSolutionTypeOk returns a tuple with the SolutionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterials) GetSolutionTypeOk() (*EnvironmentBillOfMaterialsSolutionType, bool) {
	if o == nil || IsNil(o.SolutionType) {
		return nil, false
	}
	return o.SolutionType, true
}

// HasSolutionType returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterials) HasSolutionType() bool {
	if o != nil && !IsNil(o.SolutionType) {
		return true
	}

	return false
}

// SetSolutionType gets a reference to the given EnvironmentBillOfMaterialsSolutionType and assigns it to the SolutionType field.
func (o *EnvironmentBillOfMaterials) SetSolutionType(v EnvironmentBillOfMaterialsSolutionType) {
	o.SolutionType = &v
}

func (o EnvironmentBillOfMaterials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentBillOfMaterials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["products"] = o.Products
	if !IsNil(o.SolutionType) {
		toSerialize["solutionType"] = o.SolutionType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentBillOfMaterials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"products",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentBillOfMaterials := _EnvironmentBillOfMaterials{}

	err = json.Unmarshal(data, &varEnvironmentBillOfMaterials)

	if err != nil {
		return err
	}

	*o = EnvironmentBillOfMaterials(varEnvironmentBillOfMaterials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "products")
		delete(additionalProperties, "solutionType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentBillOfMaterials) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("products", o.Products))
	if !IsNil(o.SolutionType) {
		logAttrs = append(logAttrs, slog.Any("solutionType", *o.SolutionType))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentBillOfMaterials struct {
	value *EnvironmentBillOfMaterials
	isSet bool
}

func (v NullableEnvironmentBillOfMaterials) Get() *EnvironmentBillOfMaterials {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterials) Set(val *EnvironmentBillOfMaterials) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterials) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterials(val *EnvironmentBillOfMaterials) *NullableEnvironmentBillOfMaterials {
	return &NullableEnvironmentBillOfMaterials{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
