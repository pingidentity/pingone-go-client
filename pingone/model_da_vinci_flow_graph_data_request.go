// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataRequest{}

// checks if the DaVinciFlowGraphDataRequest type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataRequest{}

// DaVinciFlowGraphDataRequest struct for DaVinciFlowGraphDataRequest
type DaVinciFlowGraphDataRequest struct {
	BoxSelectionEnabled  *bool                                `json:"boxSelectionEnabled,omitempty"`
	Data                 map[string]interface{}               `json:"data,omitempty"`
	Elements             *DaVinciFlowGraphDataRequestElements `json:"elements,omitempty"`
	MaxZoom              *BigFloat                            `json:"maxZoom,omitempty"`
	MinZoom              *BigFloat                            `json:"minZoom,omitempty"`
	Pan                  *DaVinciFlowGraphDataRequestPan      `json:"pan,omitempty"`
	PanningEnabled       *bool                                `json:"panningEnabled,omitempty"`
	Renderer             map[string]interface{}               `json:"renderer,omitempty"`
	UserPanningEnabled   *bool                                `json:"userPanningEnabled,omitempty"`
	UserZoomingEnabled   *bool                                `json:"userZoomingEnabled,omitempty"`
	Zoom                 *int32                               `json:"zoom,omitempty"`
	ZoomingEnabled       *bool                                `json:"zoomingEnabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataRequest DaVinciFlowGraphDataRequest

// NewDaVinciFlowGraphDataRequest instantiates a new DaVinciFlowGraphDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataRequest() *DaVinciFlowGraphDataRequest {
	this := DaVinciFlowGraphDataRequest{}
	return &this
}

// NewDaVinciFlowGraphDataRequestWithDefaults instantiates a new DaVinciFlowGraphDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataRequestWithDefaults() *DaVinciFlowGraphDataRequest {
	this := DaVinciFlowGraphDataRequest{}
	return &this
}

// GetBoxSelectionEnabled returns the BoxSelectionEnabled field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetBoxSelectionEnabled() bool {
	if o == nil || IsNil(o.BoxSelectionEnabled) {
		var ret bool
		return ret
	}
	return *o.BoxSelectionEnabled
}

// GetBoxSelectionEnabledOk returns a tuple with the BoxSelectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetBoxSelectionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BoxSelectionEnabled) {
		return nil, false
	}
	return o.BoxSelectionEnabled, true
}

// HasBoxSelectionEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasBoxSelectionEnabled() bool {
	if o != nil && !IsNil(o.BoxSelectionEnabled) {
		return true
	}

	return false
}

// SetBoxSelectionEnabled gets a reference to the given bool and assigns it to the BoxSelectionEnabled field.
func (o *DaVinciFlowGraphDataRequest) SetBoxSelectionEnabled(v bool) {
	o.BoxSelectionEnabled = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *DaVinciFlowGraphDataRequest) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetElements() DaVinciFlowGraphDataRequestElements {
	if o == nil || IsNil(o.Elements) {
		var ret DaVinciFlowGraphDataRequestElements
		return ret
	}
	return *o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetElementsOk() (*DaVinciFlowGraphDataRequestElements, bool) {
	if o == nil || IsNil(o.Elements) {
		return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasElements() bool {
	if o != nil && !IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given DaVinciFlowGraphDataRequestElements and assigns it to the Elements field.
func (o *DaVinciFlowGraphDataRequest) SetElements(v DaVinciFlowGraphDataRequestElements) {
	o.Elements = &v
}

// GetMaxZoom returns the MaxZoom field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetMaxZoom() BigFloat {
	if o == nil || IsNil(o.MaxZoom) {
		var ret BigFloat
		return ret
	}
	return *o.MaxZoom
}

// GetMaxZoomOk returns a tuple with the MaxZoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetMaxZoomOk() (*BigFloat, bool) {
	if o == nil || IsNil(o.MaxZoom) {
		return nil, false
	}
	return o.MaxZoom, true
}

// HasMaxZoom returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasMaxZoom() bool {
	if o != nil && !IsNil(o.MaxZoom) {
		return true
	}

	return false
}

// SetMaxZoom gets a reference to the given BigFloat and assigns it to the MaxZoom field.
func (o *DaVinciFlowGraphDataRequest) SetMaxZoom(v BigFloat) {
	o.MaxZoom = &v
}

// GetMinZoom returns the MinZoom field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetMinZoom() BigFloat {
	if o == nil || IsNil(o.MinZoom) {
		var ret BigFloat
		return ret
	}
	return *o.MinZoom
}

// GetMinZoomOk returns a tuple with the MinZoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetMinZoomOk() (*BigFloat, bool) {
	if o == nil || IsNil(o.MinZoom) {
		return nil, false
	}
	return o.MinZoom, true
}

// HasMinZoom returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasMinZoom() bool {
	if o != nil && !IsNil(o.MinZoom) {
		return true
	}

	return false
}

// SetMinZoom gets a reference to the given BigFloat and assigns it to the MinZoom field.
func (o *DaVinciFlowGraphDataRequest) SetMinZoom(v BigFloat) {
	o.MinZoom = &v
}

// GetPan returns the Pan field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetPan() DaVinciFlowGraphDataRequestPan {
	if o == nil || IsNil(o.Pan) {
		var ret DaVinciFlowGraphDataRequestPan
		return ret
	}
	return *o.Pan
}

// GetPanOk returns a tuple with the Pan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetPanOk() (*DaVinciFlowGraphDataRequestPan, bool) {
	if o == nil || IsNil(o.Pan) {
		return nil, false
	}
	return o.Pan, true
}

// HasPan returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasPan() bool {
	if o != nil && !IsNil(o.Pan) {
		return true
	}

	return false
}

// SetPan gets a reference to the given DaVinciFlowGraphDataRequestPan and assigns it to the Pan field.
func (o *DaVinciFlowGraphDataRequest) SetPan(v DaVinciFlowGraphDataRequestPan) {
	o.Pan = &v
}

// GetPanningEnabled returns the PanningEnabled field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetPanningEnabled() bool {
	if o == nil || IsNil(o.PanningEnabled) {
		var ret bool
		return ret
	}
	return *o.PanningEnabled
}

// GetPanningEnabledOk returns a tuple with the PanningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetPanningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PanningEnabled) {
		return nil, false
	}
	return o.PanningEnabled, true
}

// HasPanningEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasPanningEnabled() bool {
	if o != nil && !IsNil(o.PanningEnabled) {
		return true
	}

	return false
}

// SetPanningEnabled gets a reference to the given bool and assigns it to the PanningEnabled field.
func (o *DaVinciFlowGraphDataRequest) SetPanningEnabled(v bool) {
	o.PanningEnabled = &v
}

// GetRenderer returns the Renderer field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetRenderer() map[string]interface{} {
	if o == nil || IsNil(o.Renderer) {
		var ret map[string]interface{}
		return ret
	}
	return o.Renderer
}

// GetRendererOk returns a tuple with the Renderer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetRendererOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Renderer) {
		return map[string]interface{}{}, false
	}
	return o.Renderer, true
}

// HasRenderer returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasRenderer() bool {
	if o != nil && !IsNil(o.Renderer) {
		return true
	}

	return false
}

// SetRenderer gets a reference to the given map[string]interface{} and assigns it to the Renderer field.
func (o *DaVinciFlowGraphDataRequest) SetRenderer(v map[string]interface{}) {
	o.Renderer = v
}

// GetUserPanningEnabled returns the UserPanningEnabled field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetUserPanningEnabled() bool {
	if o == nil || IsNil(o.UserPanningEnabled) {
		var ret bool
		return ret
	}
	return *o.UserPanningEnabled
}

// GetUserPanningEnabledOk returns a tuple with the UserPanningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetUserPanningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserPanningEnabled) {
		return nil, false
	}
	return o.UserPanningEnabled, true
}

// HasUserPanningEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasUserPanningEnabled() bool {
	if o != nil && !IsNil(o.UserPanningEnabled) {
		return true
	}

	return false
}

// SetUserPanningEnabled gets a reference to the given bool and assigns it to the UserPanningEnabled field.
func (o *DaVinciFlowGraphDataRequest) SetUserPanningEnabled(v bool) {
	o.UserPanningEnabled = &v
}

// GetUserZoomingEnabled returns the UserZoomingEnabled field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetUserZoomingEnabled() bool {
	if o == nil || IsNil(o.UserZoomingEnabled) {
		var ret bool
		return ret
	}
	return *o.UserZoomingEnabled
}

// GetUserZoomingEnabledOk returns a tuple with the UserZoomingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetUserZoomingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserZoomingEnabled) {
		return nil, false
	}
	return o.UserZoomingEnabled, true
}

// HasUserZoomingEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasUserZoomingEnabled() bool {
	if o != nil && !IsNil(o.UserZoomingEnabled) {
		return true
	}

	return false
}

// SetUserZoomingEnabled gets a reference to the given bool and assigns it to the UserZoomingEnabled field.
func (o *DaVinciFlowGraphDataRequest) SetUserZoomingEnabled(v bool) {
	o.UserZoomingEnabled = &v
}

// GetZoom returns the Zoom field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetZoom() int32 {
	if o == nil || IsNil(o.Zoom) {
		var ret int32
		return ret
	}
	return *o.Zoom
}

// GetZoomOk returns a tuple with the Zoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetZoomOk() (*int32, bool) {
	if o == nil || IsNil(o.Zoom) {
		return nil, false
	}
	return o.Zoom, true
}

// HasZoom returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasZoom() bool {
	if o != nil && !IsNil(o.Zoom) {
		return true
	}

	return false
}

// SetZoom gets a reference to the given int32 and assigns it to the Zoom field.
func (o *DaVinciFlowGraphDataRequest) SetZoom(v int32) {
	o.Zoom = &v
}

// GetZoomingEnabled returns the ZoomingEnabled field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequest) GetZoomingEnabled() bool {
	if o == nil || IsNil(o.ZoomingEnabled) {
		var ret bool
		return ret
	}
	return *o.ZoomingEnabled
}

// GetZoomingEnabledOk returns a tuple with the ZoomingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequest) GetZoomingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ZoomingEnabled) {
		return nil, false
	}
	return o.ZoomingEnabled, true
}

// HasZoomingEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequest) HasZoomingEnabled() bool {
	if o != nil && !IsNil(o.ZoomingEnabled) {
		return true
	}

	return false
}

// SetZoomingEnabled gets a reference to the given bool and assigns it to the ZoomingEnabled field.
func (o *DaVinciFlowGraphDataRequest) SetZoomingEnabled(v bool) {
	o.ZoomingEnabled = &v
}

func (o DaVinciFlowGraphDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BoxSelectionEnabled) {
		toSerialize["boxSelectionEnabled"] = o.BoxSelectionEnabled
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Elements) {
		toSerialize["elements"] = o.Elements
	}
	if !IsNil(o.MaxZoom) {
		toSerialize["maxZoom"] = o.MaxZoom
	}
	if !IsNil(o.MinZoom) {
		toSerialize["minZoom"] = o.MinZoom
	}
	if !IsNil(o.Pan) {
		toSerialize["pan"] = o.Pan
	}
	if !IsNil(o.PanningEnabled) {
		toSerialize["panningEnabled"] = o.PanningEnabled
	}
	if !IsNil(o.Renderer) {
		toSerialize["renderer"] = o.Renderer
	}
	if !IsNil(o.UserPanningEnabled) {
		toSerialize["userPanningEnabled"] = o.UserPanningEnabled
	}
	if !IsNil(o.UserZoomingEnabled) {
		toSerialize["userZoomingEnabled"] = o.UserZoomingEnabled
	}
	if !IsNil(o.Zoom) {
		toSerialize["zoom"] = o.Zoom
	}
	if !IsNil(o.ZoomingEnabled) {
		toSerialize["zoomingEnabled"] = o.ZoomingEnabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataRequest) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowGraphDataRequest := _DaVinciFlowGraphDataRequest{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataRequest)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataRequest(varDaVinciFlowGraphDataRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "boxSelectionEnabled")
		delete(additionalProperties, "data")
		delete(additionalProperties, "elements")
		delete(additionalProperties, "maxZoom")
		delete(additionalProperties, "minZoom")
		delete(additionalProperties, "pan")
		delete(additionalProperties, "panningEnabled")
		delete(additionalProperties, "renderer")
		delete(additionalProperties, "userPanningEnabled")
		delete(additionalProperties, "userZoomingEnabled")
		delete(additionalProperties, "zoom")
		delete(additionalProperties, "zoomingEnabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataRequest) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.BoxSelectionEnabled) {
		logAttrs = append(logAttrs, slog.Any("boxSelectionEnabled", *o.BoxSelectionEnabled))
	}
	if !IsNil(o.Data) {
		logAttrs = append(logAttrs, slog.Any("data", o.Data))
	}
	if !IsNil(o.Elements) {
		logAttrs = append(logAttrs, slog.Any("elements", *o.Elements))
	}
	if !IsNil(o.MaxZoom) {
		logAttrs = append(logAttrs, slog.Any("maxZoom", *o.MaxZoom))
	}
	if !IsNil(o.MinZoom) {
		logAttrs = append(logAttrs, slog.Any("minZoom", *o.MinZoom))
	}
	if !IsNil(o.Pan) {
		logAttrs = append(logAttrs, slog.Any("pan", *o.Pan))
	}
	if !IsNil(o.PanningEnabled) {
		logAttrs = append(logAttrs, slog.Any("panningEnabled", *o.PanningEnabled))
	}
	if !IsNil(o.Renderer) {
		logAttrs = append(logAttrs, slog.Any("renderer", o.Renderer))
	}
	if !IsNil(o.UserPanningEnabled) {
		logAttrs = append(logAttrs, slog.Any("userPanningEnabled", *o.UserPanningEnabled))
	}
	if !IsNil(o.UserZoomingEnabled) {
		logAttrs = append(logAttrs, slog.Any("userZoomingEnabled", *o.UserZoomingEnabled))
	}
	if !IsNil(o.Zoom) {
		logAttrs = append(logAttrs, slog.Any("zoom", *o.Zoom))
	}
	if !IsNil(o.ZoomingEnabled) {
		logAttrs = append(logAttrs, slog.Any("zoomingEnabled", *o.ZoomingEnabled))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataRequest struct {
	value *DaVinciFlowGraphDataRequest
	isSet bool
}

func (v NullableDaVinciFlowGraphDataRequest) Get() *DaVinciFlowGraphDataRequest {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataRequest) Set(val *DaVinciFlowGraphDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataRequest(val *DaVinciFlowGraphDataRequest) *NullableDaVinciFlowGraphDataRequest {
	return &NullableDaVinciFlowGraphDataRequest{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
