// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// ForbiddenErrorCode the model 'ForbiddenErrorCode'
type ForbiddenErrorCode string

// List of Forbidden_Error_Code
const (
	FORBIDDENERRORCODE_ACCESS_FAILED ForbiddenErrorCode = "ACCESS_FAILED"
)

// All allowed values of ForbiddenErrorCode enum
var AllowedForbiddenErrorCodeEnumValues = []ForbiddenErrorCode{
	"ACCESS_FAILED",
}

func (v *ForbiddenErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ForbiddenErrorCode(value)
	for _, existing := range AllowedForbiddenErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ForbiddenErrorCode(fmt.Sprintf("%s", value))
	return nil
}

// NewForbiddenErrorCodeFromValue returns a pointer to a valid ForbiddenErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewForbiddenErrorCodeFromValue(v string) (*ForbiddenErrorCode, error) {
	ev := ForbiddenErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ForbiddenErrorCode: valid values are %v", v, AllowedForbiddenErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ForbiddenErrorCode) IsValid() bool {
	for _, existing := range AllowedForbiddenErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Forbidden_Error_Code value
func (v ForbiddenErrorCode) Ptr() *ForbiddenErrorCode {
	return &v
}

type NullableForbiddenErrorCode struct {
	value *ForbiddenErrorCode
	isSet bool
}

func (v NullableForbiddenErrorCode) Get() *ForbiddenErrorCode {
	return v.value
}

func (v *NullableForbiddenErrorCode) Set(val *ForbiddenErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenErrorCode(val *ForbiddenErrorCode) *NullableForbiddenErrorCode {
	return &NullableForbiddenErrorCode{value: val, isSet: true}
}

func (v NullableForbiddenErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
