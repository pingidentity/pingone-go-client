/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the EnvironmentBillOfMaterialsProductBookmark type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentBillOfMaterialsProductBookmark{}

// EnvironmentBillOfMaterialsProductBookmark struct for EnvironmentBillOfMaterialsProductBookmark
type EnvironmentBillOfMaterialsProductBookmark struct {
	Href                 string `json:"href"`
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentBillOfMaterialsProductBookmark EnvironmentBillOfMaterialsProductBookmark

// NewEnvironmentBillOfMaterialsProductBookmark instantiates a new EnvironmentBillOfMaterialsProductBookmark object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentBillOfMaterialsProductBookmark(href string, name string) *EnvironmentBillOfMaterialsProductBookmark {
	this := EnvironmentBillOfMaterialsProductBookmark{}
	this.Href = href
	this.Name = name
	return &this
}

// NewEnvironmentBillOfMaterialsProductBookmarkWithDefaults instantiates a new EnvironmentBillOfMaterialsProductBookmark object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentBillOfMaterialsProductBookmarkWithDefaults() *EnvironmentBillOfMaterialsProductBookmark {
	this := EnvironmentBillOfMaterialsProductBookmark{}
	return &this
}

// GetHref returns the Href field value
func (o *EnvironmentBillOfMaterialsProductBookmark) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProductBookmark) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *EnvironmentBillOfMaterialsProductBookmark) SetHref(v string) {
	o.Href = v
}

// GetName returns the Name field value
func (o *EnvironmentBillOfMaterialsProductBookmark) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProductBookmark) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentBillOfMaterialsProductBookmark) SetName(v string) {
	o.Name = v
}

func (o EnvironmentBillOfMaterialsProductBookmark) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentBillOfMaterialsProductBookmark) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentBillOfMaterialsProductBookmark) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentBillOfMaterialsProductBookmark := _EnvironmentBillOfMaterialsProductBookmark{}

	err = json.Unmarshal(data, &varEnvironmentBillOfMaterialsProductBookmark)

	if err != nil {
		return err
	}

	*o = EnvironmentBillOfMaterialsProductBookmark(varEnvironmentBillOfMaterialsProductBookmark)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentBillOfMaterialsProductBookmark) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("href", o.Href))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentBillOfMaterialsProductBookmark struct {
	value *EnvironmentBillOfMaterialsProductBookmark
	isSet bool
}

func (v NullableEnvironmentBillOfMaterialsProductBookmark) Get() *EnvironmentBillOfMaterialsProductBookmark {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterialsProductBookmark) Set(val *EnvironmentBillOfMaterialsProductBookmark) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterialsProductBookmark) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterialsProductBookmark) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterialsProductBookmark(val *EnvironmentBillOfMaterialsProductBookmark) *NullableEnvironmentBillOfMaterialsProductBookmark {
	return &NullableEnvironmentBillOfMaterialsProductBookmark{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterialsProductBookmark) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterialsProductBookmark) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
