// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciConnectorCollectionMinimalResponseEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorCollectionMinimalResponseEmbedded{}

// checks if the DaVinciConnectorCollectionMinimalResponseEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorCollectionMinimalResponseEmbedded{}

// DaVinciConnectorCollectionMinimalResponseEmbedded struct for DaVinciConnectorCollectionMinimalResponseEmbedded
type DaVinciConnectorCollectionMinimalResponseEmbedded struct {
	Connectors           []DaVinciConnectorMinimalResponse `json:"connectors"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorCollectionMinimalResponseEmbedded DaVinciConnectorCollectionMinimalResponseEmbedded

// NewDaVinciConnectorCollectionMinimalResponseEmbedded instantiates a new DaVinciConnectorCollectionMinimalResponseEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorCollectionMinimalResponseEmbedded(connectors []DaVinciConnectorMinimalResponse) *DaVinciConnectorCollectionMinimalResponseEmbedded {
	this := DaVinciConnectorCollectionMinimalResponseEmbedded{}
	this.Connectors = connectors
	return &this
}

// NewDaVinciConnectorCollectionMinimalResponseEmbeddedWithDefaults instantiates a new DaVinciConnectorCollectionMinimalResponseEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorCollectionMinimalResponseEmbeddedWithDefaults() *DaVinciConnectorCollectionMinimalResponseEmbedded {
	this := DaVinciConnectorCollectionMinimalResponseEmbedded{}
	return &this
}

// GetConnectors returns the Connectors field value
func (o *DaVinciConnectorCollectionMinimalResponseEmbedded) GetConnectors() []DaVinciConnectorMinimalResponse {
	if o == nil {
		var ret []DaVinciConnectorMinimalResponse
		return ret
	}

	return o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorCollectionMinimalResponseEmbedded) GetConnectorsOk() ([]DaVinciConnectorMinimalResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Connectors, true
}

// SetConnectors sets field value
func (o *DaVinciConnectorCollectionMinimalResponseEmbedded) SetConnectors(v []DaVinciConnectorMinimalResponse) {
	o.Connectors = v
}

func (o DaVinciConnectorCollectionMinimalResponseEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorCollectionMinimalResponseEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectors"] = o.Connectors

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorCollectionMinimalResponseEmbedded) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorCollectionMinimalResponseEmbedded := _DaVinciConnectorCollectionMinimalResponseEmbedded{}

	err = json.Unmarshal(data, &varDaVinciConnectorCollectionMinimalResponseEmbedded)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorCollectionMinimalResponseEmbedded(varDaVinciConnectorCollectionMinimalResponseEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorCollectionMinimalResponseEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("connectors", o.Connectors))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorCollectionMinimalResponseEmbedded struct {
	value *DaVinciConnectorCollectionMinimalResponseEmbedded
	isSet bool
}

func (v NullableDaVinciConnectorCollectionMinimalResponseEmbedded) Get() *DaVinciConnectorCollectionMinimalResponseEmbedded {
	return v.value
}

func (v *NullableDaVinciConnectorCollectionMinimalResponseEmbedded) Set(val *DaVinciConnectorCollectionMinimalResponseEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorCollectionMinimalResponseEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorCollectionMinimalResponseEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorCollectionMinimalResponseEmbedded(val *DaVinciConnectorCollectionMinimalResponseEmbedded) *NullableDaVinciConnectorCollectionMinimalResponseEmbedded {
	return &NullableDaVinciConnectorCollectionMinimalResponseEmbedded{value: val, isSet: true}
}

func (v NullableDaVinciConnectorCollectionMinimalResponseEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorCollectionMinimalResponseEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
