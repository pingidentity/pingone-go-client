// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciVariableReplaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciVariableReplaceRequest{}

// checks if the DaVinciVariableReplaceRequest type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciVariableReplaceRequest{}

// DaVinciVariableReplaceRequest struct for DaVinciVariableReplaceRequest
type DaVinciVariableReplaceRequest struct {
	Name                 string                                `json:"name" validate:"regexp=^(?=\\\\S)[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\/.'_ -]*(?!.*((<)|(\\\\$\\\\{)))"`
	Context              DaVinciVariableReplaceRequestContext  `json:"context"`
	DataType             DaVinciVariableReplaceRequestDataType `json:"dataType"`
	Mutable              bool                                  `json:"mutable"`
	DisplayName          *string                               `json:"displayName,omitempty" validate:"regexp=^(?=\\\\S)[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\/.'_ -]*(?!.*((<)|(\\\\$\\\\{)))"`
	Flow                 *ResourceRelationshipDaVinci          `json:"flow,omitempty"`
	Max                  *int32                                `json:"max,omitempty"`
	Min                  *int32                                `json:"min,omitempty"`
	Value                *DaVinciVariableReplaceRequestValue   `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciVariableReplaceRequest DaVinciVariableReplaceRequest

// NewDaVinciVariableReplaceRequest instantiates a new DaVinciVariableReplaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciVariableReplaceRequest(name string, context DaVinciVariableReplaceRequestContext, dataType DaVinciVariableReplaceRequestDataType, mutable bool) *DaVinciVariableReplaceRequest {
	this := DaVinciVariableReplaceRequest{}
	this.Name = name
	this.Context = context
	this.DataType = dataType
	this.Mutable = mutable
	var max int32 = 2000
	this.Max = &max
	var min int32 = 0
	this.Min = &min
	return &this
}

// NewDaVinciVariableReplaceRequestWithDefaults instantiates a new DaVinciVariableReplaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciVariableReplaceRequestWithDefaults() *DaVinciVariableReplaceRequest {
	this := DaVinciVariableReplaceRequest{}
	var max int32 = 2000
	this.Max = &max
	var min int32 = 0
	this.Min = &min
	return &this
}

// GetName returns the Name field value
func (o *DaVinciVariableReplaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciVariableReplaceRequest) SetName(v string) {
	o.Name = v
}

// GetContext returns the Context field value
func (o *DaVinciVariableReplaceRequest) GetContext() DaVinciVariableReplaceRequestContext {
	if o == nil {
		var ret DaVinciVariableReplaceRequestContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetContextOk() (*DaVinciVariableReplaceRequestContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *DaVinciVariableReplaceRequest) SetContext(v DaVinciVariableReplaceRequestContext) {
	o.Context = v
}

// GetDataType returns the DataType field value
func (o *DaVinciVariableReplaceRequest) GetDataType() DaVinciVariableReplaceRequestDataType {
	if o == nil {
		var ret DaVinciVariableReplaceRequestDataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetDataTypeOk() (*DaVinciVariableReplaceRequestDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *DaVinciVariableReplaceRequest) SetDataType(v DaVinciVariableReplaceRequestDataType) {
	o.DataType = v
}

// GetMutable returns the Mutable field value
func (o *DaVinciVariableReplaceRequest) GetMutable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Mutable
}

// GetMutableOk returns a tuple with the Mutable field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetMutableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mutable, true
}

// SetMutable sets field value
func (o *DaVinciVariableReplaceRequest) SetMutable(v bool) {
	o.Mutable = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DaVinciVariableReplaceRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DaVinciVariableReplaceRequest) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DaVinciVariableReplaceRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *DaVinciVariableReplaceRequest) GetFlow() ResourceRelationshipDaVinci {
	if o == nil || IsNil(o.Flow) {
		var ret ResourceRelationshipDaVinci
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetFlowOk() (*ResourceRelationshipDaVinci, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *DaVinciVariableReplaceRequest) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given ResourceRelationshipDaVinci and assigns it to the Flow field.
func (o *DaVinciVariableReplaceRequest) SetFlow(v ResourceRelationshipDaVinci) {
	o.Flow = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *DaVinciVariableReplaceRequest) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *DaVinciVariableReplaceRequest) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *DaVinciVariableReplaceRequest) SetMax(v int32) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *DaVinciVariableReplaceRequest) GetMin() int32 {
	if o == nil || IsNil(o.Min) {
		var ret int32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetMinOk() (*int32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *DaVinciVariableReplaceRequest) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given int32 and assigns it to the Min field.
func (o *DaVinciVariableReplaceRequest) SetMin(v int32) {
	o.Min = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DaVinciVariableReplaceRequest) GetValue() DaVinciVariableReplaceRequestValue {
	if o == nil || IsNil(o.Value) {
		var ret DaVinciVariableReplaceRequestValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableReplaceRequest) GetValueOk() (*DaVinciVariableReplaceRequestValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DaVinciVariableReplaceRequest) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given DaVinciVariableReplaceRequestValue and assigns it to the Value field.
func (o *DaVinciVariableReplaceRequest) SetValue(v DaVinciVariableReplaceRequestValue) {
	o.Value = &v
}

func (o DaVinciVariableReplaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciVariableReplaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["context"] = o.Context
	toSerialize["dataType"] = o.DataType
	toSerialize["mutable"] = o.Mutable
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciVariableReplaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"context",
		"dataType",
		"mutable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciVariableReplaceRequest := _DaVinciVariableReplaceRequest{}

	err = json.Unmarshal(data, &varDaVinciVariableReplaceRequest)

	if err != nil {
		return err
	}

	*o = DaVinciVariableReplaceRequest(varDaVinciVariableReplaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "context")
		delete(additionalProperties, "dataType")
		delete(additionalProperties, "mutable")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "max")
		delete(additionalProperties, "min")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciVariableReplaceRequest) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("context", o.Context))
	logAttrs = append(logAttrs, slog.Any("dataType", o.DataType))
	logAttrs = append(logAttrs, slog.Any("mutable", o.Mutable))
	if !IsNil(o.DisplayName) {
		logAttrs = append(logAttrs, slog.Any("displayName", *o.DisplayName))
	}
	if !IsNil(o.Flow) {
		logAttrs = append(logAttrs, slog.Any("flow", *o.Flow))
	}
	if !IsNil(o.Max) {
		logAttrs = append(logAttrs, slog.Any("max", *o.Max))
	}
	if !IsNil(o.Min) {
		logAttrs = append(logAttrs, slog.Any("min", *o.Min))
	}
	if !IsNil(o.Value) {
		logAttrs = append(logAttrs, slog.Any("value", *o.Value))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciVariableReplaceRequest struct {
	value *DaVinciVariableReplaceRequest
	isSet bool
}

func (v NullableDaVinciVariableReplaceRequest) Get() *DaVinciVariableReplaceRequest {
	return v.value
}

func (v *NullableDaVinciVariableReplaceRequest) Set(val *DaVinciVariableReplaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableReplaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableReplaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableReplaceRequest(val *DaVinciVariableReplaceRequest) *NullableDaVinciVariableReplaceRequest {
	return &NullableDaVinciVariableReplaceRequest{value: val, isSet: true}
}

func (v NullableDaVinciVariableReplaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableReplaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
