// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowInputSchemaResponseItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowInputSchemaResponseItem{}

// checks if the DaVinciFlowInputSchemaResponseItem type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowInputSchemaResponseItem{}

// DaVinciFlowInputSchemaResponseItem struct for DaVinciFlowInputSchemaResponseItem
type DaVinciFlowInputSchemaResponseItem struct {
	Description          *string `json:"description,omitempty"`
	IsExpanded           *bool   `json:"isExpanded,omitempty"`
	PreferredControlType string  `json:"preferredControlType"`
	PreferredDataType    string  `json:"preferredDataType"`
	PropertyName         string  `json:"propertyName"`
	Required             *bool   `json:"required,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowInputSchemaResponseItem DaVinciFlowInputSchemaResponseItem

// NewDaVinciFlowInputSchemaResponseItem instantiates a new DaVinciFlowInputSchemaResponseItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowInputSchemaResponseItem(preferredControlType string, preferredDataType string, propertyName string) *DaVinciFlowInputSchemaResponseItem {
	this := DaVinciFlowInputSchemaResponseItem{}
	this.PreferredControlType = preferredControlType
	this.PreferredDataType = preferredDataType
	this.PropertyName = propertyName
	return &this
}

// NewDaVinciFlowInputSchemaResponseItemWithDefaults instantiates a new DaVinciFlowInputSchemaResponseItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowInputSchemaResponseItemWithDefaults() *DaVinciFlowInputSchemaResponseItem {
	this := DaVinciFlowInputSchemaResponseItem{}
	return &this
}

// GetDescription returns the Description field value if set, nil otherwise
func (o *DaVinciFlowInputSchemaResponseItem) GetDescription() *string {
	if o == nil {
		return nil
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaResponseItem) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DaVinciFlowInputSchemaResponseItem) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription sets field value
func (o *DaVinciFlowInputSchemaResponseItem) SetDescription(v string) {
	if o == nil {
		return
	}
	o.Description = &v
}

// GetIsExpanded returns the IsExpanded field value if set, nil otherwise
func (o *DaVinciFlowInputSchemaResponseItem) GetIsExpanded() *bool {
	if o == nil {
		return nil
	}

	return o.IsExpanded
}

// GetIsExpandedOk returns a tuple with the IsExpanded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaResponseItem) GetIsExpandedOk() (*bool, bool) {
	if o == nil || o.IsExpanded == nil {
		return nil, false
	}
	return o.IsExpanded, true
}

// HasIsExpanded returns a boolean if a field has been set.
func (o *DaVinciFlowInputSchemaResponseItem) HasIsExpanded() bool {
	if o != nil && o.IsExpanded != nil {
		return true
	}

	return false
}

// SetIsExpanded sets field value
func (o *DaVinciFlowInputSchemaResponseItem) SetIsExpanded(v bool) {
	if o == nil {
		return
	}
	o.IsExpanded = &v
}

// GetPreferredControlType returns the PreferredControlType field value
func (o *DaVinciFlowInputSchemaResponseItem) GetPreferredControlType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreferredControlType
}

// GetPreferredControlTypeOk returns a tuple with the PreferredControlType field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaResponseItem) GetPreferredControlTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreferredControlType, true
}

// SetPreferredControlType sets field value
func (o *DaVinciFlowInputSchemaResponseItem) SetPreferredControlType(v string) {
	o.PreferredControlType = v
}

// GetPreferredDataType returns the PreferredDataType field value
func (o *DaVinciFlowInputSchemaResponseItem) GetPreferredDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreferredDataType
}

// GetPreferredDataTypeOk returns a tuple with the PreferredDataType field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaResponseItem) GetPreferredDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreferredDataType, true
}

// SetPreferredDataType sets field value
func (o *DaVinciFlowInputSchemaResponseItem) SetPreferredDataType(v string) {
	o.PreferredDataType = v
}

// GetPropertyName returns the PropertyName field value
func (o *DaVinciFlowInputSchemaResponseItem) GetPropertyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaResponseItem) GetPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyName, true
}

// SetPropertyName sets field value
func (o *DaVinciFlowInputSchemaResponseItem) SetPropertyName(v string) {
	o.PropertyName = v
}

// GetRequired returns the Required field value if set, nil otherwise
func (o *DaVinciFlowInputSchemaResponseItem) GetRequired() *bool {
	if o == nil {
		return nil
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowInputSchemaResponseItem) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *DaVinciFlowInputSchemaResponseItem) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired sets field value
func (o *DaVinciFlowInputSchemaResponseItem) SetRequired(v bool) {
	if o == nil {
		return
	}
	o.Required = &v
}

func (o DaVinciFlowInputSchemaResponseItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowInputSchemaResponseItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IsExpanded != nil {
		toSerialize["isExpanded"] = o.IsExpanded
	}
	toSerialize["preferredControlType"] = o.PreferredControlType
	toSerialize["preferredDataType"] = o.PreferredDataType
	toSerialize["propertyName"] = o.PropertyName
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowInputSchemaResponseItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"preferredControlType",
		"preferredDataType",
		"propertyName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowInputSchemaResponseItem := _DaVinciFlowInputSchemaResponseItem{}

	err = json.Unmarshal(data, &varDaVinciFlowInputSchemaResponseItem)

	if err != nil {
		return err
	}

	*o = DaVinciFlowInputSchemaResponseItem(varDaVinciFlowInputSchemaResponseItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "isExpanded")
		delete(additionalProperties, "preferredControlType")
		delete(additionalProperties, "preferredDataType")
		delete(additionalProperties, "propertyName")
		delete(additionalProperties, "required")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowInputSchemaResponseItem) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if o.Description != nil {
		logAttrs = append(logAttrs, slog.Any("description", o.Description))
	}
	if o.IsExpanded != nil {
		logAttrs = append(logAttrs, slog.Any("isExpanded", o.IsExpanded))
	}
	logAttrs = append(logAttrs, slog.Any("preferredControlType", o.PreferredControlType))
	logAttrs = append(logAttrs, slog.Any("preferredDataType", o.PreferredDataType))
	logAttrs = append(logAttrs, slog.Any("propertyName", o.PropertyName))
	if o.Required != nil {
		logAttrs = append(logAttrs, slog.Any("required", o.Required))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowInputSchemaResponseItem struct {
	value *DaVinciFlowInputSchemaResponseItem
	isSet bool
}

func (v NullableDaVinciFlowInputSchemaResponseItem) Get() *DaVinciFlowInputSchemaResponseItem {
	return v.value
}

func (v *NullableDaVinciFlowInputSchemaResponseItem) Set(val *DaVinciFlowInputSchemaResponseItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowInputSchemaResponseItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowInputSchemaResponseItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowInputSchemaResponseItem(val *DaVinciFlowInputSchemaResponseItem) *NullableDaVinciFlowInputSchemaResponseItem {
	return &NullableDaVinciFlowInputSchemaResponseItem{value: val, isSet: true}
}

func (v NullableDaVinciFlowInputSchemaResponseItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowInputSchemaResponseItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
