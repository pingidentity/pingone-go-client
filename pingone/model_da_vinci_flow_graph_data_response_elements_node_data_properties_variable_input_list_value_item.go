// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem{}

// checks if the DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem{}

// DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem struct for DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem
type DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem struct {
	Name                 string        `json:"name"`
	PreferredDataType    []interface{} `json:"preferredDataType"`
	PreferredControlType *string       `json:"preferredControlType,omitempty"`
	Value                *string       `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem

// NewDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem instantiates a new DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem(name string, preferredDataType []interface{}) *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem {
	this := DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem{}
	this.Name = name
	this.PreferredDataType = preferredDataType
	return &this
}

// NewDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItemWithDefaults instantiates a new DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItemWithDefaults() *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem {
	this := DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem{}
	return &this
}

// GetName returns the Name field value
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) SetName(v string) {
	o.Name = v
}

// GetPreferredDataType returns the PreferredDataType field value
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetPreferredDataType() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.PreferredDataType
}

// GetPreferredDataTypeOk returns a tuple with the PreferredDataType field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetPreferredDataTypeOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredDataType, true
}

// SetPreferredDataType sets field value
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) SetPreferredDataType(v []interface{}) {
	o.PreferredDataType = v
}

// GetPreferredControlType returns the PreferredControlType field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetPreferredControlType() string {
	if o == nil || IsNil(o.PreferredControlType) {
		var ret string
		return ret
	}
	return *o.PreferredControlType
}

// GetPreferredControlTypeOk returns a tuple with the PreferredControlType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetPreferredControlTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredControlType) {
		return nil, false
	}
	return o.PreferredControlType, true
}

// HasPreferredControlType returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) HasPreferredControlType() bool {
	if o != nil && !IsNil(o.PreferredControlType) {
		return true
	}

	return false
}

// SetPreferredControlType gets a reference to the given string and assigns it to the PreferredControlType field.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) SetPreferredControlType(v string) {
	o.PreferredControlType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) SetValue(v string) {
	o.Value = &v
}

func (o DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["preferredDataType"] = o.PreferredDataType
	if !IsNil(o.PreferredControlType) {
		toSerialize["preferredControlType"] = o.PreferredControlType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"preferredDataType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem := _DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem(varDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "preferredDataType")
		delete(additionalProperties, "preferredControlType")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("preferredDataType", o.PreferredDataType))
	if !IsNil(o.PreferredControlType) {
		logAttrs = append(logAttrs, slog.Any("preferredControlType", *o.PreferredControlType))
	}
	if !IsNil(o.Value) {
		logAttrs = append(logAttrs, slog.Any("value", *o.Value))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem struct {
	value *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem
	isSet bool
}

func (v NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) Get() *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) Set(val *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem(val *DaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) *NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem {
	return &NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNodeDataPropertiesVariableInputListValueItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
