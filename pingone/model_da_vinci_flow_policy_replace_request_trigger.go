// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowPolicyReplaceRequestTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyReplaceRequestTrigger{}

// checks if the DaVinciFlowPolicyReplaceRequestTrigger type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyReplaceRequestTrigger{}

// DaVinciFlowPolicyReplaceRequestTrigger struct for DaVinciFlowPolicyReplaceRequestTrigger
type DaVinciFlowPolicyReplaceRequestTrigger struct {
	Configuration        *DaVinciFlowPolicyReplaceRequestTriggerConfiguration `json:"configuration,omitempty"`
	Type                 *string                                              `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyReplaceRequestTrigger DaVinciFlowPolicyReplaceRequestTrigger

// NewDaVinciFlowPolicyReplaceRequestTrigger instantiates a new DaVinciFlowPolicyReplaceRequestTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyReplaceRequestTrigger() *DaVinciFlowPolicyReplaceRequestTrigger {
	this := DaVinciFlowPolicyReplaceRequestTrigger{}
	return &this
}

// NewDaVinciFlowPolicyReplaceRequestTriggerWithDefaults instantiates a new DaVinciFlowPolicyReplaceRequestTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyReplaceRequestTriggerWithDefaults() *DaVinciFlowPolicyReplaceRequestTrigger {
	this := DaVinciFlowPolicyReplaceRequestTrigger{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) GetConfiguration() DaVinciFlowPolicyReplaceRequestTriggerConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret DaVinciFlowPolicyReplaceRequestTriggerConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) GetConfigurationOk() (*DaVinciFlowPolicyReplaceRequestTriggerConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given DaVinciFlowPolicyReplaceRequestTriggerConfiguration and assigns it to the Configuration field.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) SetConfiguration(v DaVinciFlowPolicyReplaceRequestTriggerConfiguration) {
	o.Configuration = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DaVinciFlowPolicyReplaceRequestTrigger) SetType(v string) {
	o.Type = &v
}

func (o DaVinciFlowPolicyReplaceRequestTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyReplaceRequestTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyReplaceRequestTrigger) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowPolicyReplaceRequestTrigger := _DaVinciFlowPolicyReplaceRequestTrigger{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyReplaceRequestTrigger)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyReplaceRequestTrigger(varDaVinciFlowPolicyReplaceRequestTrigger)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyReplaceRequestTrigger) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Configuration) {
		logAttrs = append(logAttrs, slog.Any("configuration", *o.Configuration))
	}
	if !IsNil(o.Type) {
		logAttrs = append(logAttrs, slog.Any("type", *o.Type))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyReplaceRequestTrigger struct {
	value *DaVinciFlowPolicyReplaceRequestTrigger
	isSet bool
}

func (v NullableDaVinciFlowPolicyReplaceRequestTrigger) Get() *DaVinciFlowPolicyReplaceRequestTrigger {
	return v.value
}

func (v *NullableDaVinciFlowPolicyReplaceRequestTrigger) Set(val *DaVinciFlowPolicyReplaceRequestTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyReplaceRequestTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyReplaceRequestTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyReplaceRequestTrigger(val *DaVinciFlowPolicyReplaceRequestTrigger) *NullableDaVinciFlowPolicyReplaceRequestTrigger {
	return &NullableDaVinciFlowPolicyReplaceRequestTrigger{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyReplaceRequestTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyReplaceRequestTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
