// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyEventsCollectionEmbeddedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyEventsCollectionEmbeddedEvent{}

// checks if the DaVinciFlowPolicyEventsCollectionEmbeddedEvent type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyEventsCollectionEmbeddedEvent{}

// DaVinciFlowPolicyEventsCollectionEmbeddedEvent struct for DaVinciFlowPolicyEventsCollectionEmbeddedEvent
type DaVinciFlowPolicyEventsCollectionEmbeddedEvent struct {
	Environment          DaVinciFlowPolicyEventsCollectionEmbeddedEventEnvironment `json:"environment"`
	Flow                 DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow        `json:"flow"`
	Events               []DaVinciFlowPolicyEventsCollectionEmbeddedEventEvent     `json:"events,omitempty"`
	SuccessCount         *float32                                                  `json:"successCount,omitempty"`
	TotalCount           *float32                                                  `json:"totalCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyEventsCollectionEmbeddedEvent DaVinciFlowPolicyEventsCollectionEmbeddedEvent

// NewDaVinciFlowPolicyEventsCollectionEmbeddedEvent instantiates a new DaVinciFlowPolicyEventsCollectionEmbeddedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyEventsCollectionEmbeddedEvent(environment DaVinciFlowPolicyEventsCollectionEmbeddedEventEnvironment, flow DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) *DaVinciFlowPolicyEventsCollectionEmbeddedEvent {
	this := DaVinciFlowPolicyEventsCollectionEmbeddedEvent{}
	this.Environment = environment
	this.Flow = flow
	return &this
}

// NewDaVinciFlowPolicyEventsCollectionEmbeddedEventWithDefaults instantiates a new DaVinciFlowPolicyEventsCollectionEmbeddedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyEventsCollectionEmbeddedEventWithDefaults() *DaVinciFlowPolicyEventsCollectionEmbeddedEvent {
	this := DaVinciFlowPolicyEventsCollectionEmbeddedEvent{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetEnvironment() DaVinciFlowPolicyEventsCollectionEmbeddedEventEnvironment {
	if o == nil {
		var ret DaVinciFlowPolicyEventsCollectionEmbeddedEventEnvironment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetEnvironmentOk() (*DaVinciFlowPolicyEventsCollectionEmbeddedEventEnvironment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) SetEnvironment(v DaVinciFlowPolicyEventsCollectionEmbeddedEventEnvironment) {
	o.Environment = v
}

// GetFlow returns the Flow field value
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetFlow() DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow {
	if o == nil {
		var ret DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow
		return ret
	}

	return o.Flow
}

// GetFlowOk returns a tuple with the Flow field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetFlowOk() (*DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flow, true
}

// SetFlow sets field value
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) SetFlow(v DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) {
	o.Flow = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetEvents() []DaVinciFlowPolicyEventsCollectionEmbeddedEventEvent {
	if o == nil || IsNil(o.Events) {
		var ret []DaVinciFlowPolicyEventsCollectionEmbeddedEventEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetEventsOk() ([]DaVinciFlowPolicyEventsCollectionEmbeddedEventEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []DaVinciFlowPolicyEventsCollectionEmbeddedEventEvent and assigns it to the Events field.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) SetEvents(v []DaVinciFlowPolicyEventsCollectionEmbeddedEventEvent) {
	o.Events = v
}

// GetSuccessCount returns the SuccessCount field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetSuccessCount() float32 {
	if o == nil || IsNil(o.SuccessCount) {
		var ret float32
		return ret
	}
	return *o.SuccessCount
}

// GetSuccessCountOk returns a tuple with the SuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetSuccessCountOk() (*float32, bool) {
	if o == nil || IsNil(o.SuccessCount) {
		return nil, false
	}
	return o.SuccessCount, true
}

// HasSuccessCount returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) HasSuccessCount() bool {
	if o != nil && !IsNil(o.SuccessCount) {
		return true
	}

	return false
}

// SetSuccessCount gets a reference to the given float32 and assigns it to the SuccessCount field.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) SetSuccessCount(v float32) {
	o.SuccessCount = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetTotalCount() float32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret float32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) GetTotalCountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given float32 and assigns it to the TotalCount field.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) SetTotalCount(v float32) {
	o.TotalCount = &v
}

func (o DaVinciFlowPolicyEventsCollectionEmbeddedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyEventsCollectionEmbeddedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment"] = o.Environment
	toSerialize["flow"] = o.Flow
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.SuccessCount) {
		toSerialize["successCount"] = o.SuccessCount
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
		"flow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyEventsCollectionEmbeddedEvent := _DaVinciFlowPolicyEventsCollectionEmbeddedEvent{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyEventsCollectionEmbeddedEvent)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyEventsCollectionEmbeddedEvent(varDaVinciFlowPolicyEventsCollectionEmbeddedEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "events")
		delete(additionalProperties, "successCount")
		delete(additionalProperties, "totalCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyEventsCollectionEmbeddedEvent) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("flow", o.Flow))
	if !IsNil(o.Events) {
		logAttrs = append(logAttrs, slog.Any("events", o.Events))
	}
	if !IsNil(o.SuccessCount) {
		logAttrs = append(logAttrs, slog.Any("successCount", *o.SuccessCount))
	}
	if !IsNil(o.TotalCount) {
		logAttrs = append(logAttrs, slog.Any("totalCount", *o.TotalCount))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent struct {
	value *DaVinciFlowPolicyEventsCollectionEmbeddedEvent
	isSet bool
}

func (v NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent) Get() *DaVinciFlowPolicyEventsCollectionEmbeddedEvent {
	return v.value
}

func (v *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent) Set(val *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent(val *DaVinciFlowPolicyEventsCollectionEmbeddedEvent) *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent {
	return &NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
