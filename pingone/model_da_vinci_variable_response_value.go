// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableResponseValue - struct for DaVinciVariableResponseValue
type DaVinciVariableResponseValue struct {
	Bool    *bool
	Float32 *float32
	Object  *map[string]interface{}
	String  *string
}

// boolAsDaVinciVariableResponseValue is a convenience function that returns bool wrapped in DaVinciVariableResponseValue
func BoolAsDaVinciVariableResponseValue(v *bool) DaVinciVariableResponseValue {
	return DaVinciVariableResponseValue{
		Bool: v,
	}
}

// float32AsDaVinciVariableResponseValue is a convenience function that returns float32 wrapped in DaVinciVariableResponseValue
func Float32AsDaVinciVariableResponseValue(v *float32) DaVinciVariableResponseValue {
	return DaVinciVariableResponseValue{
		Float32: v,
	}
}

// map[string]interface{}AsDaVinciVariableResponseValue is a convenience function that returns map[string]interface{} wrapped in DaVinciVariableResponseValue
func ObjectAsDaVinciVariableResponseValue(v *map[string]interface{}) DaVinciVariableResponseValue {
	return DaVinciVariableResponseValue{
		Object: v,
	}
}

// stringAsDaVinciVariableResponseValue is a convenience function that returns string wrapped in DaVinciVariableResponseValue
func StringAsDaVinciVariableResponseValue(v *string) DaVinciVariableResponseValue {
	return DaVinciVariableResponseValue{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DaVinciVariableResponseValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = json.Unmarshal(data, &dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into Object
	err = json.Unmarshal(data, &dst.Object)
	if err == nil {
		jsonObject, _ := json.Marshal(dst.Object)
		if string(jsonObject) == "{}" { // empty struct
			dst.Object = nil
		} else {
			match++
		}
	} else {
		dst.Object = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.Object = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DaVinciVariableResponseValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DaVinciVariableResponseValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DaVinciVariableResponseValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Object != nil {
		return json.Marshal(&src.Object)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DaVinciVariableResponseValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.Object != nil {
		return obj.Object
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DaVinciVariableResponseValue) GetActualInstanceValue() interface{} {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Float32 != nil {
		return *obj.Float32
	}

	if obj.Object != nil {
		return *obj.Object
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDaVinciVariableResponseValue struct {
	value *DaVinciVariableResponseValue
	isSet bool
}

func (v NullableDaVinciVariableResponseValue) Get() *DaVinciVariableResponseValue {
	return v.value
}

func (v *NullableDaVinciVariableResponseValue) Set(val *DaVinciVariableResponseValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableResponseValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableResponseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableResponseValue(val *DaVinciVariableResponseValue) *NullableDaVinciVariableResponseValue {
	return &NullableDaVinciVariableResponseValue{value: val, isSet: true}
}

func (v NullableDaVinciVariableResponseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableResponseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
