/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"

	"github.com/google/uuid"
)

// checks if the Environment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Environment{}

// Environment struct for Environment
type Environment struct {
	Description          *string                      `json:"description,omitempty"`
	Icon                 *string                      `json:"icon,omitempty"`
	License              ResourceRelationshipPingOne  `json:"license"`
	Name                 string                       `json:"name"`
	Region               EnvironmentRegion            `json:"region"`
	Type                 EnvironmentType              `json:"type"`
	Status               *EnvironmentStatusValue      `json:"status,omitempty"`
	Links                *EnvironmentLinks            `json:"_links,omitempty"`
	BillOfMaterials      *EnvironmentBillOfMaterials  `json:"billOfMaterials,omitempty"`
	CreatedAt            *time.Time                   `json:"createdAt,omitempty"`
	HardDeletedAllowedAt *time.Time                   `json:"hardDeletedAllowedAt,omitempty"`
	Id                   *uuid.UUID                   `json:"id,omitempty"`
	Organization         *ResourceRelationshipPingOne `json:"organization,omitempty"`
	SoftDeletedAt        *time.Time                   `json:"softDeletedAt,omitempty"`
	UpdatedAt            *time.Time                   `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Environment Environment

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment(license ResourceRelationshipPingOne, name string, region EnvironmentRegion, type_ EnvironmentType) *Environment {
	this := Environment{}
	this.License = license
	this.Name = name
	this.Region = region
	this.Type = type_
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Environment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Environment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Environment) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Environment) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Environment) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Environment) SetIcon(v string) {
	o.Icon = &v
}

// GetLicense returns the License field value
func (o *Environment) GetLicense() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *Environment) GetLicenseOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *Environment) SetLicense(v ResourceRelationshipPingOne) {
	o.License = v
}

// GetName returns the Name field value
func (o *Environment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Environment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Environment) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *Environment) GetRegion() EnvironmentRegion {
	if o == nil {
		var ret EnvironmentRegion
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *Environment) GetRegionOk() (*EnvironmentRegion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *Environment) SetRegion(v EnvironmentRegion) {
	o.Region = v
}

// GetType returns the Type field value
func (o *Environment) GetType() EnvironmentType {
	if o == nil {
		var ret EnvironmentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Environment) GetTypeOk() (*EnvironmentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Environment) SetType(v EnvironmentType) {
	o.Type = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Environment) GetStatus() EnvironmentStatusValue {
	if o == nil || IsNil(o.Status) {
		var ret EnvironmentStatusValue
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetStatusOk() (*EnvironmentStatusValue, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Environment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given EnvironmentStatusValue and assigns it to the Status field.
func (o *Environment) SetStatus(v EnvironmentStatusValue) {
	o.Status = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Environment) GetLinks() EnvironmentLinks {
	if o == nil || IsNil(o.Links) {
		var ret EnvironmentLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetLinksOk() (*EnvironmentLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Environment) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given EnvironmentLinks and assigns it to the Links field.
func (o *Environment) SetLinks(v EnvironmentLinks) {
	o.Links = &v
}

// GetBillOfMaterials returns the BillOfMaterials field value if set, zero value otherwise.
func (o *Environment) GetBillOfMaterials() EnvironmentBillOfMaterials {
	if o == nil || IsNil(o.BillOfMaterials) {
		var ret EnvironmentBillOfMaterials
		return ret
	}
	return *o.BillOfMaterials
}

// GetBillOfMaterialsOk returns a tuple with the BillOfMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetBillOfMaterialsOk() (*EnvironmentBillOfMaterials, bool) {
	if o == nil || IsNil(o.BillOfMaterials) {
		return nil, false
	}
	return o.BillOfMaterials, true
}

// HasBillOfMaterials returns a boolean if a field has been set.
func (o *Environment) HasBillOfMaterials() bool {
	if o != nil && !IsNil(o.BillOfMaterials) {
		return true
	}

	return false
}

// SetBillOfMaterials gets a reference to the given EnvironmentBillOfMaterials and assigns it to the BillOfMaterials field.
func (o *Environment) SetBillOfMaterials(v EnvironmentBillOfMaterials) {
	o.BillOfMaterials = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Environment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Environment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Environment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHardDeletedAllowedAt returns the HardDeletedAllowedAt field value if set, zero value otherwise.
func (o *Environment) GetHardDeletedAllowedAt() time.Time {
	if o == nil || IsNil(o.HardDeletedAllowedAt) {
		var ret time.Time
		return ret
	}
	return *o.HardDeletedAllowedAt
}

// GetHardDeletedAllowedAtOk returns a tuple with the HardDeletedAllowedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetHardDeletedAllowedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.HardDeletedAllowedAt) {
		return nil, false
	}
	return o.HardDeletedAllowedAt, true
}

// HasHardDeletedAllowedAt returns a boolean if a field has been set.
func (o *Environment) HasHardDeletedAllowedAt() bool {
	if o != nil && !IsNil(o.HardDeletedAllowedAt) {
		return true
	}

	return false
}

// SetHardDeletedAllowedAt gets a reference to the given time.Time and assigns it to the HardDeletedAllowedAt field.
func (o *Environment) SetHardDeletedAllowedAt(v time.Time) {
	o.HardDeletedAllowedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Environment) GetId() uuid.UUID {
	if o == nil || IsNil(o.Id) {
		var ret uuid.UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Environment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given uuid.UUID and assigns it to the Id field.
func (o *Environment) SetId(v uuid.UUID) {
	o.Id = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Environment) GetOrganization() ResourceRelationshipPingOne {
	if o == nil || IsNil(o.Organization) {
		var ret ResourceRelationshipPingOne
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetOrganizationOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Environment) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given ResourceRelationshipPingOne and assigns it to the Organization field.
func (o *Environment) SetOrganization(v ResourceRelationshipPingOne) {
	o.Organization = &v
}

// GetSoftDeletedAt returns the SoftDeletedAt field value if set, zero value otherwise.
func (o *Environment) GetSoftDeletedAt() time.Time {
	if o == nil || IsNil(o.SoftDeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.SoftDeletedAt
}

// GetSoftDeletedAtOk returns a tuple with the SoftDeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetSoftDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SoftDeletedAt) {
		return nil, false
	}
	return o.SoftDeletedAt, true
}

// HasSoftDeletedAt returns a boolean if a field has been set.
func (o *Environment) HasSoftDeletedAt() bool {
	if o != nil && !IsNil(o.SoftDeletedAt) {
		return true
	}

	return false
}

// SetSoftDeletedAt gets a reference to the given time.Time and assigns it to the SoftDeletedAt field.
func (o *Environment) SetSoftDeletedAt(v time.Time) {
	o.SoftDeletedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Environment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Environment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Environment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Environment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["license"] = o.License
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	toSerialize["type"] = o.Type
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.BillOfMaterials) {
		toSerialize["billOfMaterials"] = o.BillOfMaterials
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.HardDeletedAllowedAt) {
		toSerialize["hardDeletedAllowedAt"] = o.HardDeletedAllowedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.SoftDeletedAt) {
		toSerialize["softDeletedAt"] = o.SoftDeletedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Environment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license",
		"name",
		"region",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironment := _Environment{}

	err = json.Unmarshal(data, &varEnvironment)

	if err != nil {
		return err
	}

	*o = Environment(varEnvironment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "license")
		delete(additionalProperties, "name")
		delete(additionalProperties, "region")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "billOfMaterials")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "hardDeletedAllowedAt")
		delete(additionalProperties, "id")
		delete(additionalProperties, "organization")
		delete(additionalProperties, "softDeletedAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o Environment) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.Icon) {
		logAttrs = append(logAttrs, slog.Any("icon", *o.Icon))
	}
	logAttrs = append(logAttrs, slog.Any("license", o.License))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("region", o.Region))
	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.BillOfMaterials) {
		logAttrs = append(logAttrs, slog.Any("billOfMaterials", *o.BillOfMaterials))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.HardDeletedAllowedAt) {
		logAttrs = append(logAttrs, slog.Any("hardDeletedAllowedAt", *o.HardDeletedAllowedAt))
	}
	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	if !IsNil(o.Organization) {
		logAttrs = append(logAttrs, slog.Any("organization", *o.Organization))
	}
	if !IsNil(o.SoftDeletedAt) {
		logAttrs = append(logAttrs, slog.Any("softDeletedAt", *o.SoftDeletedAt))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
