// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationResponseOAuthScope the model 'DaVinciApplicationResponseOAuthScope'
type DaVinciApplicationResponseOAuthScope string

// List of DaVinci_Application_Response_OAuth_Scope
const (
	DAVINCIAPPLICATIONRESPONSEOAUTHSCOPE_FLOW_ANALYTICS DaVinciApplicationResponseOAuthScope = "flow_analytics"
	DAVINCIAPPLICATIONRESPONSEOAUTHSCOPE_OFFLINE_ACCESS DaVinciApplicationResponseOAuthScope = "offline_access"
	DAVINCIAPPLICATIONRESPONSEOAUTHSCOPE_OPENID         DaVinciApplicationResponseOAuthScope = "openid"
	DAVINCIAPPLICATIONRESPONSEOAUTHSCOPE_PROFILE        DaVinciApplicationResponseOAuthScope = "profile"
)

// All allowed values of DaVinciApplicationResponseOAuthScope enum
var AllowedDaVinciApplicationResponseOAuthScopeEnumValues = []DaVinciApplicationResponseOAuthScope{
	"flow_analytics",
	"offline_access",
	"openid",
	"profile",
}

func (v *DaVinciApplicationResponseOAuthScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationResponseOAuthScope(value)
	for _, existing := range AllowedDaVinciApplicationResponseOAuthScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationResponseOAuthScope(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciApplicationResponseOAuthScopeFromValue returns a pointer to a valid DaVinciApplicationResponseOAuthScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationResponseOAuthScopeFromValue(v string) (*DaVinciApplicationResponseOAuthScope, error) {
	ev := DaVinciApplicationResponseOAuthScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationResponseOAuthScope: valid values are %v", v, AllowedDaVinciApplicationResponseOAuthScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationResponseOAuthScope) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationResponseOAuthScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Application_Response_OAuth_Scope value
func (v DaVinciApplicationResponseOAuthScope) Ptr() *DaVinciApplicationResponseOAuthScope {
	return &v
}

type NullableDaVinciApplicationResponseOAuthScope struct {
	value *DaVinciApplicationResponseOAuthScope
	isSet bool
}

func (v NullableDaVinciApplicationResponseOAuthScope) Get() *DaVinciApplicationResponseOAuthScope {
	return v.value
}

func (v *NullableDaVinciApplicationResponseOAuthScope) Set(val *DaVinciApplicationResponseOAuthScope) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationResponseOAuthScope) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationResponseOAuthScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationResponseOAuthScope(val *DaVinciApplicationResponseOAuthScope) *NullableDaVinciApplicationResponseOAuthScope {
	return &NullableDaVinciApplicationResponseOAuthScope{value: val, isSet: true}
}

func (v NullableDaVinciApplicationResponseOAuthScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationResponseOAuthScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
