// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationOauthScopes the model 'DaVinciApplicationOauthScopes'
type DaVinciApplicationOauthScopes string

// List of DaVinciApplication_oauth_scopes
const (
	DAVINCIAPPLICATIONOAUTHSCOPES_FLOW_ANALYTICS DaVinciApplicationOauthScopes = "flow_analytics"
	DAVINCIAPPLICATIONOAUTHSCOPES_OFFLINE_ACCESS DaVinciApplicationOauthScopes = "offline_access"
	DAVINCIAPPLICATIONOAUTHSCOPES_OPENID         DaVinciApplicationOauthScopes = "openid"
	DAVINCIAPPLICATIONOAUTHSCOPES_PROFILE        DaVinciApplicationOauthScopes = "profile"
)

// All allowed values of DaVinciApplicationOauthScopes enum
var AllowedDaVinciApplicationOauthScopesEnumValues = []DaVinciApplicationOauthScopes{
	"flow_analytics",
	"offline_access",
	"openid",
	"profile",
}

func (v *DaVinciApplicationOauthScopes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationOauthScopes(value)
	for _, existing := range AllowedDaVinciApplicationOauthScopesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationOauthScopes(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciApplicationOauthScopesFromValue returns a pointer to a valid DaVinciApplicationOauthScopes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationOauthScopesFromValue(v string) (*DaVinciApplicationOauthScopes, error) {
	ev := DaVinciApplicationOauthScopes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationOauthScopes: valid values are %v", v, AllowedDaVinciApplicationOauthScopesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationOauthScopes) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationOauthScopesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinciApplication_oauth_scopes value
func (v DaVinciApplicationOauthScopes) Ptr() *DaVinciApplicationOauthScopes {
	return &v
}

type NullableDaVinciApplicationOauthScopes struct {
	value *DaVinciApplicationOauthScopes
	isSet bool
}

func (v NullableDaVinciApplicationOauthScopes) Get() *DaVinciApplicationOauthScopes {
	return v.value
}

func (v *NullableDaVinciApplicationOauthScopes) Set(val *DaVinciApplicationOauthScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationOauthScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationOauthScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationOauthScopes(val *DaVinciApplicationOauthScopes) *NullableDaVinciApplicationOauthScopes {
	return &NullableDaVinciApplicationOauthScopes{value: val, isSet: true}
}

func (v NullableDaVinciApplicationOauthScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationOauthScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
