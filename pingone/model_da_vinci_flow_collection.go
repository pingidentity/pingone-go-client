// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowCollection{}

// checks if the DaVinciFlowCollection type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowCollection{}

// DaVinciFlowCollection struct for DaVinciFlowCollection
type DaVinciFlowCollection struct {
	Embedded             DaVinciFlowCollectionEmbedded `json:"_embedded"`
	Links                DaVinciFlowCollectionLinks    `json:"_links"`
	Count                float32                       `json:"count"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowCollection DaVinciFlowCollection

// NewDaVinciFlowCollection instantiates a new DaVinciFlowCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowCollection(embedded DaVinciFlowCollectionEmbedded, links DaVinciFlowCollectionLinks, count float32) *DaVinciFlowCollection {
	this := DaVinciFlowCollection{}
	this.Embedded = embedded
	this.Links = links
	this.Count = count
	return &this
}

// NewDaVinciFlowCollectionWithDefaults instantiates a new DaVinciFlowCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowCollectionWithDefaults() *DaVinciFlowCollection {
	this := DaVinciFlowCollection{}
	return &this
}

// GetEmbedded returns the Embedded field value
func (o *DaVinciFlowCollection) GetEmbedded() DaVinciFlowCollectionEmbedded {
	if o == nil {
		var ret DaVinciFlowCollectionEmbedded
		return ret
	}

	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCollection) GetEmbeddedOk() (*DaVinciFlowCollectionEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedded, true
}

// SetEmbedded sets field value
func (o *DaVinciFlowCollection) SetEmbedded(v DaVinciFlowCollectionEmbedded) {
	o.Embedded = v
}

// GetLinks returns the Links field value
func (o *DaVinciFlowCollection) GetLinks() DaVinciFlowCollectionLinks {
	if o == nil {
		var ret DaVinciFlowCollectionLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCollection) GetLinksOk() (*DaVinciFlowCollectionLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciFlowCollection) SetLinks(v DaVinciFlowCollectionLinks) {
	o.Links = v
}

// GetCount returns the Count field value
func (o *DaVinciFlowCollection) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCollection) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *DaVinciFlowCollection) SetCount(v float32) {
	o.Count = v
}

func (o DaVinciFlowCollection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_embedded"] = o.Embedded
	toSerialize["_links"] = o.Links
	toSerialize["count"] = o.Count

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_embedded",
		"_links",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowCollection := _DaVinciFlowCollection{}

	err = json.Unmarshal(data, &varDaVinciFlowCollection)

	if err != nil {
		return err
	}

	*o = DaVinciFlowCollection(varDaVinciFlowCollection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowCollection) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("count", o.Count))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowCollection struct {
	value *DaVinciFlowCollection
	isSet bool
}

func (v NullableDaVinciFlowCollection) Get() *DaVinciFlowCollection {
	return v.value
}

func (v *NullableDaVinciFlowCollection) Set(val *DaVinciFlowCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowCollection(val *DaVinciFlowCollection) *NullableDaVinciFlowCollection {
	return &NullableDaVinciFlowCollection{value: val, isSet: true}
}

func (v NullableDaVinciFlowCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
