// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DaVinciFlowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowResponse{}

// checks if the DaVinciFlowResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowResponse{}

// DaVinciFlowResponse struct for DaVinciFlowResponse
type DaVinciFlowResponse struct {
	Links                DaVinciFlowResponseLinks              `json:"_links"`
	Environment          ResourceRelationshipReadOnly          `json:"environment"`
	Id                   string                                `json:"id"`
	Name                 string                                `json:"name"`
	Color                *string                               `json:"color,omitempty"`
	Connectors           []ResourceRelationshipDaVinciReadOnly `json:"connectors,omitempty"`
	CreatedAt            *time.Time                            `json:"createdAt,omitempty"`
	CurrentVersion       *float32                              `json:"currentVersion,omitempty"`
	DeployedAt           *time.Time                            `json:"deployedAt,omitempty"`
	Description          *string                               `json:"description,omitempty"`
	DvlinterErrorCount   *float32                              `json:"dvlinterErrorCount,omitempty"`
	DvlinterWarningCount *float32                              `json:"dvlinterWarningCount,omitempty"`
	Enabled              *bool                                 `json:"enabled,omitempty"`
	GraphData            *DaVinciFlowGraphDataResponse         `json:"graphData,omitempty"`
	InputSchema          []DaVinciFlowInputSchemaResponseItem  `json:"inputSchema,omitempty"`
	OutputSchema         *DaVinciFlowResponseOutputSchema      `json:"outputSchema,omitempty"`
	PublishedVersion     *float32                              `json:"publishedVersion,omitempty"`
	Settings             *DaVinciFlowSettingsResponse          `json:"settings,omitempty"`
	Trigger              *DaVinciFlowResponseTrigger           `json:"trigger,omitempty"`
	UpdatedAt            *time.Time                            `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowResponse DaVinciFlowResponse

// NewDaVinciFlowResponse instantiates a new DaVinciFlowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowResponse(links DaVinciFlowResponseLinks, environment ResourceRelationshipReadOnly, id string, name string) *DaVinciFlowResponse {
	this := DaVinciFlowResponse{}
	this.Links = links
	this.Environment = environment
	this.Id = id
	this.Name = name
	return &this
}

// NewDaVinciFlowResponseWithDefaults instantiates a new DaVinciFlowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowResponseWithDefaults() *DaVinciFlowResponse {
	this := DaVinciFlowResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciFlowResponse) GetLinks() DaVinciFlowResponseLinks {
	if o == nil {
		var ret DaVinciFlowResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetLinksOk() (*DaVinciFlowResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciFlowResponse) SetLinks(v DaVinciFlowResponseLinks) {
	o.Links = v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciFlowResponse) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciFlowResponse) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DaVinciFlowResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DaVinciFlowResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciFlowResponse) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *DaVinciFlowResponse) SetColor(v string) {
	o.Color = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetConnectors() []ResourceRelationshipDaVinciReadOnly {
	if o == nil || IsNil(o.Connectors) {
		var ret []ResourceRelationshipDaVinciReadOnly
		return ret
	}
	return o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetConnectorsOk() ([]ResourceRelationshipDaVinciReadOnly, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasConnectors() bool {
	if o != nil && !IsNil(o.Connectors) {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []ResourceRelationshipDaVinciReadOnly and assigns it to the Connectors field.
func (o *DaVinciFlowResponse) SetConnectors(v []ResourceRelationshipDaVinciReadOnly) {
	o.Connectors = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciFlowResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetCurrentVersion() float32 {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret float32
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetCurrentVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given float32 and assigns it to the CurrentVersion field.
func (o *DaVinciFlowResponse) SetCurrentVersion(v float32) {
	o.CurrentVersion = &v
}

// GetDeployedAt returns the DeployedAt field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetDeployedAt() time.Time {
	if o == nil || IsNil(o.DeployedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeployedAt
}

// GetDeployedAtOk returns a tuple with the DeployedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetDeployedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeployedAt) {
		return nil, false
	}
	return o.DeployedAt, true
}

// HasDeployedAt returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasDeployedAt() bool {
	if o != nil && !IsNil(o.DeployedAt) {
		return true
	}

	return false
}

// SetDeployedAt gets a reference to the given time.Time and assigns it to the DeployedAt field.
func (o *DaVinciFlowResponse) SetDeployedAt(v time.Time) {
	o.DeployedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DaVinciFlowResponse) SetDescription(v string) {
	o.Description = &v
}

// GetDvlinterErrorCount returns the DvlinterErrorCount field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetDvlinterErrorCount() float32 {
	if o == nil || IsNil(o.DvlinterErrorCount) {
		var ret float32
		return ret
	}
	return *o.DvlinterErrorCount
}

// GetDvlinterErrorCountOk returns a tuple with the DvlinterErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetDvlinterErrorCountOk() (*float32, bool) {
	if o == nil || IsNil(o.DvlinterErrorCount) {
		return nil, false
	}
	return o.DvlinterErrorCount, true
}

// HasDvlinterErrorCount returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasDvlinterErrorCount() bool {
	if o != nil && !IsNil(o.DvlinterErrorCount) {
		return true
	}

	return false
}

// SetDvlinterErrorCount gets a reference to the given float32 and assigns it to the DvlinterErrorCount field.
func (o *DaVinciFlowResponse) SetDvlinterErrorCount(v float32) {
	o.DvlinterErrorCount = &v
}

// GetDvlinterWarningCount returns the DvlinterWarningCount field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetDvlinterWarningCount() float32 {
	if o == nil || IsNil(o.DvlinterWarningCount) {
		var ret float32
		return ret
	}
	return *o.DvlinterWarningCount
}

// GetDvlinterWarningCountOk returns a tuple with the DvlinterWarningCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetDvlinterWarningCountOk() (*float32, bool) {
	if o == nil || IsNil(o.DvlinterWarningCount) {
		return nil, false
	}
	return o.DvlinterWarningCount, true
}

// HasDvlinterWarningCount returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasDvlinterWarningCount() bool {
	if o != nil && !IsNil(o.DvlinterWarningCount) {
		return true
	}

	return false
}

// SetDvlinterWarningCount gets a reference to the given float32 and assigns it to the DvlinterWarningCount field.
func (o *DaVinciFlowResponse) SetDvlinterWarningCount(v float32) {
	o.DvlinterWarningCount = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DaVinciFlowResponse) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGraphData returns the GraphData field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetGraphData() DaVinciFlowGraphDataResponse {
	if o == nil || IsNil(o.GraphData) {
		var ret DaVinciFlowGraphDataResponse
		return ret
	}
	return *o.GraphData
}

// GetGraphDataOk returns a tuple with the GraphData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetGraphDataOk() (*DaVinciFlowGraphDataResponse, bool) {
	if o == nil || IsNil(o.GraphData) {
		return nil, false
	}
	return o.GraphData, true
}

// HasGraphData returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasGraphData() bool {
	if o != nil && !IsNil(o.GraphData) {
		return true
	}

	return false
}

// SetGraphData gets a reference to the given DaVinciFlowGraphDataResponse and assigns it to the GraphData field.
func (o *DaVinciFlowResponse) SetGraphData(v DaVinciFlowGraphDataResponse) {
	o.GraphData = &v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetInputSchema() []DaVinciFlowInputSchemaResponseItem {
	if o == nil || IsNil(o.InputSchema) {
		var ret []DaVinciFlowInputSchemaResponseItem
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetInputSchemaOk() ([]DaVinciFlowInputSchemaResponseItem, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return nil, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given []DaVinciFlowInputSchemaResponseItem and assigns it to the InputSchema field.
func (o *DaVinciFlowResponse) SetInputSchema(v []DaVinciFlowInputSchemaResponseItem) {
	o.InputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetOutputSchema() DaVinciFlowResponseOutputSchema {
	if o == nil || IsNil(o.OutputSchema) {
		var ret DaVinciFlowResponseOutputSchema
		return ret
	}
	return *o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetOutputSchemaOk() (*DaVinciFlowResponseOutputSchema, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return nil, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given DaVinciFlowResponseOutputSchema and assigns it to the OutputSchema field.
func (o *DaVinciFlowResponse) SetOutputSchema(v DaVinciFlowResponseOutputSchema) {
	o.OutputSchema = &v
}

// GetPublishedVersion returns the PublishedVersion field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetPublishedVersion() float32 {
	if o == nil || IsNil(o.PublishedVersion) {
		var ret float32
		return ret
	}
	return *o.PublishedVersion
}

// GetPublishedVersionOk returns a tuple with the PublishedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetPublishedVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.PublishedVersion) {
		return nil, false
	}
	return o.PublishedVersion, true
}

// HasPublishedVersion returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasPublishedVersion() bool {
	if o != nil && !IsNil(o.PublishedVersion) {
		return true
	}

	return false
}

// SetPublishedVersion gets a reference to the given float32 and assigns it to the PublishedVersion field.
func (o *DaVinciFlowResponse) SetPublishedVersion(v float32) {
	o.PublishedVersion = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetSettings() DaVinciFlowSettingsResponse {
	if o == nil || IsNil(o.Settings) {
		var ret DaVinciFlowSettingsResponse
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetSettingsOk() (*DaVinciFlowSettingsResponse, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given DaVinciFlowSettingsResponse and assigns it to the Settings field.
func (o *DaVinciFlowResponse) SetSettings(v DaVinciFlowSettingsResponse) {
	o.Settings = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetTrigger() DaVinciFlowResponseTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret DaVinciFlowResponseTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetTriggerOk() (*DaVinciFlowResponseTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given DaVinciFlowResponseTrigger and assigns it to the Trigger field.
func (o *DaVinciFlowResponse) SetTrigger(v DaVinciFlowResponseTrigger) {
	o.Trigger = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciFlowResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciFlowResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciFlowResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DaVinciFlowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CurrentVersion) {
		toSerialize["currentVersion"] = o.CurrentVersion
	}
	if !IsNil(o.DeployedAt) {
		toSerialize["deployedAt"] = o.DeployedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DvlinterErrorCount) {
		toSerialize["dvlinterErrorCount"] = o.DvlinterErrorCount
	}
	if !IsNil(o.DvlinterWarningCount) {
		toSerialize["dvlinterWarningCount"] = o.DvlinterWarningCount
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.GraphData) {
		toSerialize["graphData"] = o.GraphData
	}
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["outputSchema"] = o.OutputSchema
	}
	if !IsNil(o.PublishedVersion) {
		toSerialize["publishedVersion"] = o.PublishedVersion
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"environment",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowResponse := _DaVinciFlowResponse{}

	err = json.Unmarshal(data, &varDaVinciFlowResponse)

	if err != nil {
		return err
	}

	*o = DaVinciFlowResponse(varDaVinciFlowResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "color")
		delete(additionalProperties, "connectors")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "currentVersion")
		delete(additionalProperties, "deployedAt")
		delete(additionalProperties, "description")
		delete(additionalProperties, "dvlinterErrorCount")
		delete(additionalProperties, "dvlinterWarningCount")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "graphData")
		delete(additionalProperties, "inputSchema")
		delete(additionalProperties, "outputSchema")
		delete(additionalProperties, "publishedVersion")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "trigger")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.Color) {
		logAttrs = append(logAttrs, slog.Any("color", *o.Color))
	}
	if !IsNil(o.Connectors) {
		logAttrs = append(logAttrs, slog.Any("connectors", o.Connectors))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.CurrentVersion) {
		logAttrs = append(logAttrs, slog.Any("currentVersion", *o.CurrentVersion))
	}
	if !IsNil(o.DeployedAt) {
		logAttrs = append(logAttrs, slog.Any("deployedAt", *o.DeployedAt))
	}
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.DvlinterErrorCount) {
		logAttrs = append(logAttrs, slog.Any("dvlinterErrorCount", *o.DvlinterErrorCount))
	}
	if !IsNil(o.DvlinterWarningCount) {
		logAttrs = append(logAttrs, slog.Any("dvlinterWarningCount", *o.DvlinterWarningCount))
	}
	if !IsNil(o.Enabled) {
		logAttrs = append(logAttrs, slog.Any("enabled", *o.Enabled))
	}
	if !IsNil(o.GraphData) {
		logAttrs = append(logAttrs, slog.Any("graphData", *o.GraphData))
	}
	if !IsNil(o.InputSchema) {
		logAttrs = append(logAttrs, slog.Any("inputSchema", o.InputSchema))
	}
	if !IsNil(o.OutputSchema) {
		logAttrs = append(logAttrs, slog.Any("outputSchema", *o.OutputSchema))
	}
	if !IsNil(o.PublishedVersion) {
		logAttrs = append(logAttrs, slog.Any("publishedVersion", *o.PublishedVersion))
	}
	if !IsNil(o.Settings) {
		logAttrs = append(logAttrs, slog.Any("settings", *o.Settings))
	}
	if !IsNil(o.Trigger) {
		logAttrs = append(logAttrs, slog.Any("trigger", *o.Trigger))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowResponse struct {
	value *DaVinciFlowResponse
	isSet bool
}

func (v NullableDaVinciFlowResponse) Get() *DaVinciFlowResponse {
	return v.value
}

func (v *NullableDaVinciFlowResponse) Set(val *DaVinciFlowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowResponse(val *DaVinciFlowResponse) *NullableDaVinciFlowResponse {
	return &NullableDaVinciFlowResponse{value: val, isSet: true}
}

func (v NullableDaVinciFlowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
