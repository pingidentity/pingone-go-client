// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciApplicationReplaceRequestOauth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciApplicationReplaceRequestOauth{}

// checks if the DaVinciApplicationReplaceRequestOauth type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciApplicationReplaceRequestOauth{}

// DaVinciApplicationReplaceRequestOauth struct for DaVinciApplicationReplaceRequestOauth
type DaVinciApplicationReplaceRequestOauth struct {
	EnforceSignedRequestOpenid *bool                                             `json:"enforceSignedRequestOpenid,omitempty"`
	GrantTypes                 []DaVinciApplicationReplaceRequestOauthGrantTypes `json:"grantTypes,omitempty"`
	LogoutUris                 []string                                          `json:"logoutUris,omitempty"`
	RedirectUris               []string                                          `json:"redirectUris,omitempty"`
	Scopes                     []DaVinciApplicationReplaceRequestOauthScopes     `json:"scopes,omitempty"`
	SpJwksOpenid               *string                                           `json:"spJwksOpenid,omitempty"`
	SpjwksUrl                  *string                                           `json:"spjwksUrl,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _DaVinciApplicationReplaceRequestOauth DaVinciApplicationReplaceRequestOauth

// NewDaVinciApplicationReplaceRequestOauth instantiates a new DaVinciApplicationReplaceRequestOauth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciApplicationReplaceRequestOauth() *DaVinciApplicationReplaceRequestOauth {
	this := DaVinciApplicationReplaceRequestOauth{}
	return &this
}

// NewDaVinciApplicationReplaceRequestOauthWithDefaults instantiates a new DaVinciApplicationReplaceRequestOauth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciApplicationReplaceRequestOauthWithDefaults() *DaVinciApplicationReplaceRequestOauth {
	this := DaVinciApplicationReplaceRequestOauth{}
	return &this
}

// GetEnforceSignedRequestOpenid returns the EnforceSignedRequestOpenid field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetEnforceSignedRequestOpenid() bool {
	if o == nil || IsNil(o.EnforceSignedRequestOpenid) {
		var ret bool
		return ret
	}
	return *o.EnforceSignedRequestOpenid
}

// GetEnforceSignedRequestOpenidOk returns a tuple with the EnforceSignedRequestOpenid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetEnforceSignedRequestOpenidOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceSignedRequestOpenid) {
		return nil, false
	}
	return o.EnforceSignedRequestOpenid, true
}

// HasEnforceSignedRequestOpenid returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasEnforceSignedRequestOpenid() bool {
	if o != nil && !IsNil(o.EnforceSignedRequestOpenid) {
		return true
	}

	return false
}

// SetEnforceSignedRequestOpenid gets a reference to the given bool and assigns it to the EnforceSignedRequestOpenid field.
func (o *DaVinciApplicationReplaceRequestOauth) SetEnforceSignedRequestOpenid(v bool) {
	o.EnforceSignedRequestOpenid = &v
}

// GetGrantTypes returns the GrantTypes field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetGrantTypes() []DaVinciApplicationReplaceRequestOauthGrantTypes {
	if o == nil || IsNil(o.GrantTypes) {
		var ret []DaVinciApplicationReplaceRequestOauthGrantTypes
		return ret
	}
	return o.GrantTypes
}

// GetGrantTypesOk returns a tuple with the GrantTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetGrantTypesOk() ([]DaVinciApplicationReplaceRequestOauthGrantTypes, bool) {
	if o == nil || IsNil(o.GrantTypes) {
		return nil, false
	}
	return o.GrantTypes, true
}

// HasGrantTypes returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasGrantTypes() bool {
	if o != nil && !IsNil(o.GrantTypes) {
		return true
	}

	return false
}

// SetGrantTypes gets a reference to the given []DaVinciApplicationReplaceRequestOauthGrantTypes and assigns it to the GrantTypes field.
func (o *DaVinciApplicationReplaceRequestOauth) SetGrantTypes(v []DaVinciApplicationReplaceRequestOauthGrantTypes) {
	o.GrantTypes = v
}

// GetLogoutUris returns the LogoutUris field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetLogoutUris() []string {
	if o == nil || IsNil(o.LogoutUris) {
		var ret []string
		return ret
	}
	return o.LogoutUris
}

// GetLogoutUrisOk returns a tuple with the LogoutUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetLogoutUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.LogoutUris) {
		return nil, false
	}
	return o.LogoutUris, true
}

// HasLogoutUris returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasLogoutUris() bool {
	if o != nil && !IsNil(o.LogoutUris) {
		return true
	}

	return false
}

// SetLogoutUris gets a reference to the given []string and assigns it to the LogoutUris field.
func (o *DaVinciApplicationReplaceRequestOauth) SetLogoutUris(v []string) {
	o.LogoutUris = v
}

// GetRedirectUris returns the RedirectUris field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetRedirectUris() []string {
	if o == nil || IsNil(o.RedirectUris) {
		var ret []string
		return ret
	}
	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetRedirectUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.RedirectUris) {
		return nil, false
	}
	return o.RedirectUris, true
}

// HasRedirectUris returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasRedirectUris() bool {
	if o != nil && !IsNil(o.RedirectUris) {
		return true
	}

	return false
}

// SetRedirectUris gets a reference to the given []string and assigns it to the RedirectUris field.
func (o *DaVinciApplicationReplaceRequestOauth) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetScopes() []DaVinciApplicationReplaceRequestOauthScopes {
	if o == nil || IsNil(o.Scopes) {
		var ret []DaVinciApplicationReplaceRequestOauthScopes
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetScopesOk() ([]DaVinciApplicationReplaceRequestOauthScopes, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []DaVinciApplicationReplaceRequestOauthScopes and assigns it to the Scopes field.
func (o *DaVinciApplicationReplaceRequestOauth) SetScopes(v []DaVinciApplicationReplaceRequestOauthScopes) {
	o.Scopes = v
}

// GetSpJwksOpenid returns the SpJwksOpenid field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetSpJwksOpenid() string {
	if o == nil || IsNil(o.SpJwksOpenid) {
		var ret string
		return ret
	}
	return *o.SpJwksOpenid
}

// GetSpJwksOpenidOk returns a tuple with the SpJwksOpenid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetSpJwksOpenidOk() (*string, bool) {
	if o == nil || IsNil(o.SpJwksOpenid) {
		return nil, false
	}
	return o.SpJwksOpenid, true
}

// HasSpJwksOpenid returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasSpJwksOpenid() bool {
	if o != nil && !IsNil(o.SpJwksOpenid) {
		return true
	}

	return false
}

// SetSpJwksOpenid gets a reference to the given string and assigns it to the SpJwksOpenid field.
func (o *DaVinciApplicationReplaceRequestOauth) SetSpJwksOpenid(v string) {
	o.SpJwksOpenid = &v
}

// GetSpjwksUrl returns the SpjwksUrl field value if set, zero value otherwise.
func (o *DaVinciApplicationReplaceRequestOauth) GetSpjwksUrl() string {
	if o == nil || IsNil(o.SpjwksUrl) {
		var ret string
		return ret
	}
	return *o.SpjwksUrl
}

// GetSpjwksUrlOk returns a tuple with the SpjwksUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplicationReplaceRequestOauth) GetSpjwksUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SpjwksUrl) {
		return nil, false
	}
	return o.SpjwksUrl, true
}

// HasSpjwksUrl returns a boolean if a field has been set.
func (o *DaVinciApplicationReplaceRequestOauth) HasSpjwksUrl() bool {
	if o != nil && !IsNil(o.SpjwksUrl) {
		return true
	}

	return false
}

// SetSpjwksUrl gets a reference to the given string and assigns it to the SpjwksUrl field.
func (o *DaVinciApplicationReplaceRequestOauth) SetSpjwksUrl(v string) {
	o.SpjwksUrl = &v
}

func (o DaVinciApplicationReplaceRequestOauth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciApplicationReplaceRequestOauth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnforceSignedRequestOpenid) {
		toSerialize["enforceSignedRequestOpenid"] = o.EnforceSignedRequestOpenid
	}
	if !IsNil(o.GrantTypes) {
		toSerialize["grantTypes"] = o.GrantTypes
	}
	if !IsNil(o.LogoutUris) {
		toSerialize["logoutUris"] = o.LogoutUris
	}
	if !IsNil(o.RedirectUris) {
		toSerialize["redirectUris"] = o.RedirectUris
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.SpJwksOpenid) {
		toSerialize["spJwksOpenid"] = o.SpJwksOpenid
	}
	if !IsNil(o.SpjwksUrl) {
		toSerialize["spjwksUrl"] = o.SpjwksUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciApplicationReplaceRequestOauth) UnmarshalJSON(data []byte) (err error) {
	varDaVinciApplicationReplaceRequestOauth := _DaVinciApplicationReplaceRequestOauth{}

	err = json.Unmarshal(data, &varDaVinciApplicationReplaceRequestOauth)

	if err != nil {
		return err
	}

	*o = DaVinciApplicationReplaceRequestOauth(varDaVinciApplicationReplaceRequestOauth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enforceSignedRequestOpenid")
		delete(additionalProperties, "grantTypes")
		delete(additionalProperties, "logoutUris")
		delete(additionalProperties, "redirectUris")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "spJwksOpenid")
		delete(additionalProperties, "spjwksUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciApplicationReplaceRequestOauth) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.EnforceSignedRequestOpenid) {
		logAttrs = append(logAttrs, slog.Any("enforceSignedRequestOpenid", *o.EnforceSignedRequestOpenid))
	}
	if !IsNil(o.GrantTypes) {
		logAttrs = append(logAttrs, slog.Any("grantTypes", o.GrantTypes))
	}
	if !IsNil(o.LogoutUris) {
		logAttrs = append(logAttrs, slog.Any("logoutUris", o.LogoutUris))
	}
	if !IsNil(o.RedirectUris) {
		logAttrs = append(logAttrs, slog.Any("redirectUris", o.RedirectUris))
	}
	if !IsNil(o.Scopes) {
		logAttrs = append(logAttrs, slog.Any("scopes", o.Scopes))
	}
	if !IsNil(o.SpJwksOpenid) {
		logAttrs = append(logAttrs, slog.Any("spJwksOpenid", *o.SpJwksOpenid))
	}
	if !IsNil(o.SpjwksUrl) {
		logAttrs = append(logAttrs, slog.Any("spjwksUrl", *o.SpjwksUrl))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciApplicationReplaceRequestOauth struct {
	value *DaVinciApplicationReplaceRequestOauth
	isSet bool
}

func (v NullableDaVinciApplicationReplaceRequestOauth) Get() *DaVinciApplicationReplaceRequestOauth {
	return v.value
}

func (v *NullableDaVinciApplicationReplaceRequestOauth) Set(val *DaVinciApplicationReplaceRequestOauth) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationReplaceRequestOauth) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationReplaceRequestOauth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationReplaceRequestOauth(val *DaVinciApplicationReplaceRequestOauth) *NullableDaVinciApplicationReplaceRequestOauth {
	return &NullableDaVinciApplicationReplaceRequestOauth{value: val, isSet: true}
}

func (v NullableDaVinciApplicationReplaceRequestOauth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationReplaceRequestOauth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
