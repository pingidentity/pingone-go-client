/*
PingOne User and Configuration Management API

Testing DaVinciApplicationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pingone_test

// import (
// 	"context"
// 	"testing"

// 	openapiclient "github.com/pingidentity/pingone-go-client/pingone"
// 	"github.com/stretchr/testify/assert"
// 	"github.com/stretchr/testify/require"
// )

// func Test_pingone_DaVinciApplicationApiService(t *testing.T) {

// 	configuration := openapiclient.NewConfiguration()
// 	apiClient := openapiclient.NewAPIClient(configuration)

// 	t.Run("Test DaVinciApplicationApiService CreateDavinciApplication", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.CreateDavinciApplication(context.Background(), environmentID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService CreateFlowPolicyByDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.CreateFlowPolicyByDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService CreateKeyByDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.CreateKeyByDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService CreateSecretByDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.CreateSecretByDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService DeleteDavinciApplicationById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		httpRes, err := apiClient.DaVinciApplicationApi.DeleteDavinciApplicationById(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService DeleteFlowPolicyByIdUsingDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID
// 		var flowPolicyID uuid.UUID

// 		httpRes, err := apiClient.DaVinciApplicationApi.DeleteFlowPolicyByIdUsingDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID, flowPolicyID).Execute()

// 		require.Nil(t, err)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService GetDavinciApplicationById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.GetDavinciApplicationById(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService GetDavinciApplications", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.GetDavinciApplications(context.Background(), environmentID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService GetFlowPoliciesByDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.GetFlowPoliciesByDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService GetFlowPolicyByIdUsingDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID
// 		var flowPolicyID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.GetFlowPolicyByIdUsingDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID, flowPolicyID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService ReplaceDavinciApplicationById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.ReplaceDavinciApplicationById(context.Background(), environmentID, daVinciApplicationID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciApplicationApiService ReplaceFlowPolicyByIdUsingDavinciApplicationId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var daVinciApplicationID uuid.UUID
// 		var flowPolicyID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciApplicationApi.ReplaceFlowPolicyByIdUsingDavinciApplicationId(context.Background(), environmentID, daVinciApplicationID, flowPolicyID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// }

// // New tests
// func Test_pingone_DaVinciApplicationApiService_RemovalErrorCode(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciApplicationApiService_New_Environment(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciApplicationApiService_Full(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciApplicationApiService_ChangeType(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciApplicationApiService_BadParameters(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }
