// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

Testing DaVinciVariablesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pingone_test

import (
	"regexp"
	"testing"

	"github.com/google/uuid"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/pingidentity/pingone-go-client/testframework"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

type DaVinciVariablesApiServiceSharedEnvTestSuite struct {
	testframework.SharedEnvironmentTestSuite

	DefaultDaVinciVariableMaxSchemaCreate  pingone.DaVinciVariableCreateRequest
	DefaultDaVinciVariableMaxSchemaReplace pingone.DaVinciVariableReplaceRequest
	DefaultDaVinciVariableMinSchemaCreate  pingone.DaVinciVariableCreateRequest
	DefaultDaVinciVariableMinSchemaReplace pingone.DaVinciVariableReplaceRequest
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) SetupSuite() {
	s.SharedEnvironmentTestSuite.SetupSuite()
}

// Set up the test with a new environment
func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) SetupTest() {
	s.SharedEnvironmentTestSuite.SetupTest()

	s.DefaultDaVinciVariableMaxSchemaCreate = pingone.DaVinciVariableCreateRequest{
		Context:     pingone.DAVINCIVARIABLECREATEREQUESTCONTEXT_COMPANY,
		DataType:    pingone.DAVINCIVARIABLECREATEREQUESTDATATYPE_NUMBER,
		DisplayName: pingone.PtrString(testframework.RandomResourceName()),
		// Flow:        &pingone.ResourceRelationshipDaVinci{
		// 	Id: ...,
		// },
		Max:     pingone.PtrInt32(300),
		Min:     pingone.PtrInt32(10),
		Mutable: false,
		Name:    testframework.RandomResourceName(),
		Value: &pingone.DaVinciVariableCreateRequestValue{
			Float32: pingone.PtrFloat32(20.0),
		},
	}

	s.DefaultDaVinciVariableMaxSchemaReplace = pingone.DaVinciVariableReplaceRequest{
		Context:     pingone.DAVINCIVARIABLEREPLACEREQUESTCONTEXT_COMPANY,
		DataType:    pingone.DAVINCIVARIABLEREPLACEREQUESTDATATYPE_NUMBER,
		DisplayName: pingone.PtrString(testframework.RandomResourceName()),
		// Flow:        &pingone.ResourceRelationshipDaVinci{
		// 	Id: ...,
		// },
		Max:     pingone.PtrInt32(250),
		Min:     pingone.PtrInt32(12),
		Mutable: true,
		Name:    testframework.RandomResourceName(),
		Value: &pingone.DaVinciVariableReplaceRequestValue{
			Float32: pingone.PtrFloat32(25.0),
		},
	}

	s.DefaultDaVinciVariableMinSchemaCreate = pingone.DaVinciVariableCreateRequest{
		Context:  pingone.DAVINCIVARIABLECREATEREQUESTCONTEXT_COMPANY,
		DataType: pingone.DAVINCIVARIABLECREATEREQUESTDATATYPE_STRING,
		Name:     testframework.RandomResourceName(),
		Mutable:  true,
	}

	s.DefaultDaVinciVariableMinSchemaReplace = pingone.DaVinciVariableReplaceRequest{
		Context:  pingone.DAVINCIVARIABLEREPLACEREQUESTCONTEXT_COMPANY,
		DataType: pingone.DAVINCIVARIABLEREPLACEREQUESTDATATYPE_SECRET,
		Name:     testframework.RandomResourceName(),
		Mutable:  true,
	}
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) TearDownTest() {
	s.SharedEnvironmentTestSuite.TearDownTest()
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) TearDownSuite() {
	s.SharedEnvironmentTestSuite.TearDownSuite()
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) TestDaVinciVariableNeverFound() {

	davinciVariableID := uuid.New()

	resp, httpRes, err := s.ApiClient.DaVinciVariablesApi.GetVariableById(s.T().Context(), s.SharedEnvironmentTestSuite.TestEnvironment.Environment.GetId(), davinciVariableID).Execute()
	testframework.CheckNotFound(s.T(), resp, httpRes, err)
	testframework.CheckPingOneAPIErrorResponse(s.T(), err, pingone.NotFoundError{}, regexp.MustCompile("The requested resource was not found"))
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) TestDaVinciVariableFullLifecycle() {
	// Min Schema
	variableID := s.test_pingone_DaVinciVariablesApiService_Create(s.T(), s.DefaultDaVinciVariableMinSchemaCreate)

	s.test_pingone_DaVinciVariablesApiService_Delete(s.T(), variableID)

	// Max Schema
	variableID = s.test_pingone_DaVinciVariablesApiService_Create(s.T(), s.DefaultDaVinciVariableMaxSchemaCreate)

	// Replace Max with Min
	s.test_pingone_DaVinciVariablesApiService_Replace(s.T(), variableID, s.DefaultDaVinciVariableMinSchemaReplace)

	// Replace Min with Max
	s.test_pingone_DaVinciVariablesApiService_Replace(s.T(), variableID, s.DefaultDaVinciVariableMaxSchemaReplace)

	// Finally Delete
	s.test_pingone_DaVinciVariablesApiService_Delete(s.T(), variableID)
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) test_pingone_DaVinciVariablesApiService_Create(t *testing.T, payload pingone.DaVinciVariableCreateRequest) (variableID uuid.UUID) {
	resp, httpRes, err := s.ApiClient.DaVinciVariablesApi.CreateVariable(s.T().Context(), s.SharedEnvironmentTestSuite.TestEnvironment.Environment.GetId()).DaVinciVariableCreateRequest(payload).Execute()
	testframework.CheckCreated(t, resp, &pingone.DaVinciVariableResponse{}, httpRes, err)

	require.NotNil(t, resp.Id)
	assert.NotNil(t, resp.Links)
	assert.NotNil(t, resp.CreatedAt)
	assert.NotNil(t, resp.UpdatedAt)
	// TODO: Check data

	s.test_pingone_DaVinciVariablesApiService_Get(t, resp.Id, payload)

	return resp.GetId()
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) test_pingone_DaVinciVariablesApiService_Get(t *testing.T, variableID uuid.UUID, payload any) {
	resp, httpRes, err := s.ApiClient.DaVinciVariablesApi.GetVariableById(s.T().Context(), s.SharedEnvironmentTestSuite.TestEnvironment.Environment.GetId(), variableID).Execute()
	testframework.CheckFound(t, resp, &pingone.DaVinciVariableResponse{}, httpRes, err)

	require.NotNil(t, resp.Id)
	assert.NotNil(t, resp.Links)
	assert.NotNil(t, resp.CreatedAt)
	assert.NotNil(t, resp.UpdatedAt)

	// TODO: Check data
	// switch obj := payload.(type) {
	// case pingone.DaVinciVariableCreateRequest:
	// 	assert.Equal(t, resp.Context, string(obj.Context))
	// case pingone.DaVinciVariableReplaceRequest:
	// 	assert.Equal(t, resp.Context, obj.Context)
	// case pingone.DaVinciVariable:
	// 	assert.Equal(t, resp.Context, obj.Context)
	// default:
	// 	assert.Fail(t, "Unknown payload type")
	// }
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) test_pingone_DaVinciVariablesApiService_Replace(t *testing.T, variableID uuid.UUID, payload pingone.DaVinciVariableReplaceRequest) {
	resp, httpRes, err := s.ApiClient.DaVinciVariablesApi.ReplaceVariableById(s.T().Context(), s.SharedEnvironmentTestSuite.TestEnvironment.Environment.GetId(), variableID).DaVinciVariableReplaceRequest(payload).Execute()
	testframework.CheckReplaced(t, resp, &pingone.DaVinciVariableResponse{}, httpRes, err)

	require.NotNil(t, resp.Id)
	require.Equal(t, resp.Id, variableID)
	assert.NotNil(t, resp.Links)
	assert.NotNil(t, resp.CreatedAt)
	assert.NotNil(t, resp.UpdatedAt)
	// TODO: Check data

	s.test_pingone_DaVinciVariablesApiService_Get(t, resp.Id, payload)
}

func (s *DaVinciVariablesApiServiceSharedEnvTestSuite) test_pingone_DaVinciVariablesApiService_Delete(t *testing.T, variableID uuid.UUID) {
	httpRes, err := s.ApiClient.DaVinciVariablesApi.DeleteVariableById(s.T().Context(), s.SharedEnvironmentTestSuite.TestEnvironment.Environment.GetId(), variableID).Execute()
	testframework.CheckDeleted(t, httpRes, err)

	resp, httpRes, err := s.ApiClient.DaVinciVariablesApi.GetVariableById(s.T().Context(), s.SharedEnvironmentTestSuite.TestEnvironment.Environment.GetId(), variableID).Execute()
	testframework.CheckNotFound(t, resp, httpRes, err)
}

func Test_pingone_DaVinciVariablesApiService(t *testing.T) {
	suite.Run(t, &DaVinciVariablesApiServiceSharedEnvTestSuite{})
}
