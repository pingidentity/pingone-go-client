// /*
// PingOne User and Configuration Management API

// Testing DaVinciVariableApiService

// */

// // Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pingone_test

import (
	"testing"

	"github.com/google/uuid"
	"github.com/pingidentity/pingone-go-client/acctest"
	"github.com/pingidentity/pingone-go-client/pingone"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

type DaVinciVariableAPIServiceSharedEnvTestSuite struct {
	acctest.SharedEnvironmentTestSuite

	DefaultDaVinciVariableMaxSchemaCreate  pingone.DaVinciVariableCreateRequest
	DefaultDaVinciVariableMaxSchemaReplace pingone.DaVinciVariableReplaceRequest
	DefaultDaVinciVariableMinSchemaCreate  pingone.DaVinciVariableCreateRequest
	DefaultDaVinciVariableMinSchemaReplace pingone.DaVinciVariableReplaceRequest
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) SetupSuite() {
	s.SharedEnvironmentTestSuite.SetupSuite()
}

// Set up the test with a new environment
func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) SetupTest() {
	s.SharedEnvironmentTestSuite.SetupTest()

	s.DefaultDaVinciVariableMaxSchemaCreate = pingone.DaVinciVariableCreateRequest{}

	s.DefaultDaVinciVariableMaxSchemaReplace = pingone.DaVinciVariableReplaceRequest{}

	s.DefaultDaVinciVariableMinSchemaCreate = pingone.DaVinciVariableCreateRequest{}

	s.DefaultDaVinciVariableMinSchemaReplace = pingone.DaVinciVariableReplaceRequest{}
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) TearDownTest() {
	s.SharedEnvironmentTestSuite.TearDownTest()
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) TearDownSuite() {
	s.SharedEnvironmentTestSuite.TearDownSuite()
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) TestDaVinciVariableNeverFound() {

	davinciVariableID := uuid.New()

	resp, httpRes, err := s.ApiClient.DaVinciVariableApi.GetVariableById(s.T().Context(), s.TestEnvironment.Environment.GetId(), davinciVariableID).Execute()
	acctest.CheckNotFound(s.T(), resp, httpRes, err)
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) TestDaVinciVariableFullLifecycle() {
	s.T().Skip("skip test") // remove to run test

	// Min Schema
	variableID := s.test_pingone_DaVinciVariableApiService_Create(s.T(), s.DefaultDaVinciVariableMinSchemaCreate)

	s.test_pingone_DaVinciVariableApiService_Delete(s.T(), variableID)

	// Max Schema
	variableID = s.test_pingone_DaVinciVariableApiService_Create(s.T(), s.DefaultDaVinciVariableMaxSchemaCreate)

	// Replace Max with Min
	s.test_pingone_DaVinciVariableApiService_Replace(s.T(), variableID, s.DefaultDaVinciVariableMinSchemaReplace)

	// Replace Min with Max
	s.test_pingone_DaVinciVariableApiService_Replace(s.T(), variableID, s.DefaultDaVinciVariableMaxSchemaReplace)

	// Finally Delete
	s.test_pingone_DaVinciVariableApiService_Delete(s.T(), variableID)
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) test_pingone_DaVinciVariableApiService_Create(t *testing.T, payload pingone.DaVinciVariableCreateRequest) (variableID uuid.UUID) {
	resp, httpRes, err := s.ApiClient.DaVinciVariableApi.CreateVariable(s.T().Context(), s.TestEnvironment.Environment.GetId()).DaVinciVariableCreateRequest(payload).Execute()
	acctest.CheckCreated(t, resp, &pingone.DaVinciVariable{}, httpRes, err)

	require.NotNil(t, resp.Id)
	assert.NotNil(t, resp.Links)
	assert.NotNil(t, resp.CreatedAt)
	assert.NotNil(t, resp.UpdatedAt)
	// TODO: Check data

	s.test_pingone_DaVinciVariableApiService_Get(t, variableID, payload)

	return resp.GetId()
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) test_pingone_DaVinciVariableApiService_Get(t *testing.T, variableID uuid.UUID, payload any) {
	resp, httpRes, err := s.ApiClient.DaVinciVariableApi.GetVariableById(s.T().Context(), s.TestEnvironment.Environment.GetId(), variableID).Execute()
	acctest.CheckFound(t, resp, &pingone.DaVinciVariable{}, httpRes, err)

	require.NotNil(t, resp.Id)
	assert.NotNil(t, resp.Links)
	assert.NotNil(t, resp.CreatedAt)
	assert.NotNil(t, resp.UpdatedAt)

	// TODO: Check data
	switch obj := payload.(type) {
	case pingone.DaVinciVariableCreateRequest:
		assert.Equal(t, resp.Context, obj.Context)
	case pingone.DaVinciVariableReplaceRequest:
		assert.Equal(t, resp.Context, obj.Context)
	case pingone.DaVinciVariable:
		assert.Equal(t, resp.Context, obj.Context)
	default:
		assert.Fail(t, "Unknown payload type")
	}
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) test_pingone_DaVinciVariableApiService_Replace(t *testing.T, variableID uuid.UUID, payload pingone.DaVinciVariableReplaceRequest) {
	resp, httpRes, err := s.ApiClient.DaVinciVariableApi.ReplaceVariableById(s.T().Context(), s.TestEnvironment.Environment.GetId(), variableID).DaVinciVariableReplaceRequest(payload).Execute()
	acctest.CheckReplaced(t, resp, &pingone.DaVinciVariable{}, httpRes, err)

	require.NotNil(t, resp.Id)
	assert.NotNil(t, resp.Links)
	assert.NotNil(t, resp.CreatedAt)
	assert.NotNil(t, resp.UpdatedAt)
	// TODO: Check data

	s.test_pingone_DaVinciVariableApiService_Get(t, variableID, payload)
}

func (s *DaVinciVariableAPIServiceSharedEnvTestSuite) test_pingone_DaVinciVariableApiService_Delete(t *testing.T, variableID uuid.UUID) {
	httpRes, err := s.ApiClient.DaVinciVariableApi.DeleteVariableById(s.T().Context(), s.TestEnvironment.Environment.GetId(), variableID).Execute()
	acctest.CheckDeleted(t, httpRes, err)

	resp, httpRes, err := s.ApiClient.DaVinciVariableApi.GetVariableById(s.T().Context(), s.TestEnvironment.Environment.GetId(), variableID).Execute()
	acctest.CheckNotFound(t, resp, httpRes, err)
}

func Test_pingone_DaVinciVariableAPIService(t *testing.T) {
	suite.Run(t, &DaVinciVariableAPIServiceSharedEnvTestSuite{})
}
