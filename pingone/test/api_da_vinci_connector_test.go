/*
PingOne User and Configuration Management API

Testing DaVinciConnectorApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pingone_test

// import (
// 	"context"
// 	"testing"

// 	"github.com/google/uuid"
// 	openapiclient "github.com/pingidentity/pingone-go-client/pingone"
// 	"github.com/stretchr/testify/assert"
// 	"github.com/stretchr/testify/require"
// )

// func Test_pingone_DaVinciConnectorApiService(t *testing.T) {

// 	configuration := openapiclient.NewConfiguration()
// 	apiClient := openapiclient.NewAPIClient(configuration)

// 	t.Run("Test DaVinciConnectorApiService CreateConnectorInstance", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.CreateConnectorInstance(context.Background(), environmentID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService CreateConnectorInstanceById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var connectorInstanceID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.CreateConnectorInstanceById(context.Background(), environmentID, connectorInstanceID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService DeleteConnectorInstanceById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var connectorInstanceID uuid.UUID

// 		httpRes, err := apiClient.DaVinciConnectorApi.DeleteConnectorInstanceById(context.Background(), environmentID, connectorInstanceID).Execute()

// 		require.Nil(t, err)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService GetConnectorById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var connectorID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.GetConnectorById(context.Background(), environmentID, connectorID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService GetConnectorInstanceById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var connectorInstanceID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.GetConnectorInstanceById(context.Background(), environmentID, connectorInstanceID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService GetConnectorInstances", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.GetConnectorInstances(context.Background(), environmentID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService GetConnectors", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.GetConnectors(context.Background(), environmentID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService GetDetailsByConnectorId", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var connectorID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.GetDetailsByConnectorId(context.Background(), environmentID, connectorID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test DaVinciConnectorApiService ReplaceConnectorInstanceById", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var environmentID uuid.UUID
// 		var connectorInstanceID uuid.UUID

// 		resp, httpRes, err := apiClient.DaVinciConnectorApi.ReplaceConnectorInstanceById(context.Background(), environmentID, connectorInstanceID).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// }

// // New tests
// func Test_pingone_DaVinciConnectorApiService_RemovalErrorCode(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciConnectorApiService_New_Environment(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciConnectorApiService_Full(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciConnectorApiService_ChangeType(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }

// func Test_pingone_DaVinciConnectorApiService_BadParameters(t *testing.T) {
// 	t.Skip("skip test") // remove to run test
// }
