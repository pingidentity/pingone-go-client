// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowSettingsRequestJsLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowSettingsRequestJsLink{}

// checks if the DaVinciFlowSettingsRequestJsLink type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowSettingsRequestJsLink{}

// DaVinciFlowSettingsRequestJsLink struct for DaVinciFlowSettingsRequestJsLink
type DaVinciFlowSettingsRequestJsLink struct {
	Label                string `json:"label"`
	Value                string `json:"value"`
	Defer                bool   `json:"defer"`
	Crossorigin          string `json:"crossorigin"`
	Integrity            string `json:"integrity"`
	Referrerpolicy       string `json:"referrerpolicy"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowSettingsRequestJsLink DaVinciFlowSettingsRequestJsLink

// NewDaVinciFlowSettingsRequestJsLink instantiates a new DaVinciFlowSettingsRequestJsLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowSettingsRequestJsLink(label string, value string, defer_ bool, crossorigin string, integrity string, referrerpolicy string, type_ string) *DaVinciFlowSettingsRequestJsLink {
	this := DaVinciFlowSettingsRequestJsLink{}
	this.Label = label
	this.Value = value
	this.Defer = defer_
	this.Crossorigin = crossorigin
	this.Integrity = integrity
	this.Referrerpolicy = referrerpolicy
	this.Type = type_
	return &this
}

// NewDaVinciFlowSettingsRequestJsLinkWithDefaults instantiates a new DaVinciFlowSettingsRequestJsLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowSettingsRequestJsLinkWithDefaults() *DaVinciFlowSettingsRequestJsLink {
	this := DaVinciFlowSettingsRequestJsLink{}
	return &this
}

// GetLabel returns the Label field value
func (o *DaVinciFlowSettingsRequestJsLink) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value
func (o *DaVinciFlowSettingsRequestJsLink) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetValue(v string) {
	o.Value = v
}

// GetDefer returns the Defer field value
func (o *DaVinciFlowSettingsRequestJsLink) GetDefer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Defer
}

// GetDeferOk returns a tuple with the Defer field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetDeferOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defer, true
}

// SetDefer sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetDefer(v bool) {
	o.Defer = v
}

// GetCrossorigin returns the Crossorigin field value
func (o *DaVinciFlowSettingsRequestJsLink) GetCrossorigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Crossorigin
}

// GetCrossoriginOk returns a tuple with the Crossorigin field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetCrossoriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Crossorigin, true
}

// SetCrossorigin sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetCrossorigin(v string) {
	o.Crossorigin = v
}

// GetIntegrity returns the Integrity field value
func (o *DaVinciFlowSettingsRequestJsLink) GetIntegrity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Integrity
}

// GetIntegrityOk returns a tuple with the Integrity field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetIntegrityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Integrity, true
}

// SetIntegrity sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetIntegrity(v string) {
	o.Integrity = v
}

// GetReferrerpolicy returns the Referrerpolicy field value
func (o *DaVinciFlowSettingsRequestJsLink) GetReferrerpolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Referrerpolicy
}

// GetReferrerpolicyOk returns a tuple with the Referrerpolicy field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetReferrerpolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Referrerpolicy, true
}

// SetReferrerpolicy sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetReferrerpolicy(v string) {
	o.Referrerpolicy = v
}

// GetType returns the Type field value
func (o *DaVinciFlowSettingsRequestJsLink) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsRequestJsLink) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DaVinciFlowSettingsRequestJsLink) SetType(v string) {
	o.Type = v
}

func (o DaVinciFlowSettingsRequestJsLink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowSettingsRequestJsLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["value"] = o.Value
	toSerialize["defer"] = o.Defer
	toSerialize["crossorigin"] = o.Crossorigin
	toSerialize["integrity"] = o.Integrity
	toSerialize["referrerpolicy"] = o.Referrerpolicy
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowSettingsRequestJsLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"value",
		"defer",
		"crossorigin",
		"integrity",
		"referrerpolicy",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowSettingsRequestJsLink := _DaVinciFlowSettingsRequestJsLink{}

	err = json.Unmarshal(data, &varDaVinciFlowSettingsRequestJsLink)

	if err != nil {
		return err
	}

	*o = DaVinciFlowSettingsRequestJsLink(varDaVinciFlowSettingsRequestJsLink)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "value")
		delete(additionalProperties, "defer")
		delete(additionalProperties, "crossorigin")
		delete(additionalProperties, "integrity")
		delete(additionalProperties, "referrerpolicy")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowSettingsRequestJsLink) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("label", o.Label))
	logAttrs = append(logAttrs, slog.Any("value", o.Value))
	logAttrs = append(logAttrs, slog.Any("defer", o.Defer))
	logAttrs = append(logAttrs, slog.Any("crossorigin", o.Crossorigin))
	logAttrs = append(logAttrs, slog.Any("integrity", o.Integrity))
	logAttrs = append(logAttrs, slog.Any("referrerpolicy", o.Referrerpolicy))
	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowSettingsRequestJsLink struct {
	value *DaVinciFlowSettingsRequestJsLink
	isSet bool
}

func (v NullableDaVinciFlowSettingsRequestJsLink) Get() *DaVinciFlowSettingsRequestJsLink {
	return v.value
}

func (v *NullableDaVinciFlowSettingsRequestJsLink) Set(val *DaVinciFlowSettingsRequestJsLink) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowSettingsRequestJsLink) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowSettingsRequestJsLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowSettingsRequestJsLink(val *DaVinciFlowSettingsRequestJsLink) *NullableDaVinciFlowSettingsRequestJsLink {
	return &NullableDaVinciFlowSettingsRequestJsLink{value: val, isSet: true}
}

func (v NullableDaVinciFlowSettingsRequestJsLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowSettingsRequestJsLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
