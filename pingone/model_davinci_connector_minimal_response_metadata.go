// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DavinciConnectorMinimalResponseMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorMinimalResponseMetadata{}

// checks if the DavinciConnectorMinimalResponseMetadata type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorMinimalResponseMetadata{}

// DavinciConnectorMinimalResponseMetadata struct for DavinciConnectorMinimalResponseMetadata
type DavinciConnectorMinimalResponseMetadata struct {
	Colors               *DavinciConnectorMinimalResponseMetadataColors `json:"colors,omitempty"`
	Logos                *DavinciConnectorMinimalResponseMetadataLogos  `json:"logos,omitempty"`
	Type                 *DavinciConnectorMinimalResponseMetadataType   `json:"type,omitempty"`
	Vendor               *string                                        `json:"vendor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorMinimalResponseMetadata DavinciConnectorMinimalResponseMetadata

// NewDavinciConnectorMinimalResponseMetadata instantiates a new DavinciConnectorMinimalResponseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorMinimalResponseMetadata() *DavinciConnectorMinimalResponseMetadata {
	this := DavinciConnectorMinimalResponseMetadata{}
	return &this
}

// NewDavinciConnectorMinimalResponseMetadataWithDefaults instantiates a new DavinciConnectorMinimalResponseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorMinimalResponseMetadataWithDefaults() *DavinciConnectorMinimalResponseMetadata {
	this := DavinciConnectorMinimalResponseMetadata{}
	return &this
}

// GetColors returns the Colors field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadata) GetColors() DavinciConnectorMinimalResponseMetadataColors {
	if o == nil || IsNil(o.Colors) {
		var ret DavinciConnectorMinimalResponseMetadataColors
		return ret
	}
	return *o.Colors
}

// GetColorsOk returns a tuple with the Colors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadata) GetColorsOk() (*DavinciConnectorMinimalResponseMetadataColors, bool) {
	if o == nil || IsNil(o.Colors) {
		return nil, false
	}
	return o.Colors, true
}

// HasColors returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadata) HasColors() bool {
	if o != nil && !IsNil(o.Colors) {
		return true
	}

	return false
}

// SetColors gets a reference to the given DavinciConnectorMinimalResponseMetadataColors and assigns it to the Colors field.
func (o *DavinciConnectorMinimalResponseMetadata) SetColors(v DavinciConnectorMinimalResponseMetadataColors) {
	o.Colors = &v
}

// GetLogos returns the Logos field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadata) GetLogos() DavinciConnectorMinimalResponseMetadataLogos {
	if o == nil || IsNil(o.Logos) {
		var ret DavinciConnectorMinimalResponseMetadataLogos
		return ret
	}
	return *o.Logos
}

// GetLogosOk returns a tuple with the Logos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadata) GetLogosOk() (*DavinciConnectorMinimalResponseMetadataLogos, bool) {
	if o == nil || IsNil(o.Logos) {
		return nil, false
	}
	return o.Logos, true
}

// HasLogos returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadata) HasLogos() bool {
	if o != nil && !IsNil(o.Logos) {
		return true
	}

	return false
}

// SetLogos gets a reference to the given DavinciConnectorMinimalResponseMetadataLogos and assigns it to the Logos field.
func (o *DavinciConnectorMinimalResponseMetadata) SetLogos(v DavinciConnectorMinimalResponseMetadataLogos) {
	o.Logos = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadata) GetType() DavinciConnectorMinimalResponseMetadataType {
	if o == nil || IsNil(o.Type) {
		var ret DavinciConnectorMinimalResponseMetadataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadata) GetTypeOk() (*DavinciConnectorMinimalResponseMetadataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadata) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DavinciConnectorMinimalResponseMetadataType and assigns it to the Type field.
func (o *DavinciConnectorMinimalResponseMetadata) SetType(v DavinciConnectorMinimalResponseMetadataType) {
	o.Type = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadata) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadata) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadata) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *DavinciConnectorMinimalResponseMetadata) SetVendor(v string) {
	o.Vendor = &v
}

func (o DavinciConnectorMinimalResponseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorMinimalResponseMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Colors) {
		toSerialize["colors"] = o.Colors
	}
	if !IsNil(o.Logos) {
		toSerialize["logos"] = o.Logos
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorMinimalResponseMetadata) UnmarshalJSON(data []byte) (err error) {
	varDavinciConnectorMinimalResponseMetadata := _DavinciConnectorMinimalResponseMetadata{}

	err = json.Unmarshal(data, &varDavinciConnectorMinimalResponseMetadata)

	if err != nil {
		return err
	}

	*o = DavinciConnectorMinimalResponseMetadata(varDavinciConnectorMinimalResponseMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "colors")
		delete(additionalProperties, "logos")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorMinimalResponseMetadata) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Colors) {
		logAttrs = append(logAttrs, slog.Any("colors", *o.Colors))
	}
	if !IsNil(o.Logos) {
		logAttrs = append(logAttrs, slog.Any("logos", *o.Logos))
	}
	if !IsNil(o.Type) {
		logAttrs = append(logAttrs, slog.Any("type", *o.Type))
	}
	if !IsNil(o.Vendor) {
		logAttrs = append(logAttrs, slog.Any("vendor", *o.Vendor))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorMinimalResponseMetadata struct {
	value *DavinciConnectorMinimalResponseMetadata
	isSet bool
}

func (v NullableDavinciConnectorMinimalResponseMetadata) Get() *DavinciConnectorMinimalResponseMetadata {
	return v.value
}

func (v *NullableDavinciConnectorMinimalResponseMetadata) Set(val *DavinciConnectorMinimalResponseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorMinimalResponseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorMinimalResponseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorMinimalResponseMetadata(val *DavinciConnectorMinimalResponseMetadata) *NullableDavinciConnectorMinimalResponseMetadata {
	return &NullableDavinciConnectorMinimalResponseMetadata{value: val, isSet: true}
}

func (v NullableDavinciConnectorMinimalResponseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorMinimalResponseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
