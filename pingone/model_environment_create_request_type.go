// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentCreateRequestType the model 'EnvironmentCreateRequestType'
type EnvironmentCreateRequestType string

// List of Environment_Create_Request_Type
const (
	ENVIRONMENTCREATEREQUESTTYPE_PRODUCTION EnvironmentCreateRequestType = "PRODUCTION"
	ENVIRONMENTCREATEREQUESTTYPE_SANDBOX    EnvironmentCreateRequestType = "SANDBOX"
)

// All allowed values of EnvironmentCreateRequestType enum
var AllowedEnvironmentCreateRequestTypeEnumValues = []EnvironmentCreateRequestType{
	"PRODUCTION",
	"SANDBOX",
}

func (v *EnvironmentCreateRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentCreateRequestType(value)
	for _, existing := range AllowedEnvironmentCreateRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentCreateRequestType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentCreateRequestTypeFromValue returns a pointer to a valid EnvironmentCreateRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentCreateRequestTypeFromValue(v string) (*EnvironmentCreateRequestType, error) {
	ev := EnvironmentCreateRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentCreateRequestType: valid values are %v", v, AllowedEnvironmentCreateRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentCreateRequestType) IsValid() bool {
	for _, existing := range AllowedEnvironmentCreateRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Create_Request_Type value
func (v EnvironmentCreateRequestType) Ptr() *EnvironmentCreateRequestType {
	return &v
}

type NullableEnvironmentCreateRequestType struct {
	value *EnvironmentCreateRequestType
	isSet bool
}

func (v NullableEnvironmentCreateRequestType) Get() *EnvironmentCreateRequestType {
	return v.value
}

func (v *NullableEnvironmentCreateRequestType) Set(val *EnvironmentCreateRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentCreateRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentCreateRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentCreateRequestType(val *EnvironmentCreateRequestType) *NullableEnvironmentCreateRequestType {
	return &NullableEnvironmentCreateRequestType{value: val, isSet: true}
}

func (v NullableEnvironmentCreateRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentCreateRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
