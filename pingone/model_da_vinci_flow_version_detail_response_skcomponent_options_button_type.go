// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType the model 'DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType'
type DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType string

// List of DaVinci_Flow_Version_Detail_Response_Skcomponent_Options_Button_Type
const (
	DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSBUTTONTYPE_BACK_TO_PREVIOUS DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType = "back-to-previous"
	DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSBUTTONTYPE_FORM_SUBMIT      DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType = "form-submit"
	DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSBUTTONTYPE_MFA_RESET        DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType = "mfa-reset"
	DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSBUTTONTYPE_NEXT_EVENT       DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType = "next-event"
	DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSBUTTONTYPE_NUANCE_AUDIO     DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType = "nuance-audio"
	DAVINCIFLOWVERSIONDETAILRESPONSESKCOMPONENTOPTIONSBUTTONTYPE_OTP              DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType = "otp"
)

// All allowed values of DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType enum
var AllowedDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonTypeEnumValues = []DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType{
	"back-to-previous",
	"form-submit",
	"mfa-reset",
	"next-event",
	"nuance-audio",
	"otp",
}

func (v *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType(value)
	for _, existing := range AllowedDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonTypeFromValue returns a pointer to a valid DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonTypeFromValue(v string) (*DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType, error) {
	ev := DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType: valid values are %v", v, AllowedDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) IsValid() bool {
	for _, existing := range AllowedDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Flow_Version_Detail_Response_Skcomponent_Options_Button_Type value
func (v DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) Ptr() *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType {
	return &v
}

type NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType struct {
	value *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType
	isSet bool
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) Get() *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType {
	return v.value
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) Set(val *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType(val *DaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) *NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType {
	return &NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionDetailResponseSkcomponentOptionsButtonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
