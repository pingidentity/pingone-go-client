// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"

	"github.com/google/uuid"
)

// checks if the ErrorResponseCommon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseCommon{}

// checks if the ErrorResponseCommon type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &ErrorResponseCommon{}

// ErrorResponseCommon struct for ErrorResponseCommon
type ErrorResponseCommon struct {
	Details              []ErrorResponseCommonDetails `json:"details,omitempty"`
	Id                   *uuid.UUID                   `json:"id,omitempty"`
	Message              string                       `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _ErrorResponseCommon ErrorResponseCommon

// NewErrorResponseCommon instantiates a new ErrorResponseCommon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseCommon(message string) *ErrorResponseCommon {
	this := ErrorResponseCommon{}
	this.Message = message
	return &this
}

// NewErrorResponseCommonWithDefaults instantiates a new ErrorResponseCommon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseCommonWithDefaults() *ErrorResponseCommon {
	this := ErrorResponseCommon{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ErrorResponseCommon) GetDetails() []ErrorResponseCommonDetails {
	if o == nil || IsNil(o.Details) {
		var ret []ErrorResponseCommonDetails
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommon) GetDetailsOk() ([]ErrorResponseCommonDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ErrorResponseCommon) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ErrorResponseCommonDetails and assigns it to the Details field.
func (o *ErrorResponseCommon) SetDetails(v []ErrorResponseCommonDetails) {
	o.Details = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ErrorResponseCommon) GetId() uuid.UUID {
	if o == nil || IsNil(o.Id) {
		var ret uuid.UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommon) GetIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ErrorResponseCommon) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given uuid.UUID and assigns it to the Id field.
func (o *ErrorResponseCommon) SetId(v uuid.UUID) {
	o.Id = &v
}

// GetMessage returns the Message field value
func (o *ErrorResponseCommon) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommon) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorResponseCommon) SetMessage(v string) {
	o.Message = v
}

func (o ErrorResponseCommon) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseCommon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["message"] = o.Message

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorResponseCommon) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseCommon := _ErrorResponseCommon{}

	err = json.Unmarshal(data, &varErrorResponseCommon)

	if err != nil {
		return err
	}

	*o = ErrorResponseCommon(varErrorResponseCommon)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "details")
		delete(additionalProperties, "id")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o ErrorResponseCommon) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Details) {
		logAttrs = append(logAttrs, slog.Any("details", o.Details))
	}
	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	logAttrs = append(logAttrs, slog.Any("message", o.Message))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableErrorResponseCommon struct {
	value *ErrorResponseCommon
	isSet bool
}

func (v NullableErrorResponseCommon) Get() *ErrorResponseCommon {
	return v.value
}

func (v *NullableErrorResponseCommon) Set(val *ErrorResponseCommon) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseCommon) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseCommon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseCommon(val *ErrorResponseCommon) *NullableErrorResponseCommon {
	return &NullableErrorResponseCommon{value: val, isSet: true}
}

func (v NullableErrorResponseCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseCommon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
