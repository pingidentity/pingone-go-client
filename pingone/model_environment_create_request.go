// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the EnvironmentCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentCreateRequest{}

// checks if the EnvironmentCreateRequest type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentCreateRequest{}

// EnvironmentCreateRequest struct for EnvironmentCreateRequest
type EnvironmentCreateRequest struct {
	Name                 string                      `json:"name"`
	Region               EnvironmentRegionCode       `json:"region"`
	Type                 EnvironmentTypeValue        `json:"type"`
	License              EnvironmentLicense          `json:"license"`
	BillOfMaterials      *EnvironmentBillOfMaterials `json:"billOfMaterials,omitempty"`
	Description          *string                     `json:"description,omitempty"`
	Icon                 *string                     `json:"icon,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentCreateRequest EnvironmentCreateRequest

// NewEnvironmentCreateRequest instantiates a new EnvironmentCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentCreateRequest(name string, region EnvironmentRegionCode, type_ EnvironmentTypeValue, license EnvironmentLicense) *EnvironmentCreateRequest {
	this := EnvironmentCreateRequest{}
	this.Name = name
	this.Region = region
	this.Type = type_
	this.License = license
	return &this
}

// NewEnvironmentCreateRequestWithDefaults instantiates a new EnvironmentCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentCreateRequestWithDefaults() *EnvironmentCreateRequest {
	this := EnvironmentCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *EnvironmentCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentCreateRequest) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *EnvironmentCreateRequest) GetRegion() EnvironmentRegionCode {
	if o == nil {
		var ret EnvironmentRegionCode
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetRegionOk() (*EnvironmentRegionCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *EnvironmentCreateRequest) SetRegion(v EnvironmentRegionCode) {
	o.Region = v
}

// GetType returns the Type field value
func (o *EnvironmentCreateRequest) GetType() EnvironmentTypeValue {
	if o == nil {
		var ret EnvironmentTypeValue
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetTypeOk() (*EnvironmentTypeValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnvironmentCreateRequest) SetType(v EnvironmentTypeValue) {
	o.Type = v
}

// GetLicense returns the License field value
func (o *EnvironmentCreateRequest) GetLicense() EnvironmentLicense {
	if o == nil {
		var ret EnvironmentLicense
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetLicenseOk() (*EnvironmentLicense, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *EnvironmentCreateRequest) SetLicense(v EnvironmentLicense) {
	o.License = v
}

// GetBillOfMaterials returns the BillOfMaterials field value if set, zero value otherwise.
func (o *EnvironmentCreateRequest) GetBillOfMaterials() EnvironmentBillOfMaterials {
	if o == nil || IsNil(o.BillOfMaterials) {
		var ret EnvironmentBillOfMaterials
		return ret
	}
	return *o.BillOfMaterials
}

// GetBillOfMaterialsOk returns a tuple with the BillOfMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetBillOfMaterialsOk() (*EnvironmentBillOfMaterials, bool) {
	if o == nil || IsNil(o.BillOfMaterials) {
		return nil, false
	}
	return o.BillOfMaterials, true
}

// HasBillOfMaterials returns a boolean if a field has been set.
func (o *EnvironmentCreateRequest) HasBillOfMaterials() bool {
	if o != nil && !IsNil(o.BillOfMaterials) {
		return true
	}

	return false
}

// SetBillOfMaterials gets a reference to the given EnvironmentBillOfMaterials and assigns it to the BillOfMaterials field.
func (o *EnvironmentCreateRequest) SetBillOfMaterials(v EnvironmentBillOfMaterials) {
	o.BillOfMaterials = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentCreateRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentCreateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EnvironmentCreateRequest) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCreateRequest) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EnvironmentCreateRequest) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EnvironmentCreateRequest) SetIcon(v string) {
	o.Icon = &v
}

func (o EnvironmentCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	toSerialize["type"] = o.Type
	toSerialize["license"] = o.License
	if !IsNil(o.BillOfMaterials) {
		toSerialize["billOfMaterials"] = o.BillOfMaterials
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"region",
		"type",
		"license",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentCreateRequest := _EnvironmentCreateRequest{}

	err = json.Unmarshal(data, &varEnvironmentCreateRequest)

	if err != nil {
		return err
	}

	*o = EnvironmentCreateRequest(varEnvironmentCreateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "region")
		delete(additionalProperties, "type")
		delete(additionalProperties, "license")
		delete(additionalProperties, "billOfMaterials")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentCreateRequest) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("region", o.Region))
	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	logAttrs = append(logAttrs, slog.Any("license", o.License))
	if !IsNil(o.BillOfMaterials) {
		logAttrs = append(logAttrs, slog.Any("billOfMaterials", *o.BillOfMaterials))
	}
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.Icon) {
		logAttrs = append(logAttrs, slog.Any("icon", *o.Icon))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentCreateRequest struct {
	value *EnvironmentCreateRequest
	isSet bool
}

func (v NullableEnvironmentCreateRequest) Get() *EnvironmentCreateRequest {
	return v.value
}

func (v *NullableEnvironmentCreateRequest) Set(val *EnvironmentCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentCreateRequest(val *EnvironmentCreateRequest) *NullableEnvironmentCreateRequest {
	return &NullableEnvironmentCreateRequest{value: val, isSet: true}
}

func (v NullableEnvironmentCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
