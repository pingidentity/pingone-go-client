/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

API version: development-2025-05-08T12-37-45
Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableReplaceRequestDataType the model 'DaVinciVariableReplaceRequestDataType'
type DaVinciVariableReplaceRequestDataType string

// List of DaVinci_Variable_Replace_Request_Data_Type
const (
	DAVINCIVARIABLEREPLACEREQUESTDATATYPE_BOOLEAN DaVinciVariableReplaceRequestDataType = "boolean"
	DAVINCIVARIABLEREPLACEREQUESTDATATYPE_NUMBER  DaVinciVariableReplaceRequestDataType = "number"
	DAVINCIVARIABLEREPLACEREQUESTDATATYPE_OBJECT  DaVinciVariableReplaceRequestDataType = "object"
	DAVINCIVARIABLEREPLACEREQUESTDATATYPE_SECRET  DaVinciVariableReplaceRequestDataType = "secret"
	DAVINCIVARIABLEREPLACEREQUESTDATATYPE_STRING  DaVinciVariableReplaceRequestDataType = "string"
)

// All allowed values of DaVinciVariableReplaceRequestDataType enum
var AllowedDaVinciVariableReplaceRequestDataTypeEnumValues = []DaVinciVariableReplaceRequestDataType{
	"boolean",
	"number",
	"object",
	"secret",
	"string",
}

func (v *DaVinciVariableReplaceRequestDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciVariableReplaceRequestDataType(value)
	for _, existing := range AllowedDaVinciVariableReplaceRequestDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciVariableReplaceRequestDataType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciVariableReplaceRequestDataTypeFromValue returns a pointer to a valid DaVinciVariableReplaceRequestDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciVariableReplaceRequestDataTypeFromValue(v string) (*DaVinciVariableReplaceRequestDataType, error) {
	ev := DaVinciVariableReplaceRequestDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciVariableReplaceRequestDataType: valid values are %v", v, AllowedDaVinciVariableReplaceRequestDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciVariableReplaceRequestDataType) IsValid() bool {
	for _, existing := range AllowedDaVinciVariableReplaceRequestDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Variable_Replace_Request_Data_Type value
func (v DaVinciVariableReplaceRequestDataType) Ptr() *DaVinciVariableReplaceRequestDataType {
	return &v
}

type NullableDaVinciVariableReplaceRequestDataType struct {
	value *DaVinciVariableReplaceRequestDataType
	isSet bool
}

func (v NullableDaVinciVariableReplaceRequestDataType) Get() *DaVinciVariableReplaceRequestDataType {
	return v.value
}

func (v *NullableDaVinciVariableReplaceRequestDataType) Set(val *DaVinciVariableReplaceRequestDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableReplaceRequestDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableReplaceRequestDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableReplaceRequestDataType(val *DaVinciVariableReplaceRequestDataType) *NullableDaVinciVariableReplaceRequestDataType {
	return &NullableDaVinciVariableReplaceRequestDataType{value: val, isSet: true}
}

func (v NullableDaVinciVariableReplaceRequestDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableReplaceRequestDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
