/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentBillOfMaterialsSolutionType the model 'EnvironmentBillOfMaterialsSolutionType'
type EnvironmentBillOfMaterialsSolutionType string

// List of Environment_Bill_of_Materials_Solution_Type
const (
	ENVIRONMENTBILLOFMATERIALSSOLUTIONTYPE_CIAM_TRIAL EnvironmentBillOfMaterialsSolutionType = "CIAM_TRIAL"
	ENVIRONMENTBILLOFMATERIALSSOLUTIONTYPE_CUSTOMER   EnvironmentBillOfMaterialsSolutionType = "CUSTOMER"
	ENVIRONMENTBILLOFMATERIALSSOLUTIONTYPE_WF_TRIAL   EnvironmentBillOfMaterialsSolutionType = "WF_TRIAL"
	ENVIRONMENTBILLOFMATERIALSSOLUTIONTYPE_WORKFORCE  EnvironmentBillOfMaterialsSolutionType = "WORKFORCE"
)

// All allowed values of EnvironmentBillOfMaterialsSolutionType enum
var AllowedEnvironmentBillOfMaterialsSolutionTypeEnumValues = []EnvironmentBillOfMaterialsSolutionType{
	"CIAM_TRIAL",
	"CUSTOMER",
	"WF_TRIAL",
	"WORKFORCE",
}

func (v *EnvironmentBillOfMaterialsSolutionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentBillOfMaterialsSolutionType(value)
	for _, existing := range AllowedEnvironmentBillOfMaterialsSolutionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentBillOfMaterialsSolutionType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentBillOfMaterialsSolutionTypeFromValue returns a pointer to a valid EnvironmentBillOfMaterialsSolutionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentBillOfMaterialsSolutionTypeFromValue(v string) (*EnvironmentBillOfMaterialsSolutionType, error) {
	ev := EnvironmentBillOfMaterialsSolutionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentBillOfMaterialsSolutionType: valid values are %v", v, AllowedEnvironmentBillOfMaterialsSolutionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentBillOfMaterialsSolutionType) IsValid() bool {
	for _, existing := range AllowedEnvironmentBillOfMaterialsSolutionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Bill_of_Materials_Solution_Type value
func (v EnvironmentBillOfMaterialsSolutionType) Ptr() *EnvironmentBillOfMaterialsSolutionType {
	return &v
}

type NullableEnvironmentBillOfMaterialsSolutionType struct {
	value *EnvironmentBillOfMaterialsSolutionType
	isSet bool
}

func (v NullableEnvironmentBillOfMaterialsSolutionType) Get() *EnvironmentBillOfMaterialsSolutionType {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterialsSolutionType) Set(val *EnvironmentBillOfMaterialsSolutionType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterialsSolutionType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterialsSolutionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterialsSolutionType(val *EnvironmentBillOfMaterialsSolutionType) *NullableEnvironmentBillOfMaterialsSolutionType {
	return &NullableEnvironmentBillOfMaterialsSolutionType{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterialsSolutionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterialsSolutionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
