/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"strings"

	"github.com/google/uuid"
)

// checks if the UnexpectedServiceError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnexpectedServiceError{}

// checks if the UnexpectedServiceError type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &UnexpectedServiceError{}

// UnexpectedServiceError struct for UnexpectedServiceError
type UnexpectedServiceError struct {
	Details              []ErrorResponseCommonDetails `json:"details,omitempty"`
	Id                   *uuid.UUID                   `json:"id,omitempty"`
	Message              string                       `json:"message"`
	Code                 UnexpectedServiceErrorCode   `json:"code"`
	AdditionalProperties map[string]interface{}
}

type _UnexpectedServiceError UnexpectedServiceError

// NewUnexpectedServiceError instantiates a new UnexpectedServiceError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnexpectedServiceError(message string, code UnexpectedServiceErrorCode) *UnexpectedServiceError {
	this := UnexpectedServiceError{}
	this.Message = message
	this.Code = code
	return &this
}

// NewUnexpectedServiceErrorWithDefaults instantiates a new UnexpectedServiceError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnexpectedServiceErrorWithDefaults() *UnexpectedServiceError {
	this := UnexpectedServiceError{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *UnexpectedServiceError) GetDetails() []ErrorResponseCommonDetails {
	if o == nil || IsNil(o.Details) {
		var ret []ErrorResponseCommonDetails
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpectedServiceError) GetDetailsOk() ([]ErrorResponseCommonDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *UnexpectedServiceError) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ErrorResponseCommonDetails and assigns it to the Details field.
func (o *UnexpectedServiceError) SetDetails(v []ErrorResponseCommonDetails) {
	o.Details = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnexpectedServiceError) GetId() uuid.UUID {
	if o == nil || IsNil(o.Id) {
		var ret uuid.UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpectedServiceError) GetIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnexpectedServiceError) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given uuid.UUID and assigns it to the Id field.
func (o *UnexpectedServiceError) SetId(v uuid.UUID) {
	o.Id = &v
}

// GetMessage returns the Message field value
func (o *UnexpectedServiceError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *UnexpectedServiceError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *UnexpectedServiceError) SetMessage(v string) {
	o.Message = v
}

// GetCode returns the Code field value
func (o *UnexpectedServiceError) GetCode() UnexpectedServiceErrorCode {
	if o == nil {
		var ret UnexpectedServiceErrorCode
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *UnexpectedServiceError) GetCodeOk() (*UnexpectedServiceErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *UnexpectedServiceError) SetCode(v UnexpectedServiceErrorCode) {
	o.Code = v
}

func (o UnexpectedServiceError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnexpectedServiceError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["message"] = o.Message
	toSerialize["code"] = o.Code

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UnexpectedServiceError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnexpectedServiceError := _UnexpectedServiceError{}

	err = json.Unmarshal(data, &varUnexpectedServiceError)

	if err != nil {
		return err
	}

	*o = UnexpectedServiceError(varUnexpectedServiceError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "details")
		delete(additionalProperties, "id")
		delete(additionalProperties, "message")
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o UnexpectedServiceError) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Details) {
		logAttrs = append(logAttrs, slog.Any("details", o.Details))
	}
	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	logAttrs = append(logAttrs, slog.Any("message", o.Message))
	logAttrs = append(logAttrs, slog.Any("code", o.Code))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

func (o UnexpectedServiceError) Error() string {

	message := []string{}
	message = append(message, string(o.Code))
	message = append(message, string(o.Message))

	return strings.Join(message, ": ")
}

type NullableUnexpectedServiceError struct {
	value *UnexpectedServiceError
	isSet bool
}

func (v NullableUnexpectedServiceError) Get() *UnexpectedServiceError {
	return v.value
}

func (v *NullableUnexpectedServiceError) Set(val *UnexpectedServiceError) {
	v.value = val
	v.isSet = true
}

func (v NullableUnexpectedServiceError) IsSet() bool {
	return v.isSet
}

func (v *NullableUnexpectedServiceError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnexpectedServiceError(val *UnexpectedServiceError) *NullableUnexpectedServiceError {
	return &NullableUnexpectedServiceError{value: val, isSet: true}
}

func (v NullableUnexpectedServiceError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnexpectedServiceError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
