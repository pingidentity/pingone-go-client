// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DavinciConnectorMinimalResponseMetadataColors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorMinimalResponseMetadataColors{}

// checks if the DavinciConnectorMinimalResponseMetadataColors type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorMinimalResponseMetadataColors{}

// DavinciConnectorMinimalResponseMetadataColors struct for DavinciConnectorMinimalResponseMetadataColors
type DavinciConnectorMinimalResponseMetadataColors struct {
	Canvas               *string `json:"canvas,omitempty"`
	CanvasText           *string `json:"canvasText,omitempty"`
	Dark                 *string `json:"dark,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorMinimalResponseMetadataColors DavinciConnectorMinimalResponseMetadataColors

// NewDavinciConnectorMinimalResponseMetadataColors instantiates a new DavinciConnectorMinimalResponseMetadataColors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorMinimalResponseMetadataColors() *DavinciConnectorMinimalResponseMetadataColors {
	this := DavinciConnectorMinimalResponseMetadataColors{}
	return &this
}

// NewDavinciConnectorMinimalResponseMetadataColorsWithDefaults instantiates a new DavinciConnectorMinimalResponseMetadataColors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorMinimalResponseMetadataColorsWithDefaults() *DavinciConnectorMinimalResponseMetadataColors {
	this := DavinciConnectorMinimalResponseMetadataColors{}
	return &this
}

// GetCanvas returns the Canvas field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadataColors) GetCanvas() string {
	if o == nil || IsNil(o.Canvas) {
		var ret string
		return ret
	}
	return *o.Canvas
}

// GetCanvasOk returns a tuple with the Canvas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadataColors) GetCanvasOk() (*string, bool) {
	if o == nil || IsNil(o.Canvas) {
		return nil, false
	}
	return o.Canvas, true
}

// HasCanvas returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadataColors) HasCanvas() bool {
	if o != nil && !IsNil(o.Canvas) {
		return true
	}

	return false
}

// SetCanvas gets a reference to the given string and assigns it to the Canvas field.
func (o *DavinciConnectorMinimalResponseMetadataColors) SetCanvas(v string) {
	o.Canvas = &v
}

// GetCanvasText returns the CanvasText field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadataColors) GetCanvasText() string {
	if o == nil || IsNil(o.CanvasText) {
		var ret string
		return ret
	}
	return *o.CanvasText
}

// GetCanvasTextOk returns a tuple with the CanvasText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadataColors) GetCanvasTextOk() (*string, bool) {
	if o == nil || IsNil(o.CanvasText) {
		return nil, false
	}
	return o.CanvasText, true
}

// HasCanvasText returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadataColors) HasCanvasText() bool {
	if o != nil && !IsNil(o.CanvasText) {
		return true
	}

	return false
}

// SetCanvasText gets a reference to the given string and assigns it to the CanvasText field.
func (o *DavinciConnectorMinimalResponseMetadataColors) SetCanvasText(v string) {
	o.CanvasText = &v
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadataColors) GetDark() string {
	if o == nil || IsNil(o.Dark) {
		var ret string
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadataColors) GetDarkOk() (*string, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadataColors) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given string and assigns it to the Dark field.
func (o *DavinciConnectorMinimalResponseMetadataColors) SetDark(v string) {
	o.Dark = &v
}

func (o DavinciConnectorMinimalResponseMetadataColors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorMinimalResponseMetadataColors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Canvas) {
		toSerialize["canvas"] = o.Canvas
	}
	if !IsNil(o.CanvasText) {
		toSerialize["canvasText"] = o.CanvasText
	}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorMinimalResponseMetadataColors) UnmarshalJSON(data []byte) (err error) {
	varDavinciConnectorMinimalResponseMetadataColors := _DavinciConnectorMinimalResponseMetadataColors{}

	err = json.Unmarshal(data, &varDavinciConnectorMinimalResponseMetadataColors)

	if err != nil {
		return err
	}

	*o = DavinciConnectorMinimalResponseMetadataColors(varDavinciConnectorMinimalResponseMetadataColors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "canvas")
		delete(additionalProperties, "canvasText")
		delete(additionalProperties, "dark")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorMinimalResponseMetadataColors) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Canvas) {
		logAttrs = append(logAttrs, slog.Any("canvas", *o.Canvas))
	}
	if !IsNil(o.CanvasText) {
		logAttrs = append(logAttrs, slog.Any("canvasText", *o.CanvasText))
	}
	if !IsNil(o.Dark) {
		logAttrs = append(logAttrs, slog.Any("dark", *o.Dark))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorMinimalResponseMetadataColors struct {
	value *DavinciConnectorMinimalResponseMetadataColors
	isSet bool
}

func (v NullableDavinciConnectorMinimalResponseMetadataColors) Get() *DavinciConnectorMinimalResponseMetadataColors {
	return v.value
}

func (v *NullableDavinciConnectorMinimalResponseMetadataColors) Set(val *DavinciConnectorMinimalResponseMetadataColors) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorMinimalResponseMetadataColors) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorMinimalResponseMetadataColors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorMinimalResponseMetadataColors(val *DavinciConnectorMinimalResponseMetadataColors) *NullableDavinciConnectorMinimalResponseMetadataColors {
	return &NullableDavinciConnectorMinimalResponseMetadataColors{value: val, isSet: true}
}

func (v NullableDavinciConnectorMinimalResponseMetadataColors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorMinimalResponseMetadataColors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
