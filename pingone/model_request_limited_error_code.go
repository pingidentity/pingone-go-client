// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// RequestLimitedErrorCode the model 'RequestLimitedErrorCode'
type RequestLimitedErrorCode string

// List of Request_Limited_Error_Code
const (
	REQUESTLIMITEDERRORCODE_REQUEST_LIMITED RequestLimitedErrorCode = "REQUEST_LIMITED"
)

// All allowed values of RequestLimitedErrorCode enum
var AllowedRequestLimitedErrorCodeEnumValues = []RequestLimitedErrorCode{
	"REQUEST_LIMITED",
}

func (v *RequestLimitedErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestLimitedErrorCode(value)
	for _, existing := range AllowedRequestLimitedErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = RequestLimitedErrorCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewRequestLimitedErrorCodeFromValue returns a pointer to a valid RequestLimitedErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestLimitedErrorCodeFromValue(v string) (*RequestLimitedErrorCode, error) {
	ev := RequestLimitedErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestLimitedErrorCode: valid values are %v", v, AllowedRequestLimitedErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestLimitedErrorCode) IsValid() bool {
	for _, existing := range AllowedRequestLimitedErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Request_Limited_Error_Code value
func (v RequestLimitedErrorCode) Ptr() *RequestLimitedErrorCode {
	return &v
}

type NullableRequestLimitedErrorCode struct {
	value *RequestLimitedErrorCode
	isSet bool
}

func (v NullableRequestLimitedErrorCode) Get() *RequestLimitedErrorCode {
	return v.value
}

func (v *NullableRequestLimitedErrorCode) Set(val *RequestLimitedErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestLimitedErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestLimitedErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestLimitedErrorCode(val *RequestLimitedErrorCode) *NullableRequestLimitedErrorCode {
	return &NullableRequestLimitedErrorCode{value: val, isSet: true}
}

func (v NullableRequestLimitedErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestLimitedErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
