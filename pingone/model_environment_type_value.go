// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentTypeValue the model 'EnvironmentTypeValue'
type EnvironmentTypeValue string

// List of EnvironmentTypeValue
const (
	ENVIRONMENTTYPEVALUE_PRODUCTION EnvironmentTypeValue = "PRODUCTION"
	ENVIRONMENTTYPEVALUE_SANDBOX    EnvironmentTypeValue = "SANDBOX"
)

// All allowed values of EnvironmentTypeValue enum
var AllowedEnvironmentTypeValueEnumValues = []EnvironmentTypeValue{
	"PRODUCTION",
	"SANDBOX",
}

func (v *EnvironmentTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentTypeValue(value)
	for _, existing := range AllowedEnvironmentTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentTypeValue(fmt.Sprintf("%s", value))
	return nil
}

// NewEnvironmentTypeValueFromValue returns a pointer to a valid EnvironmentTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentTypeValueFromValue(v string) (*EnvironmentTypeValue, error) {
	ev := EnvironmentTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentTypeValue: valid values are %v", v, AllowedEnvironmentTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentTypeValue) IsValid() bool {
	for _, existing := range AllowedEnvironmentTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnvironmentTypeValue value
func (v EnvironmentTypeValue) Ptr() *EnvironmentTypeValue {
	return &v
}

type NullableEnvironmentTypeValue struct {
	value *EnvironmentTypeValue
	isSet bool
}

func (v NullableEnvironmentTypeValue) Get() *EnvironmentTypeValue {
	return v.value
}

func (v *NullableEnvironmentTypeValue) Set(val *EnvironmentTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentTypeValue(val *EnvironmentTypeValue) *NullableEnvironmentTypeValue {
	return &NullableEnvironmentTypeValue{value: val, isSet: true}
}

func (v NullableEnvironmentTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
