// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowCreateRequest{}

// checks if the DaVinciFlowCreateRequest type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowCreateRequest{}

// DaVinciFlowCreateRequest struct for DaVinciFlowCreateRequest
type DaVinciFlowCreateRequest struct {
	Name                 string                                `json:"name" validate:"regexp=^\\\\s*([\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\/.'_-]).?(?!.*((<)|(\\\\$\\\\{)))"`
	Color                *string                               `json:"color,omitempty"`
	Description          *string                               `json:"description,omitempty" validate:"regexp=^\\\\s*[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\/.'_ -]?(?!.*((<)|(\\\\$\\\\{)))"`
	GraphData            *DaVinciFlowGraphDataRequest          `json:"graphData,omitempty"`
	InputSchema          []DaVinciFlowInputSchemaRequestItem   `json:"inputSchema,omitempty"`
	OutputSchema         *DaVinciFlowCreateRequestOutputSchema `json:"outputSchema,omitempty"`
	Settings             *DaVinciFlowSettingsRequest           `json:"settings,omitempty"`
	Trigger              *DaVinciFlowCreateRequestTrigger      `json:"trigger,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowCreateRequest DaVinciFlowCreateRequest

// NewDaVinciFlowCreateRequest instantiates a new DaVinciFlowCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowCreateRequest(name string) *DaVinciFlowCreateRequest {
	this := DaVinciFlowCreateRequest{}
	this.Name = name
	return &this
}

// NewDaVinciFlowCreateRequestWithDefaults instantiates a new DaVinciFlowCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowCreateRequestWithDefaults() *DaVinciFlowCreateRequest {
	this := DaVinciFlowCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *DaVinciFlowCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciFlowCreateRequest) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *DaVinciFlowCreateRequest) SetColor(v string) {
	o.Color = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DaVinciFlowCreateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetGraphData returns the GraphData field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetGraphData() DaVinciFlowGraphDataRequest {
	if o == nil || IsNil(o.GraphData) {
		var ret DaVinciFlowGraphDataRequest
		return ret
	}
	return *o.GraphData
}

// GetGraphDataOk returns a tuple with the GraphData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetGraphDataOk() (*DaVinciFlowGraphDataRequest, bool) {
	if o == nil || IsNil(o.GraphData) {
		return nil, false
	}
	return o.GraphData, true
}

// HasGraphData returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasGraphData() bool {
	if o != nil && !IsNil(o.GraphData) {
		return true
	}

	return false
}

// SetGraphData gets a reference to the given DaVinciFlowGraphDataRequest and assigns it to the GraphData field.
func (o *DaVinciFlowCreateRequest) SetGraphData(v DaVinciFlowGraphDataRequest) {
	o.GraphData = &v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetInputSchema() []DaVinciFlowInputSchemaRequestItem {
	if o == nil || IsNil(o.InputSchema) {
		var ret []DaVinciFlowInputSchemaRequestItem
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetInputSchemaOk() ([]DaVinciFlowInputSchemaRequestItem, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return nil, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given []DaVinciFlowInputSchemaRequestItem and assigns it to the InputSchema field.
func (o *DaVinciFlowCreateRequest) SetInputSchema(v []DaVinciFlowInputSchemaRequestItem) {
	o.InputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetOutputSchema() DaVinciFlowCreateRequestOutputSchema {
	if o == nil || IsNil(o.OutputSchema) {
		var ret DaVinciFlowCreateRequestOutputSchema
		return ret
	}
	return *o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetOutputSchemaOk() (*DaVinciFlowCreateRequestOutputSchema, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return nil, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given DaVinciFlowCreateRequestOutputSchema and assigns it to the OutputSchema field.
func (o *DaVinciFlowCreateRequest) SetOutputSchema(v DaVinciFlowCreateRequestOutputSchema) {
	o.OutputSchema = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetSettings() DaVinciFlowSettingsRequest {
	if o == nil || IsNil(o.Settings) {
		var ret DaVinciFlowSettingsRequest
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetSettingsOk() (*DaVinciFlowSettingsRequest, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given DaVinciFlowSettingsRequest and assigns it to the Settings field.
func (o *DaVinciFlowCreateRequest) SetSettings(v DaVinciFlowSettingsRequest) {
	o.Settings = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *DaVinciFlowCreateRequest) GetTrigger() DaVinciFlowCreateRequestTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret DaVinciFlowCreateRequestTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowCreateRequest) GetTriggerOk() (*DaVinciFlowCreateRequestTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *DaVinciFlowCreateRequest) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given DaVinciFlowCreateRequestTrigger and assigns it to the Trigger field.
func (o *DaVinciFlowCreateRequest) SetTrigger(v DaVinciFlowCreateRequestTrigger) {
	o.Trigger = &v
}

func (o DaVinciFlowCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.GraphData) {
		toSerialize["graphData"] = o.GraphData
	}
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["outputSchema"] = o.OutputSchema
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowCreateRequest := _DaVinciFlowCreateRequest{}

	err = json.Unmarshal(data, &varDaVinciFlowCreateRequest)

	if err != nil {
		return err
	}

	*o = DaVinciFlowCreateRequest(varDaVinciFlowCreateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "color")
		delete(additionalProperties, "description")
		delete(additionalProperties, "graphData")
		delete(additionalProperties, "inputSchema")
		delete(additionalProperties, "outputSchema")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "trigger")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowCreateRequest) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.Color) {
		logAttrs = append(logAttrs, slog.Any("color", *o.Color))
	}
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.GraphData) {
		logAttrs = append(logAttrs, slog.Any("graphData", *o.GraphData))
	}
	if !IsNil(o.InputSchema) {
		logAttrs = append(logAttrs, slog.Any("inputSchema", o.InputSchema))
	}
	if !IsNil(o.OutputSchema) {
		logAttrs = append(logAttrs, slog.Any("outputSchema", *o.OutputSchema))
	}
	if !IsNil(o.Settings) {
		logAttrs = append(logAttrs, slog.Any("settings", *o.Settings))
	}
	if !IsNil(o.Trigger) {
		logAttrs = append(logAttrs, slog.Any("trigger", *o.Trigger))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowCreateRequest struct {
	value *DaVinciFlowCreateRequest
	isSet bool
}

func (v NullableDaVinciFlowCreateRequest) Get() *DaVinciFlowCreateRequest {
	return v.value
}

func (v *NullableDaVinciFlowCreateRequest) Set(val *DaVinciFlowCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowCreateRequest(val *DaVinciFlowCreateRequest) *NullableDaVinciFlowCreateRequest {
	return &NullableDaVinciFlowCreateRequest{value: val, isSet: true}
}

func (v NullableDaVinciFlowCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
