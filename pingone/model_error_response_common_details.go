/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the ErrorResponseCommonDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseCommonDetails{}

// checks if the ErrorResponseCommonDetails type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &ErrorResponseCommonDetails{}

// ErrorResponseCommonDetails struct for ErrorResponseCommonDetails
type ErrorResponseCommonDetails struct {
	Code                 ErrorResponseCommonDetailsCode        `json:"code"`
	InnerError           *ErrorResponseCommonDetailsInnerError `json:"innerError,omitempty"`
	Message              string                                `json:"message"`
	Target               *string                               `json:"target,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrorResponseCommonDetails ErrorResponseCommonDetails

// NewErrorResponseCommonDetails instantiates a new ErrorResponseCommonDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseCommonDetails(code ErrorResponseCommonDetailsCode, message string) *ErrorResponseCommonDetails {
	this := ErrorResponseCommonDetails{}
	this.Code = code
	this.Message = message
	return &this
}

// NewErrorResponseCommonDetailsWithDefaults instantiates a new ErrorResponseCommonDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseCommonDetailsWithDefaults() *ErrorResponseCommonDetails {
	this := ErrorResponseCommonDetails{}
	return &this
}

// GetCode returns the Code field value
func (o *ErrorResponseCommonDetails) GetCode() ErrorResponseCommonDetailsCode {
	if o == nil {
		var ret ErrorResponseCommonDetailsCode
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommonDetails) GetCodeOk() (*ErrorResponseCommonDetailsCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ErrorResponseCommonDetails) SetCode(v ErrorResponseCommonDetailsCode) {
	o.Code = v
}

// GetInnerError returns the InnerError field value if set, zero value otherwise.
func (o *ErrorResponseCommonDetails) GetInnerError() ErrorResponseCommonDetailsInnerError {
	if o == nil || IsNil(o.InnerError) {
		var ret ErrorResponseCommonDetailsInnerError
		return ret
	}
	return *o.InnerError
}

// GetInnerErrorOk returns a tuple with the InnerError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommonDetails) GetInnerErrorOk() (*ErrorResponseCommonDetailsInnerError, bool) {
	if o == nil || IsNil(o.InnerError) {
		return nil, false
	}
	return o.InnerError, true
}

// HasInnerError returns a boolean if a field has been set.
func (o *ErrorResponseCommonDetails) HasInnerError() bool {
	if o != nil && !IsNil(o.InnerError) {
		return true
	}

	return false
}

// SetInnerError gets a reference to the given ErrorResponseCommonDetailsInnerError and assigns it to the InnerError field.
func (o *ErrorResponseCommonDetails) SetInnerError(v ErrorResponseCommonDetailsInnerError) {
	o.InnerError = &v
}

// GetMessage returns the Message field value
func (o *ErrorResponseCommonDetails) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommonDetails) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorResponseCommonDetails) SetMessage(v string) {
	o.Message = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *ErrorResponseCommonDetails) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseCommonDetails) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *ErrorResponseCommonDetails) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *ErrorResponseCommonDetails) SetTarget(v string) {
	o.Target = &v
}

func (o ErrorResponseCommonDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseCommonDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.InnerError) {
		toSerialize["innerError"] = o.InnerError
	}
	toSerialize["message"] = o.Message
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorResponseCommonDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseCommonDetails := _ErrorResponseCommonDetails{}

	err = json.Unmarshal(data, &varErrorResponseCommonDetails)

	if err != nil {
		return err
	}

	*o = ErrorResponseCommonDetails(varErrorResponseCommonDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "innerError")
		delete(additionalProperties, "message")
		delete(additionalProperties, "target")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o ErrorResponseCommonDetails) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("code", o.Code))
	if !IsNil(o.InnerError) {
		logAttrs = append(logAttrs, slog.Any("innerError", *o.InnerError))
	}
	logAttrs = append(logAttrs, slog.Any("message", o.Message))
	if !IsNil(o.Target) {
		logAttrs = append(logAttrs, slog.Any("target", *o.Target))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableErrorResponseCommonDetails struct {
	value *ErrorResponseCommonDetails
	isSet bool
}

func (v NullableErrorResponseCommonDetails) Get() *ErrorResponseCommonDetails {
	return v.value
}

func (v *NullableErrorResponseCommonDetails) Set(val *ErrorResponseCommonDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseCommonDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseCommonDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseCommonDetails(val *ErrorResponseCommonDetails) *NullableErrorResponseCommonDetails {
	return &NullableErrorResponseCommonDetails{value: val, isSet: true}
}

func (v NullableErrorResponseCommonDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseCommonDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
