// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow{}

// checks if the DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow{}

// DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow struct for DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow
type DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow struct {
	Id                   string   `json:"id"`
	Version              *float32 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow

// NewDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow instantiates a new DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow(id string) *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow {
	this := DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow{}
	this.Id = id
	return &this
}

// NewDaVinciFlowPolicyEventsCollectionEmbeddedEventFlowWithDefaults instantiates a new DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyEventsCollectionEmbeddedEventFlowWithDefaults() *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow {
	this := DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow{}
	return &this
}

// GetId returns the Id field value
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) GetVersion() float32 {
	if o == nil || IsNil(o.Version) {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) GetVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) SetVersion(v float32) {
	o.Version = &v
}

func (o DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow := _DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow(varDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	if !IsNil(o.Version) {
		logAttrs = append(logAttrs, slog.Any("version", *o.Version))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow struct {
	value *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow
	isSet bool
}

func (v NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) Get() *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow {
	return v.value
}

func (v *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) Set(val *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow(val *DaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow {
	return &NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyEventsCollectionEmbeddedEventFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
