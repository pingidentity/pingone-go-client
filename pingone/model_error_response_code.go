/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

API version: development-2025-05-08T11-24-44
Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// ErrorResponseCode the model 'ErrorResponseCode'
type ErrorResponseCode string

// List of ErrorResponse_code
const (
	ERRORRESPONSECODE_ACCESS_FAILED    ErrorResponseCode = "ACCESS_FAILED"
	ERRORRESPONSECODE_INVALID_DATA     ErrorResponseCode = "INVALID_DATA"
	ERRORRESPONSECODE_INVALID_REQUEST  ErrorResponseCode = "INVALID_REQUEST"
	ERRORRESPONSECODE_NOT_FOUND        ErrorResponseCode = "NOT_FOUND"
	ERRORRESPONSECODE_REQUEST_FAILED   ErrorResponseCode = "REQUEST_FAILED"
	ERRORRESPONSECODE_REQUEST_LIMITED  ErrorResponseCode = "REQUEST_LIMITED"
	ERRORRESPONSECODE_UNEXPECTED_ERROR ErrorResponseCode = "UNEXPECTED_ERROR"
)

// All allowed values of ErrorResponseCode enum
var AllowedErrorResponseCodeEnumValues = []ErrorResponseCode{
	"ACCESS_FAILED",
	"INVALID_DATA",
	"INVALID_REQUEST",
	"NOT_FOUND",
	"REQUEST_FAILED",
	"REQUEST_LIMITED",
	"UNEXPECTED_ERROR",
}

func (v *ErrorResponseCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorResponseCode(value)
	for _, existing := range AllowedErrorResponseCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ErrorResponseCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewErrorResponseCodeFromValue returns a pointer to a valid ErrorResponseCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorResponseCodeFromValue(v string) (*ErrorResponseCode, error) {
	ev := ErrorResponseCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorResponseCode: valid values are %v", v, AllowedErrorResponseCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorResponseCode) IsValid() bool {
	for _, existing := range AllowedErrorResponseCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorResponse_code value
func (v ErrorResponseCode) Ptr() *ErrorResponseCode {
	return &v
}

type NullableErrorResponseCode struct {
	value *ErrorResponseCode
	isSet bool
}

func (v NullableErrorResponseCode) Get() *ErrorResponseCode {
	return v.value
}

func (v *NullableErrorResponseCode) Set(val *ErrorResponseCode) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseCode) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseCode(val *ErrorResponseCode) *NullableErrorResponseCode {
	return &NullableErrorResponseCode{value: val, isSet: true}
}

func (v NullableErrorResponseCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
