// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// AccessFailedErrorCode the model 'AccessFailedErrorCode'
type AccessFailedErrorCode string

// List of Access_Failed_Error_Code
const (
	ACCESSFAILEDERRORCODE_ACCESS_FAILED AccessFailedErrorCode = "ACCESS_FAILED"
)

// All allowed values of AccessFailedErrorCode enum
var AllowedAccessFailedErrorCodeEnumValues = []AccessFailedErrorCode{
	"ACCESS_FAILED",
}

func (v *AccessFailedErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessFailedErrorCode(value)
	for _, existing := range AllowedAccessFailedErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = AccessFailedErrorCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewAccessFailedErrorCodeFromValue returns a pointer to a valid AccessFailedErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessFailedErrorCodeFromValue(v string) (*AccessFailedErrorCode, error) {
	ev := AccessFailedErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessFailedErrorCode: valid values are %v", v, AllowedAccessFailedErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessFailedErrorCode) IsValid() bool {
	for _, existing := range AllowedAccessFailedErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Access_Failed_Error_Code value
func (v AccessFailedErrorCode) Ptr() *AccessFailedErrorCode {
	return &v
}

type NullableAccessFailedErrorCode struct {
	value *AccessFailedErrorCode
	isSet bool
}

func (v NullableAccessFailedErrorCode) Get() *AccessFailedErrorCode {
	return v.value
}

func (v *NullableAccessFailedErrorCode) Set(val *AccessFailedErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessFailedErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessFailedErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessFailedErrorCode(val *AccessFailedErrorCode) *NullableAccessFailedErrorCode {
	return &NullableAccessFailedErrorCode{value: val, isSet: true}
}

func (v NullableAccessFailedErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessFailedErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
