// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableCreateRequestValue - struct for DaVinciVariableCreateRequestValue
type DaVinciVariableCreateRequestValue struct {
	Bool              *bool
	Float32           *float32
	MapmapOfStringAny *map[string]interface{}
	String            *string
}

// boolAsDaVinciVariableCreateRequestValue is a convenience function that returns bool wrapped in DaVinciVariableCreateRequestValue
func BoolAsDaVinciVariableCreateRequestValue(v *bool) DaVinciVariableCreateRequestValue {
	return DaVinciVariableCreateRequestValue{
		Bool: v,
	}
}

// float32AsDaVinciVariableCreateRequestValue is a convenience function that returns float32 wrapped in DaVinciVariableCreateRequestValue
func Float32AsDaVinciVariableCreateRequestValue(v *float32) DaVinciVariableCreateRequestValue {
	return DaVinciVariableCreateRequestValue{
		Float32: v,
	}
}

// map[string]interface{}AsDaVinciVariableCreateRequestValue is a convenience function that returns map[string]interface{} wrapped in DaVinciVariableCreateRequestValue
func MapmapOfStringAnyAsDaVinciVariableCreateRequestValue(v *map[string]interface{}) DaVinciVariableCreateRequestValue {
	return DaVinciVariableCreateRequestValue{
		MapmapOfStringAny: v,
	}
}

// stringAsDaVinciVariableCreateRequestValue is a convenience function that returns string wrapped in DaVinciVariableCreateRequestValue
func StringAsDaVinciVariableCreateRequestValue(v *string) DaVinciVariableCreateRequestValue {
	return DaVinciVariableCreateRequestValue{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DaVinciVariableCreateRequestValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = json.Unmarshal(data, &dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.MapmapOfStringAny = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DaVinciVariableCreateRequestValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DaVinciVariableCreateRequestValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DaVinciVariableCreateRequestValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DaVinciVariableCreateRequestValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DaVinciVariableCreateRequestValue) GetActualInstanceValue() interface{} {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Float32 != nil {
		return *obj.Float32
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDaVinciVariableCreateRequestValue struct {
	value *DaVinciVariableCreateRequestValue
	isSet bool
}

func (v NullableDaVinciVariableCreateRequestValue) Get() *DaVinciVariableCreateRequestValue {
	return v.value
}

func (v *NullableDaVinciVariableCreateRequestValue) Set(val *DaVinciVariableCreateRequestValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableCreateRequestValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableCreateRequestValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableCreateRequestValue(val *DaVinciVariableCreateRequestValue) *NullableDaVinciVariableCreateRequestValue {
	return &NullableDaVinciVariableCreateRequestValue{value: val, isSet: true}
}

func (v NullableDaVinciVariableCreateRequestValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableCreateRequestValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
