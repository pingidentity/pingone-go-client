// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationReplaceRequestOauthScopes the model 'DaVinciApplicationReplaceRequestOauthScopes'
type DaVinciApplicationReplaceRequestOauthScopes string

// List of DaVinciApplicationReplaceRequest_oauth_scopes
const (
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPES_FLOW_ANALYTICS DaVinciApplicationReplaceRequestOauthScopes = "flow_analytics"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPES_OFFLINE_ACCESS DaVinciApplicationReplaceRequestOauthScopes = "offline_access"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPES_OPENID         DaVinciApplicationReplaceRequestOauthScopes = "openid"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHSCOPES_PROFILE        DaVinciApplicationReplaceRequestOauthScopes = "profile"
)

// All allowed values of DaVinciApplicationReplaceRequestOauthScopes enum
var AllowedDaVinciApplicationReplaceRequestOauthScopesEnumValues = []DaVinciApplicationReplaceRequestOauthScopes{
	"flow_analytics",
	"offline_access",
	"openid",
	"profile",
}

func (v *DaVinciApplicationReplaceRequestOauthScopes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationReplaceRequestOauthScopes(value)
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOauthScopesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationReplaceRequestOauthScopes(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciApplicationReplaceRequestOauthScopesFromValue returns a pointer to a valid DaVinciApplicationReplaceRequestOauthScopes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationReplaceRequestOauthScopesFromValue(v string) (*DaVinciApplicationReplaceRequestOauthScopes, error) {
	ev := DaVinciApplicationReplaceRequestOauthScopes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationReplaceRequestOauthScopes: valid values are %v", v, AllowedDaVinciApplicationReplaceRequestOauthScopesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationReplaceRequestOauthScopes) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOauthScopesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinciApplicationReplaceRequest_oauth_scopes value
func (v DaVinciApplicationReplaceRequestOauthScopes) Ptr() *DaVinciApplicationReplaceRequestOauthScopes {
	return &v
}

type NullableDaVinciApplicationReplaceRequestOauthScopes struct {
	value *DaVinciApplicationReplaceRequestOauthScopes
	isSet bool
}

func (v NullableDaVinciApplicationReplaceRequestOauthScopes) Get() *DaVinciApplicationReplaceRequestOauthScopes {
	return v.value
}

func (v *NullableDaVinciApplicationReplaceRequestOauthScopes) Set(val *DaVinciApplicationReplaceRequestOauthScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationReplaceRequestOauthScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationReplaceRequestOauthScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationReplaceRequestOauthScopes(val *DaVinciApplicationReplaceRequestOauthScopes) *NullableDaVinciApplicationReplaceRequestOauthScopes {
	return &NullableDaVinciApplicationReplaceRequestOauthScopes{value: val, isSet: true}
}

func (v NullableDaVinciApplicationReplaceRequestOauthScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationReplaceRequestOauthScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
