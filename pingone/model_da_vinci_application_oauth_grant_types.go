// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationOauthGrantTypes the model 'DaVinciApplicationOauthGrantTypes'
type DaVinciApplicationOauthGrantTypes string

// List of DaVinciApplication_oauth_grantTypes
const (
	DAVINCIAPPLICATIONOAUTHGRANTTYPES_AUTHORIZATION_CODE DaVinciApplicationOauthGrantTypes = "authorizationCode"
	DAVINCIAPPLICATIONOAUTHGRANTTYPES_CLIENT_CREDENTIALS DaVinciApplicationOauthGrantTypes = "clientCredentials"
	DAVINCIAPPLICATIONOAUTHGRANTTYPES_IMPLICIT           DaVinciApplicationOauthGrantTypes = "implicit"
)

// All allowed values of DaVinciApplicationOauthGrantTypes enum
var AllowedDaVinciApplicationOauthGrantTypesEnumValues = []DaVinciApplicationOauthGrantTypes{
	"authorizationCode",
	"clientCredentials",
	"implicit",
}

func (v *DaVinciApplicationOauthGrantTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationOauthGrantTypes(value)
	for _, existing := range AllowedDaVinciApplicationOauthGrantTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationOauthGrantTypes(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciApplicationOauthGrantTypesFromValue returns a pointer to a valid DaVinciApplicationOauthGrantTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationOauthGrantTypesFromValue(v string) (*DaVinciApplicationOauthGrantTypes, error) {
	ev := DaVinciApplicationOauthGrantTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationOauthGrantTypes: valid values are %v", v, AllowedDaVinciApplicationOauthGrantTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationOauthGrantTypes) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationOauthGrantTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinciApplication_oauth_grantTypes value
func (v DaVinciApplicationOauthGrantTypes) Ptr() *DaVinciApplicationOauthGrantTypes {
	return &v
}

type NullableDaVinciApplicationOauthGrantTypes struct {
	value *DaVinciApplicationOauthGrantTypes
	isSet bool
}

func (v NullableDaVinciApplicationOauthGrantTypes) Get() *DaVinciApplicationOauthGrantTypes {
	return v.value
}

func (v *NullableDaVinciApplicationOauthGrantTypes) Set(val *DaVinciApplicationOauthGrantTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationOauthGrantTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationOauthGrantTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationOauthGrantTypes(val *DaVinciApplicationOauthGrantTypes) *NullableDaVinciApplicationOauthGrantTypes {
	return &NullableDaVinciApplicationOauthGrantTypes{value: val, isSet: true}
}

func (v NullableDaVinciApplicationOauthGrantTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationOauthGrantTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
