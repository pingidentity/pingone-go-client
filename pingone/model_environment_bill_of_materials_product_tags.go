/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentBillOfMaterialsProductTags the model 'EnvironmentBillOfMaterialsProductTags'
type EnvironmentBillOfMaterialsProductTags string

// List of Environment_Bill_of_Materials_Product_tags
const (
	ENVIRONMENTBILLOFMATERIALSPRODUCTTAGS_DAVINCI_MINIMAL EnvironmentBillOfMaterialsProductTags = "DAVINCI_MINIMAL"
)

// All allowed values of EnvironmentBillOfMaterialsProductTags enum
var AllowedEnvironmentBillOfMaterialsProductTagsEnumValues = []EnvironmentBillOfMaterialsProductTags{
	"DAVINCI_MINIMAL",
}

func (v *EnvironmentBillOfMaterialsProductTags) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentBillOfMaterialsProductTags(value)
	for _, existing := range AllowedEnvironmentBillOfMaterialsProductTagsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentBillOfMaterialsProductTags(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentBillOfMaterialsProductTagsFromValue returns a pointer to a valid EnvironmentBillOfMaterialsProductTags
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentBillOfMaterialsProductTagsFromValue(v string) (*EnvironmentBillOfMaterialsProductTags, error) {
	ev := EnvironmentBillOfMaterialsProductTags(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentBillOfMaterialsProductTags: valid values are %v", v, AllowedEnvironmentBillOfMaterialsProductTagsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentBillOfMaterialsProductTags) IsValid() bool {
	for _, existing := range AllowedEnvironmentBillOfMaterialsProductTagsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Bill_of_Materials_Product_tags value
func (v EnvironmentBillOfMaterialsProductTags) Ptr() *EnvironmentBillOfMaterialsProductTags {
	return &v
}

type NullableEnvironmentBillOfMaterialsProductTags struct {
	value *EnvironmentBillOfMaterialsProductTags
	isSet bool
}

func (v NullableEnvironmentBillOfMaterialsProductTags) Get() *EnvironmentBillOfMaterialsProductTags {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterialsProductTags) Set(val *EnvironmentBillOfMaterialsProductTags) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterialsProductTags) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterialsProductTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterialsProductTags(val *EnvironmentBillOfMaterialsProductTags) *NullableEnvironmentBillOfMaterialsProductTags {
	return &NullableEnvironmentBillOfMaterialsProductTags{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterialsProductTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterialsProductTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
