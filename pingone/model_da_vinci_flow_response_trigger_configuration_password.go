// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowResponseTriggerConfigurationPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowResponseTriggerConfigurationPassword{}

// checks if the DaVinciFlowResponseTriggerConfigurationPassword type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowResponseTriggerConfigurationPassword{}

// DaVinciFlowResponseTriggerConfigurationPassword struct for DaVinciFlowResponseTriggerConfigurationPassword
type DaVinciFlowResponseTriggerConfigurationPassword struct {
	Enabled              bool    `json:"enabled"`
	Time                 float32 `json:"time"`
	TimeFormat           string  `json:"timeFormat"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowResponseTriggerConfigurationPassword DaVinciFlowResponseTriggerConfigurationPassword

// NewDaVinciFlowResponseTriggerConfigurationPassword instantiates a new DaVinciFlowResponseTriggerConfigurationPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowResponseTriggerConfigurationPassword(enabled bool, time float32, timeFormat string) *DaVinciFlowResponseTriggerConfigurationPassword {
	this := DaVinciFlowResponseTriggerConfigurationPassword{}
	this.Enabled = enabled
	this.Time = time
	this.TimeFormat = timeFormat
	return &this
}

// NewDaVinciFlowResponseTriggerConfigurationPasswordWithDefaults instantiates a new DaVinciFlowResponseTriggerConfigurationPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowResponseTriggerConfigurationPasswordWithDefaults() *DaVinciFlowResponseTriggerConfigurationPassword {
	this := DaVinciFlowResponseTriggerConfigurationPassword{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DaVinciFlowResponseTriggerConfigurationPassword) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponseTriggerConfigurationPassword) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DaVinciFlowResponseTriggerConfigurationPassword) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTime returns the Time field value
func (o *DaVinciFlowResponseTriggerConfigurationPassword) GetTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponseTriggerConfigurationPassword) GetTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *DaVinciFlowResponseTriggerConfigurationPassword) SetTime(v float32) {
	o.Time = v
}

// GetTimeFormat returns the TimeFormat field value
func (o *DaVinciFlowResponseTriggerConfigurationPassword) GetTimeFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowResponseTriggerConfigurationPassword) GetTimeFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeFormat, true
}

// SetTimeFormat sets field value
func (o *DaVinciFlowResponseTriggerConfigurationPassword) SetTimeFormat(v string) {
	o.TimeFormat = v
}

func (o DaVinciFlowResponseTriggerConfigurationPassword) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowResponseTriggerConfigurationPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["time"] = o.Time
	toSerialize["timeFormat"] = o.TimeFormat

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowResponseTriggerConfigurationPassword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"time",
		"timeFormat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowResponseTriggerConfigurationPassword := _DaVinciFlowResponseTriggerConfigurationPassword{}

	err = json.Unmarshal(data, &varDaVinciFlowResponseTriggerConfigurationPassword)

	if err != nil {
		return err
	}

	*o = DaVinciFlowResponseTriggerConfigurationPassword(varDaVinciFlowResponseTriggerConfigurationPassword)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "time")
		delete(additionalProperties, "timeFormat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowResponseTriggerConfigurationPassword) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("enabled", o.Enabled))
	logAttrs = append(logAttrs, slog.Any("time", o.Time))
	logAttrs = append(logAttrs, slog.Any("timeFormat", o.TimeFormat))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowResponseTriggerConfigurationPassword struct {
	value *DaVinciFlowResponseTriggerConfigurationPassword
	isSet bool
}

func (v NullableDaVinciFlowResponseTriggerConfigurationPassword) Get() *DaVinciFlowResponseTriggerConfigurationPassword {
	return v.value
}

func (v *NullableDaVinciFlowResponseTriggerConfigurationPassword) Set(val *DaVinciFlowResponseTriggerConfigurationPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowResponseTriggerConfigurationPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowResponseTriggerConfigurationPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowResponseTriggerConfigurationPassword(val *DaVinciFlowResponseTriggerConfigurationPassword) *NullableDaVinciFlowResponseTriggerConfigurationPassword {
	return &NullableDaVinciFlowResponseTriggerConfigurationPassword{value: val, isSet: true}
}

func (v NullableDaVinciFlowResponseTriggerConfigurationPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowResponseTriggerConfigurationPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
