// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"

	"github.com/google/uuid"
)

// checks if the EnvironmentBillOfMaterialsProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentBillOfMaterialsProduct{}

// checks if the EnvironmentBillOfMaterialsProduct type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentBillOfMaterialsProduct{}

// EnvironmentBillOfMaterialsProduct struct for EnvironmentBillOfMaterialsProduct
type EnvironmentBillOfMaterialsProduct struct {
	Type                 EnvironmentBillOfMaterialsProductType       `json:"type"`
	Bookmarks            []EnvironmentBillOfMaterialsProductBookmark `json:"bookmarks,omitempty"`
	Console              *EnvironmentBillOfMaterialsProductConsole   `json:"console,omitempty"`
	Deployment           *ResourceRelationshipReadOnly               `json:"deployment,omitempty"`
	Description          *string                                     `json:"description,omitempty"`
	Id                   *uuid.UUID                                  `json:"id,omitempty"`
	SoftwareLicense      *ResourceRelationshipGeneric                `json:"softwareLicense,omitempty"`
	Tags                 []string                                    `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentBillOfMaterialsProduct EnvironmentBillOfMaterialsProduct

// NewEnvironmentBillOfMaterialsProduct instantiates a new EnvironmentBillOfMaterialsProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentBillOfMaterialsProduct(type_ EnvironmentBillOfMaterialsProductType) *EnvironmentBillOfMaterialsProduct {
	this := EnvironmentBillOfMaterialsProduct{}
	this.Type = type_
	return &this
}

// NewEnvironmentBillOfMaterialsProductWithDefaults instantiates a new EnvironmentBillOfMaterialsProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentBillOfMaterialsProductWithDefaults() *EnvironmentBillOfMaterialsProduct {
	this := EnvironmentBillOfMaterialsProduct{}
	return &this
}

// GetType returns the Type field value
func (o *EnvironmentBillOfMaterialsProduct) GetType() EnvironmentBillOfMaterialsProductType {
	if o == nil {
		var ret EnvironmentBillOfMaterialsProductType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetTypeOk() (*EnvironmentBillOfMaterialsProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnvironmentBillOfMaterialsProduct) SetType(v EnvironmentBillOfMaterialsProductType) {
	o.Type = v
}

// GetBookmarks returns the Bookmarks field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetBookmarks() []EnvironmentBillOfMaterialsProductBookmark {
	if o == nil || IsNil(o.Bookmarks) {
		var ret []EnvironmentBillOfMaterialsProductBookmark
		return ret
	}
	return o.Bookmarks
}

// GetBookmarksOk returns a tuple with the Bookmarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetBookmarksOk() ([]EnvironmentBillOfMaterialsProductBookmark, bool) {
	if o == nil || IsNil(o.Bookmarks) {
		return nil, false
	}
	return o.Bookmarks, true
}

// HasBookmarks returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasBookmarks() bool {
	if o != nil && !IsNil(o.Bookmarks) {
		return true
	}

	return false
}

// SetBookmarks gets a reference to the given []EnvironmentBillOfMaterialsProductBookmark and assigns it to the Bookmarks field.
func (o *EnvironmentBillOfMaterialsProduct) SetBookmarks(v []EnvironmentBillOfMaterialsProductBookmark) {
	o.Bookmarks = v
}

// GetConsole returns the Console field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetConsole() EnvironmentBillOfMaterialsProductConsole {
	if o == nil || IsNil(o.Console) {
		var ret EnvironmentBillOfMaterialsProductConsole
		return ret
	}
	return *o.Console
}

// GetConsoleOk returns a tuple with the Console field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetConsoleOk() (*EnvironmentBillOfMaterialsProductConsole, bool) {
	if o == nil || IsNil(o.Console) {
		return nil, false
	}
	return o.Console, true
}

// HasConsole returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasConsole() bool {
	if o != nil && !IsNil(o.Console) {
		return true
	}

	return false
}

// SetConsole gets a reference to the given EnvironmentBillOfMaterialsProductConsole and assigns it to the Console field.
func (o *EnvironmentBillOfMaterialsProduct) SetConsole(v EnvironmentBillOfMaterialsProductConsole) {
	o.Console = &v
}

// GetDeployment returns the Deployment field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetDeployment() ResourceRelationshipReadOnly {
	if o == nil || IsNil(o.Deployment) {
		var ret ResourceRelationshipReadOnly
		return ret
	}
	return *o.Deployment
}

// GetDeploymentOk returns a tuple with the Deployment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetDeploymentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil || IsNil(o.Deployment) {
		return nil, false
	}
	return o.Deployment, true
}

// HasDeployment returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasDeployment() bool {
	if o != nil && !IsNil(o.Deployment) {
		return true
	}

	return false
}

// SetDeployment gets a reference to the given ResourceRelationshipReadOnly and assigns it to the Deployment field.
func (o *EnvironmentBillOfMaterialsProduct) SetDeployment(v ResourceRelationshipReadOnly) {
	o.Deployment = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentBillOfMaterialsProduct) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetId() uuid.UUID {
	if o == nil || IsNil(o.Id) {
		var ret uuid.UUID
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetIdOk() (*uuid.UUID, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given uuid.UUID and assigns it to the Id field.
func (o *EnvironmentBillOfMaterialsProduct) SetId(v uuid.UUID) {
	o.Id = &v
}

// GetSoftwareLicense returns the SoftwareLicense field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetSoftwareLicense() ResourceRelationshipGeneric {
	if o == nil || IsNil(o.SoftwareLicense) {
		var ret ResourceRelationshipGeneric
		return ret
	}
	return *o.SoftwareLicense
}

// GetSoftwareLicenseOk returns a tuple with the SoftwareLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetSoftwareLicenseOk() (*ResourceRelationshipGeneric, bool) {
	if o == nil || IsNil(o.SoftwareLicense) {
		return nil, false
	}
	return o.SoftwareLicense, true
}

// HasSoftwareLicense returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasSoftwareLicense() bool {
	if o != nil && !IsNil(o.SoftwareLicense) {
		return true
	}

	return false
}

// SetSoftwareLicense gets a reference to the given ResourceRelationshipGeneric and assigns it to the SoftwareLicense field.
func (o *EnvironmentBillOfMaterialsProduct) SetSoftwareLicense(v ResourceRelationshipGeneric) {
	o.SoftwareLicense = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EnvironmentBillOfMaterialsProduct) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentBillOfMaterialsProduct) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EnvironmentBillOfMaterialsProduct) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EnvironmentBillOfMaterialsProduct) SetTags(v []string) {
	o.Tags = v
}

func (o EnvironmentBillOfMaterialsProduct) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentBillOfMaterialsProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Bookmarks) {
		toSerialize["bookmarks"] = o.Bookmarks
	}
	if !IsNil(o.Console) {
		toSerialize["console"] = o.Console
	}
	if !IsNil(o.Deployment) {
		toSerialize["deployment"] = o.Deployment
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SoftwareLicense) {
		toSerialize["softwareLicense"] = o.SoftwareLicense
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentBillOfMaterialsProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentBillOfMaterialsProduct := _EnvironmentBillOfMaterialsProduct{}

	err = json.Unmarshal(data, &varEnvironmentBillOfMaterialsProduct)

	if err != nil {
		return err
	}

	*o = EnvironmentBillOfMaterialsProduct(varEnvironmentBillOfMaterialsProduct)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "bookmarks")
		delete(additionalProperties, "console")
		delete(additionalProperties, "deployment")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "softwareLicense")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentBillOfMaterialsProduct) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	if !IsNil(o.Bookmarks) {
		logAttrs = append(logAttrs, slog.Any("bookmarks", o.Bookmarks))
	}
	if !IsNil(o.Console) {
		logAttrs = append(logAttrs, slog.Any("console", *o.Console))
	}
	if !IsNil(o.Deployment) {
		logAttrs = append(logAttrs, slog.Any("deployment", *o.Deployment))
	}
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.Id) {
		logAttrs = append(logAttrs, slog.Any("id", *o.Id))
	}
	if !IsNil(o.SoftwareLicense) {
		logAttrs = append(logAttrs, slog.Any("softwareLicense", *o.SoftwareLicense))
	}
	if !IsNil(o.Tags) {
		logAttrs = append(logAttrs, slog.Any("tags", o.Tags))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentBillOfMaterialsProduct struct {
	value *EnvironmentBillOfMaterialsProduct
	isSet bool
}

func (v NullableEnvironmentBillOfMaterialsProduct) Get() *EnvironmentBillOfMaterialsProduct {
	return v.value
}

func (v *NullableEnvironmentBillOfMaterialsProduct) Set(val *EnvironmentBillOfMaterialsProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentBillOfMaterialsProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentBillOfMaterialsProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentBillOfMaterialsProduct(val *EnvironmentBillOfMaterialsProduct) *NullableEnvironmentBillOfMaterialsProduct {
	return &NullableEnvironmentBillOfMaterialsProduct{value: val, isSet: true}
}

func (v NullableEnvironmentBillOfMaterialsProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentBillOfMaterialsProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
