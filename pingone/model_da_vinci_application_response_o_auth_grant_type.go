// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationResponseOAuthGrantType the model 'DaVinciApplicationResponseOAuthGrantType'
type DaVinciApplicationResponseOAuthGrantType string

// List of DaVinci_Application_Response_OAuth_Grant_Type
const (
	DAVINCIAPPLICATIONRESPONSEOAUTHGRANTTYPE_AUTHORIZATION_CODE DaVinciApplicationResponseOAuthGrantType = "authorizationCode"
	DAVINCIAPPLICATIONRESPONSEOAUTHGRANTTYPE_CLIENT_CREDENTIALS DaVinciApplicationResponseOAuthGrantType = "clientCredentials"
	DAVINCIAPPLICATIONRESPONSEOAUTHGRANTTYPE_IMPLICIT           DaVinciApplicationResponseOAuthGrantType = "implicit"
)

// All allowed values of DaVinciApplicationResponseOAuthGrantType enum
var AllowedDaVinciApplicationResponseOAuthGrantTypeEnumValues = []DaVinciApplicationResponseOAuthGrantType{
	"authorizationCode",
	"clientCredentials",
	"implicit",
}

func (v *DaVinciApplicationResponseOAuthGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationResponseOAuthGrantType(value)
	for _, existing := range AllowedDaVinciApplicationResponseOAuthGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationResponseOAuthGrantType(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciApplicationResponseOAuthGrantTypeFromValue returns a pointer to a valid DaVinciApplicationResponseOAuthGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationResponseOAuthGrantTypeFromValue(v string) (*DaVinciApplicationResponseOAuthGrantType, error) {
	ev := DaVinciApplicationResponseOAuthGrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationResponseOAuthGrantType: valid values are %v", v, AllowedDaVinciApplicationResponseOAuthGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationResponseOAuthGrantType) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationResponseOAuthGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Application_Response_OAuth_Grant_Type value
func (v DaVinciApplicationResponseOAuthGrantType) Ptr() *DaVinciApplicationResponseOAuthGrantType {
	return &v
}

type NullableDaVinciApplicationResponseOAuthGrantType struct {
	value *DaVinciApplicationResponseOAuthGrantType
	isSet bool
}

func (v NullableDaVinciApplicationResponseOAuthGrantType) Get() *DaVinciApplicationResponseOAuthGrantType {
	return v.value
}

func (v *NullableDaVinciApplicationResponseOAuthGrantType) Set(val *DaVinciApplicationResponseOAuthGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationResponseOAuthGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationResponseOAuthGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationResponseOAuthGrantType(val *DaVinciApplicationResponseOAuthGrantType) *NullableDaVinciApplicationResponseOAuthGrantType {
	return &NullableDaVinciApplicationResponseOAuthGrantType{value: val, isSet: true}
}

func (v NullableDaVinciApplicationResponseOAuthGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationResponseOAuthGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
