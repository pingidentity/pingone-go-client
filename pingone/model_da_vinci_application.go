// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DaVinciApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciApplication{}

// checks if the DaVinciApplication type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciApplication{}

// DaVinciApplication struct for DaVinciApplication
type DaVinciApplication struct {
	Links                DaVinciApplicationLinks     `json:"_links"`
	ApiKey               DaVinciApplicationApiKey    `json:"apiKey"`
	CreatedAt            *time.Time                  `json:"createdAt,omitempty"`
	Environment          ResourceRelationshipPingOne `json:"environment"`
	Id                   string                      `json:"id"`
	Name                 string                      `json:"name"`
	Oauth                DaVinciApplicationOauth     `json:"oauth"`
	UpdatedAt            *time.Time                  `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciApplication DaVinciApplication

// NewDaVinciApplication instantiates a new DaVinciApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciApplication(links DaVinciApplicationLinks, apiKey DaVinciApplicationApiKey, environment ResourceRelationshipPingOne, id string, name string, oauth DaVinciApplicationOauth) *DaVinciApplication {
	this := DaVinciApplication{}
	this.Links = links
	this.ApiKey = apiKey
	this.Environment = environment
	this.Id = id
	this.Name = name
	this.Oauth = oauth
	return &this
}

// NewDaVinciApplicationWithDefaults instantiates a new DaVinciApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciApplicationWithDefaults() *DaVinciApplication {
	this := DaVinciApplication{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciApplication) GetLinks() DaVinciApplicationLinks {
	if o == nil {
		var ret DaVinciApplicationLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetLinksOk() (*DaVinciApplicationLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciApplication) SetLinks(v DaVinciApplicationLinks) {
	o.Links = v
}

// GetApiKey returns the ApiKey field value
func (o *DaVinciApplication) GetApiKey() DaVinciApplicationApiKey {
	if o == nil {
		var ret DaVinciApplicationApiKey
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetApiKeyOk() (*DaVinciApplicationApiKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *DaVinciApplication) SetApiKey(v DaVinciApplicationApiKey) {
	o.ApiKey = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciApplication) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciApplication) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciApplication) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciApplication) GetEnvironment() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetEnvironmentOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciApplication) SetEnvironment(v ResourceRelationshipPingOne) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DaVinciApplication) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciApplication) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DaVinciApplication) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciApplication) SetName(v string) {
	o.Name = v
}

// GetOauth returns the Oauth field value
func (o *DaVinciApplication) GetOauth() DaVinciApplicationOauth {
	if o == nil {
		var ret DaVinciApplicationOauth
		return ret
	}

	return o.Oauth
}

// GetOauthOk returns a tuple with the Oauth field value
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetOauthOk() (*DaVinciApplicationOauth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oauth, true
}

// SetOauth sets field value
func (o *DaVinciApplication) SetOauth(v DaVinciApplicationOauth) {
	o.Oauth = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciApplication) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciApplication) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciApplication) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciApplication) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DaVinciApplication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["apiKey"] = o.ApiKey
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["oauth"] = o.Oauth
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciApplication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"apiKey",
		"environment",
		"id",
		"name",
		"oauth",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciApplication := _DaVinciApplication{}

	err = json.Unmarshal(data, &varDaVinciApplication)

	if err != nil {
		return err
	}

	*o = DaVinciApplication(varDaVinciApplication)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "apiKey")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "oauth")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciApplication) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("apiKey", o.ApiKey))
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("oauth", o.Oauth))
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciApplication struct {
	value *DaVinciApplication
	isSet bool
}

func (v NullableDaVinciApplication) Get() *DaVinciApplication {
	return v.value
}

func (v *NullableDaVinciApplication) Set(val *DaVinciApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplication(val *DaVinciApplication) *NullableDaVinciApplication {
	return &NullableDaVinciApplication{value: val, isSet: true}
}

func (v NullableDaVinciApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
