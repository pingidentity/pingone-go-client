// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DavinciConnectorMinimalResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorMinimalResponse{}

// checks if the DavinciConnectorMinimalResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorMinimalResponse{}

// DavinciConnectorMinimalResponse struct for DavinciConnectorMinimalResponse
type DavinciConnectorMinimalResponse struct {
	Links                DavinciConnectorCollectionMinimalResponseLinks `json:"_links"`
	CreatedAt            time.Time                                      `json:"createdAt"`
	Description          string                                         `json:"description"`
	Environment          ResourceRelationshipPingOne                    `json:"environment"`
	Id                   string                                         `json:"id"`
	Metadata             DavinciConnectorMinimalResponseMetadata        `json:"metadata"`
	Name                 string                                         `json:"name"`
	UpdatedAt            time.Time                                      `json:"updatedAt"`
	Version              string                                         `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorMinimalResponse DavinciConnectorMinimalResponse

// NewDavinciConnectorMinimalResponse instantiates a new DavinciConnectorMinimalResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorMinimalResponse(links DavinciConnectorCollectionMinimalResponseLinks, createdAt time.Time, description string, environment ResourceRelationshipPingOne, id string, metadata DavinciConnectorMinimalResponseMetadata, name string, updatedAt time.Time, version string) *DavinciConnectorMinimalResponse {
	this := DavinciConnectorMinimalResponse{}
	this.Links = links
	this.CreatedAt = createdAt
	this.Description = description
	this.Environment = environment
	this.Id = id
	this.Metadata = metadata
	this.Name = name
	this.UpdatedAt = updatedAt
	this.Version = version
	return &this
}

// NewDavinciConnectorMinimalResponseWithDefaults instantiates a new DavinciConnectorMinimalResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorMinimalResponseWithDefaults() *DavinciConnectorMinimalResponse {
	this := DavinciConnectorMinimalResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DavinciConnectorMinimalResponse) GetLinks() DavinciConnectorCollectionMinimalResponseLinks {
	if o == nil {
		var ret DavinciConnectorCollectionMinimalResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetLinksOk() (*DavinciConnectorCollectionMinimalResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DavinciConnectorMinimalResponse) SetLinks(v DavinciConnectorCollectionMinimalResponseLinks) {
	o.Links = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DavinciConnectorMinimalResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DavinciConnectorMinimalResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *DavinciConnectorMinimalResponse) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DavinciConnectorMinimalResponse) SetDescription(v string) {
	o.Description = v
}

// GetEnvironment returns the Environment field value
func (o *DavinciConnectorMinimalResponse) GetEnvironment() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetEnvironmentOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DavinciConnectorMinimalResponse) SetEnvironment(v ResourceRelationshipPingOne) {
	o.Environment = v
}

// GetId returns the Id field value
func (o *DavinciConnectorMinimalResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DavinciConnectorMinimalResponse) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value
func (o *DavinciConnectorMinimalResponse) GetMetadata() DavinciConnectorMinimalResponseMetadata {
	if o == nil {
		var ret DavinciConnectorMinimalResponseMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetMetadataOk() (*DavinciConnectorMinimalResponseMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *DavinciConnectorMinimalResponse) SetMetadata(v DavinciConnectorMinimalResponseMetadata) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *DavinciConnectorMinimalResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DavinciConnectorMinimalResponse) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DavinciConnectorMinimalResponse) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DavinciConnectorMinimalResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetVersion returns the Version field value
func (o *DavinciConnectorMinimalResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DavinciConnectorMinimalResponse) SetVersion(v string) {
	o.Version = v
}

func (o DavinciConnectorMinimalResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorMinimalResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["environment"] = o.Environment
	toSerialize["id"] = o.Id
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorMinimalResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"createdAt",
		"description",
		"environment",
		"id",
		"metadata",
		"name",
		"updatedAt",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDavinciConnectorMinimalResponse := _DavinciConnectorMinimalResponse{}

	err = json.Unmarshal(data, &varDavinciConnectorMinimalResponse)

	if err != nil {
		return err
	}

	*o = DavinciConnectorMinimalResponse(varDavinciConnectorMinimalResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "description")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "name")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorMinimalResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("createdAt", o.CreatedAt))
	logAttrs = append(logAttrs, slog.Any("description", o.Description))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("metadata", o.Metadata))
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("updatedAt", o.UpdatedAt))
	logAttrs = append(logAttrs, slog.Any("version", o.Version))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorMinimalResponse struct {
	value *DavinciConnectorMinimalResponse
	isSet bool
}

func (v NullableDavinciConnectorMinimalResponse) Get() *DavinciConnectorMinimalResponse {
	return v.value
}

func (v *NullableDavinciConnectorMinimalResponse) Set(val *DavinciConnectorMinimalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorMinimalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorMinimalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorMinimalResponse(val *DavinciConnectorMinimalResponse) *NullableDavinciConnectorMinimalResponse {
	return &NullableDavinciConnectorMinimalResponse{value: val, isSet: true}
}

func (v NullableDavinciConnectorMinimalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorMinimalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
