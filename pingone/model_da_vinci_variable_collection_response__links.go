// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciVariableCollectionResponseLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciVariableCollectionResponseLinks{}

// checks if the DaVinciVariableCollectionResponseLinks type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciVariableCollectionResponseLinks{}

// DaVinciVariableCollectionResponseLinks struct for DaVinciVariableCollectionResponseLinks
type DaVinciVariableCollectionResponseLinks struct {
	Environment          JSONHALLink  `json:"environment"`
	Self                 JSONHALLink  `json:"self"`
	Next                 *JSONHALLink `json:"next,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciVariableCollectionResponseLinks DaVinciVariableCollectionResponseLinks

// NewDaVinciVariableCollectionResponseLinks instantiates a new DaVinciVariableCollectionResponseLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciVariableCollectionResponseLinks(environment JSONHALLink, self JSONHALLink) *DaVinciVariableCollectionResponseLinks {
	this := DaVinciVariableCollectionResponseLinks{}
	this.Environment = environment
	this.Self = self
	return &this
}

// NewDaVinciVariableCollectionResponseLinksWithDefaults instantiates a new DaVinciVariableCollectionResponseLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciVariableCollectionResponseLinksWithDefaults() *DaVinciVariableCollectionResponseLinks {
	this := DaVinciVariableCollectionResponseLinks{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *DaVinciVariableCollectionResponseLinks) GetEnvironment() JSONHALLink {
	if o == nil {
		var ret JSONHALLink
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableCollectionResponseLinks) GetEnvironmentOk() (*JSONHALLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciVariableCollectionResponseLinks) SetEnvironment(v JSONHALLink) {
	o.Environment = v
}

// GetSelf returns the Self field value
func (o *DaVinciVariableCollectionResponseLinks) GetSelf() JSONHALLink {
	if o == nil {
		var ret JSONHALLink
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableCollectionResponseLinks) GetSelfOk() (*JSONHALLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *DaVinciVariableCollectionResponseLinks) SetSelf(v JSONHALLink) {
	o.Self = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *DaVinciVariableCollectionResponseLinks) GetNext() JSONHALLink {
	if o == nil || IsNil(o.Next) {
		var ret JSONHALLink
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariableCollectionResponseLinks) GetNextOk() (*JSONHALLink, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *DaVinciVariableCollectionResponseLinks) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given JSONHALLink and assigns it to the Next field.
func (o *DaVinciVariableCollectionResponseLinks) SetNext(v JSONHALLink) {
	o.Next = &v
}

func (o DaVinciVariableCollectionResponseLinks) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciVariableCollectionResponseLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment"] = o.Environment
	toSerialize["self"] = o.Self
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciVariableCollectionResponseLinks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
		"self",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciVariableCollectionResponseLinks := _DaVinciVariableCollectionResponseLinks{}

	err = json.Unmarshal(data, &varDaVinciVariableCollectionResponseLinks)

	if err != nil {
		return err
	}

	*o = DaVinciVariableCollectionResponseLinks(varDaVinciVariableCollectionResponseLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "self")
		delete(additionalProperties, "next")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciVariableCollectionResponseLinks) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("self", o.Self))
	if !IsNil(o.Next) {
		logAttrs = append(logAttrs, slog.Any("next", *o.Next))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciVariableCollectionResponseLinks struct {
	value *DaVinciVariableCollectionResponseLinks
	isSet bool
}

func (v NullableDaVinciVariableCollectionResponseLinks) Get() *DaVinciVariableCollectionResponseLinks {
	return v.value
}

func (v *NullableDaVinciVariableCollectionResponseLinks) Set(val *DaVinciVariableCollectionResponseLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableCollectionResponseLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableCollectionResponseLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableCollectionResponseLinks(val *DaVinciVariableCollectionResponseLinks) *NullableDaVinciVariableCollectionResponseLinks {
	return &NullableDaVinciVariableCollectionResponseLinks{value: val, isSet: true}
}

func (v NullableDaVinciVariableCollectionResponseLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableCollectionResponseLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
