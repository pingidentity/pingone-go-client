// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationReplaceRequestOAuthGrantType the model 'DaVinciApplicationReplaceRequestOAuthGrantType'
type DaVinciApplicationReplaceRequestOAuthGrantType string

// List of DaVinci_Application_Replace_Request_OAuth_Grant_Type
const (
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHGRANTTYPE_AUTHORIZATION_CODE DaVinciApplicationReplaceRequestOAuthGrantType = "authorizationCode"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHGRANTTYPE_CLIENT_CREDENTIALS DaVinciApplicationReplaceRequestOAuthGrantType = "clientCredentials"
	DAVINCIAPPLICATIONREPLACEREQUESTOAUTHGRANTTYPE_IMPLICIT           DaVinciApplicationReplaceRequestOAuthGrantType = "implicit"
)

// All allowed values of DaVinciApplicationReplaceRequestOAuthGrantType enum
var AllowedDaVinciApplicationReplaceRequestOAuthGrantTypeEnumValues = []DaVinciApplicationReplaceRequestOAuthGrantType{
	"authorizationCode",
	"clientCredentials",
	"implicit",
}

func (v *DaVinciApplicationReplaceRequestOAuthGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationReplaceRequestOAuthGrantType(value)
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOAuthGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationReplaceRequestOAuthGrantType(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciApplicationReplaceRequestOAuthGrantTypeFromValue returns a pointer to a valid DaVinciApplicationReplaceRequestOAuthGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationReplaceRequestOAuthGrantTypeFromValue(v string) (*DaVinciApplicationReplaceRequestOAuthGrantType, error) {
	ev := DaVinciApplicationReplaceRequestOAuthGrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationReplaceRequestOAuthGrantType: valid values are %v", v, AllowedDaVinciApplicationReplaceRequestOAuthGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationReplaceRequestOAuthGrantType) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationReplaceRequestOAuthGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Application_Replace_Request_OAuth_Grant_Type value
func (v DaVinciApplicationReplaceRequestOAuthGrantType) Ptr() *DaVinciApplicationReplaceRequestOAuthGrantType {
	return &v
}

type NullableDaVinciApplicationReplaceRequestOAuthGrantType struct {
	value *DaVinciApplicationReplaceRequestOAuthGrantType
	isSet bool
}

func (v NullableDaVinciApplicationReplaceRequestOAuthGrantType) Get() *DaVinciApplicationReplaceRequestOAuthGrantType {
	return v.value
}

func (v *NullableDaVinciApplicationReplaceRequestOAuthGrantType) Set(val *DaVinciApplicationReplaceRequestOAuthGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationReplaceRequestOAuthGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationReplaceRequestOAuthGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationReplaceRequestOAuthGrantType(val *DaVinciApplicationReplaceRequestOAuthGrantType) *NullableDaVinciApplicationReplaceRequestOAuthGrantType {
	return &NullableDaVinciApplicationReplaceRequestOAuthGrantType{value: val, isSet: true}
}

func (v NullableDaVinciApplicationReplaceRequestOAuthGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationReplaceRequestOAuthGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
