// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowReplaceRequestTriggerConfigurationPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowReplaceRequestTriggerConfigurationPassword{}

// checks if the DaVinciFlowReplaceRequestTriggerConfigurationPassword type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowReplaceRequestTriggerConfigurationPassword{}

// DaVinciFlowReplaceRequestTriggerConfigurationPassword struct for DaVinciFlowReplaceRequestTriggerConfigurationPassword
type DaVinciFlowReplaceRequestTriggerConfigurationPassword struct {
	Enabled              *bool    `json:"enabled,omitempty"`
	Time                 *float32 `json:"time,omitempty"`
	TimeFormat           *string  `json:"timeFormat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowReplaceRequestTriggerConfigurationPassword DaVinciFlowReplaceRequestTriggerConfigurationPassword

// NewDaVinciFlowReplaceRequestTriggerConfigurationPassword instantiates a new DaVinciFlowReplaceRequestTriggerConfigurationPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowReplaceRequestTriggerConfigurationPassword() *DaVinciFlowReplaceRequestTriggerConfigurationPassword {
	this := DaVinciFlowReplaceRequestTriggerConfigurationPassword{}
	return &this
}

// NewDaVinciFlowReplaceRequestTriggerConfigurationPasswordWithDefaults instantiates a new DaVinciFlowReplaceRequestTriggerConfigurationPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowReplaceRequestTriggerConfigurationPasswordWithDefaults() *DaVinciFlowReplaceRequestTriggerConfigurationPassword {
	this := DaVinciFlowReplaceRequestTriggerConfigurationPassword{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) GetTime() float32 {
	if o == nil || IsNil(o.Time) {
		var ret float32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) GetTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given float32 and assigns it to the Time field.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) SetTime(v float32) {
	o.Time = &v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) GetTimeFormat() string {
	if o == nil || IsNil(o.TimeFormat) {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) GetTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) HasTimeFormat() bool {
	if o != nil && !IsNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

func (o DaVinciFlowReplaceRequestTriggerConfigurationPassword) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowReplaceRequestTriggerConfigurationPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.TimeFormat) {
		toSerialize["timeFormat"] = o.TimeFormat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowReplaceRequestTriggerConfigurationPassword) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowReplaceRequestTriggerConfigurationPassword := _DaVinciFlowReplaceRequestTriggerConfigurationPassword{}

	err = json.Unmarshal(data, &varDaVinciFlowReplaceRequestTriggerConfigurationPassword)

	if err != nil {
		return err
	}

	*o = DaVinciFlowReplaceRequestTriggerConfigurationPassword(varDaVinciFlowReplaceRequestTriggerConfigurationPassword)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "time")
		delete(additionalProperties, "timeFormat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowReplaceRequestTriggerConfigurationPassword) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Enabled) {
		logAttrs = append(logAttrs, slog.Any("enabled", *o.Enabled))
	}
	if !IsNil(o.Time) {
		logAttrs = append(logAttrs, slog.Any("time", *o.Time))
	}
	if !IsNil(o.TimeFormat) {
		logAttrs = append(logAttrs, slog.Any("timeFormat", *o.TimeFormat))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword struct {
	value *DaVinciFlowReplaceRequestTriggerConfigurationPassword
	isSet bool
}

func (v NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword) Get() *DaVinciFlowReplaceRequestTriggerConfigurationPassword {
	return v.value
}

func (v *NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword) Set(val *DaVinciFlowReplaceRequestTriggerConfigurationPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowReplaceRequestTriggerConfigurationPassword(val *DaVinciFlowReplaceRequestTriggerConfigurationPassword) *NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword {
	return &NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword{value: val, isSet: true}
}

func (v NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowReplaceRequestTriggerConfigurationPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
