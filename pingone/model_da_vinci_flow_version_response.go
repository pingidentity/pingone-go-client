// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DaVinciFlowVersionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowVersionResponse{}

// checks if the DaVinciFlowVersionResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowVersionResponse{}

// DaVinciFlowVersionResponse struct for DaVinciFlowVersionResponse
type DaVinciFlowVersionResponse struct {
	Links                DaVinciFlowVersionResponseLinks       `json:"_links"`
	Environment          DaVinciFlowVersionResponseEnvironment `json:"environment"`
	Flow                 DaVinciFlowVersionResponseFlow        `json:"flow"`
	Version              float32                               `json:"version"`
	Alias                *string                               `json:"alias,omitempty"`
	ClonedFrom           *float32                              `json:"clonedFrom,omitempty"`
	CreatedAt            *time.Time                            `json:"createdAt,omitempty"`
	DeployedAt           *time.Time                            `json:"deployedAt,omitempty"`
	UpdatedAt            *time.Time                            `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowVersionResponse DaVinciFlowVersionResponse

// NewDaVinciFlowVersionResponse instantiates a new DaVinciFlowVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowVersionResponse(links DaVinciFlowVersionResponseLinks, environment DaVinciFlowVersionResponseEnvironment, flow DaVinciFlowVersionResponseFlow, version float32) *DaVinciFlowVersionResponse {
	this := DaVinciFlowVersionResponse{}
	this.Links = links
	this.Environment = environment
	this.Flow = flow
	this.Version = version
	return &this
}

// NewDaVinciFlowVersionResponseWithDefaults instantiates a new DaVinciFlowVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowVersionResponseWithDefaults() *DaVinciFlowVersionResponse {
	this := DaVinciFlowVersionResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciFlowVersionResponse) GetLinks() DaVinciFlowVersionResponseLinks {
	if o == nil {
		var ret DaVinciFlowVersionResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetLinksOk() (*DaVinciFlowVersionResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciFlowVersionResponse) SetLinks(v DaVinciFlowVersionResponseLinks) {
	o.Links = v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciFlowVersionResponse) GetEnvironment() DaVinciFlowVersionResponseEnvironment {
	if o == nil {
		var ret DaVinciFlowVersionResponseEnvironment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetEnvironmentOk() (*DaVinciFlowVersionResponseEnvironment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciFlowVersionResponse) SetEnvironment(v DaVinciFlowVersionResponseEnvironment) {
	o.Environment = v
}

// GetFlow returns the Flow field value
func (o *DaVinciFlowVersionResponse) GetFlow() DaVinciFlowVersionResponseFlow {
	if o == nil {
		var ret DaVinciFlowVersionResponseFlow
		return ret
	}

	return o.Flow
}

// GetFlowOk returns a tuple with the Flow field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetFlowOk() (*DaVinciFlowVersionResponseFlow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flow, true
}

// SetFlow sets field value
func (o *DaVinciFlowVersionResponse) SetFlow(v DaVinciFlowVersionResponseFlow) {
	o.Flow = v
}

// GetVersion returns the Version field value
func (o *DaVinciFlowVersionResponse) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DaVinciFlowVersionResponse) SetVersion(v float32) {
	o.Version = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *DaVinciFlowVersionResponse) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *DaVinciFlowVersionResponse) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *DaVinciFlowVersionResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetClonedFrom returns the ClonedFrom field value if set, zero value otherwise.
func (o *DaVinciFlowVersionResponse) GetClonedFrom() float32 {
	if o == nil || IsNil(o.ClonedFrom) {
		var ret float32
		return ret
	}
	return *o.ClonedFrom
}

// GetClonedFromOk returns a tuple with the ClonedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetClonedFromOk() (*float32, bool) {
	if o == nil || IsNil(o.ClonedFrom) {
		return nil, false
	}
	return o.ClonedFrom, true
}

// HasClonedFrom returns a boolean if a field has been set.
func (o *DaVinciFlowVersionResponse) HasClonedFrom() bool {
	if o != nil && !IsNil(o.ClonedFrom) {
		return true
	}

	return false
}

// SetClonedFrom gets a reference to the given float32 and assigns it to the ClonedFrom field.
func (o *DaVinciFlowVersionResponse) SetClonedFrom(v float32) {
	o.ClonedFrom = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciFlowVersionResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciFlowVersionResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciFlowVersionResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeployedAt returns the DeployedAt field value if set, zero value otherwise.
func (o *DaVinciFlowVersionResponse) GetDeployedAt() time.Time {
	if o == nil || IsNil(o.DeployedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeployedAt
}

// GetDeployedAtOk returns a tuple with the DeployedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetDeployedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeployedAt) {
		return nil, false
	}
	return o.DeployedAt, true
}

// HasDeployedAt returns a boolean if a field has been set.
func (o *DaVinciFlowVersionResponse) HasDeployedAt() bool {
	if o != nil && !IsNil(o.DeployedAt) {
		return true
	}

	return false
}

// SetDeployedAt gets a reference to the given time.Time and assigns it to the DeployedAt field.
func (o *DaVinciFlowVersionResponse) SetDeployedAt(v time.Time) {
	o.DeployedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciFlowVersionResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowVersionResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciFlowVersionResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciFlowVersionResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DaVinciFlowVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowVersionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["environment"] = o.Environment
	toSerialize["flow"] = o.Flow
	toSerialize["version"] = o.Version
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.ClonedFrom) {
		toSerialize["clonedFrom"] = o.ClonedFrom
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DeployedAt) {
		toSerialize["deployedAt"] = o.DeployedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowVersionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"environment",
		"flow",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowVersionResponse := _DaVinciFlowVersionResponse{}

	err = json.Unmarshal(data, &varDaVinciFlowVersionResponse)

	if err != nil {
		return err
	}

	*o = DaVinciFlowVersionResponse(varDaVinciFlowVersionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "version")
		delete(additionalProperties, "alias")
		delete(additionalProperties, "clonedFrom")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "deployedAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowVersionResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("flow", o.Flow))
	logAttrs = append(logAttrs, slog.Any("version", o.Version))
	if !IsNil(o.Alias) {
		logAttrs = append(logAttrs, slog.Any("alias", *o.Alias))
	}
	if !IsNil(o.ClonedFrom) {
		logAttrs = append(logAttrs, slog.Any("clonedFrom", *o.ClonedFrom))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.DeployedAt) {
		logAttrs = append(logAttrs, slog.Any("deployedAt", *o.DeployedAt))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowVersionResponse struct {
	value *DaVinciFlowVersionResponse
	isSet bool
}

func (v NullableDaVinciFlowVersionResponse) Get() *DaVinciFlowVersionResponse {
	return v.value
}

func (v *NullableDaVinciFlowVersionResponse) Set(val *DaVinciFlowVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowVersionResponse(val *DaVinciFlowVersionResponse) *NullableDaVinciFlowVersionResponse {
	return &NullableDaVinciFlowVersionResponse{value: val, isSet: true}
}

func (v NullableDaVinciFlowVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
