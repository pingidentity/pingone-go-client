// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciConnectorMinimalResponseMetadataType the model 'DaVinciConnectorMinimalResponseMetadataType'
type DaVinciConnectorMinimalResponseMetadataType string

// List of DaVinciConnectorMinimalResponse_metadata_type
const (
	DAVINCICONNECTORMINIMALRESPONSEMETADATATYPE_CORE    DaVinciConnectorMinimalResponseMetadataType = "core"
	DAVINCICONNECTORMINIMALRESPONSEMETADATATYPE_PING    DaVinciConnectorMinimalResponseMetadataType = "ping"
	DAVINCICONNECTORMINIMALRESPONSEMETADATATYPE_SERVICE DaVinciConnectorMinimalResponseMetadataType = "service"
)

// All allowed values of DaVinciConnectorMinimalResponseMetadataType enum
var AllowedDaVinciConnectorMinimalResponseMetadataTypeEnumValues = []DaVinciConnectorMinimalResponseMetadataType{
	"core",
	"ping",
	"service",
}

func (v *DaVinciConnectorMinimalResponseMetadataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciConnectorMinimalResponseMetadataType(value)
	for _, existing := range AllowedDaVinciConnectorMinimalResponseMetadataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciConnectorMinimalResponseMetadataType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciConnectorMinimalResponseMetadataTypeFromValue returns a pointer to a valid DaVinciConnectorMinimalResponseMetadataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciConnectorMinimalResponseMetadataTypeFromValue(v string) (*DaVinciConnectorMinimalResponseMetadataType, error) {
	ev := DaVinciConnectorMinimalResponseMetadataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciConnectorMinimalResponseMetadataType: valid values are %v", v, AllowedDaVinciConnectorMinimalResponseMetadataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciConnectorMinimalResponseMetadataType) IsValid() bool {
	for _, existing := range AllowedDaVinciConnectorMinimalResponseMetadataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinciConnectorMinimalResponse_metadata_type value
func (v DaVinciConnectorMinimalResponseMetadataType) Ptr() *DaVinciConnectorMinimalResponseMetadataType {
	return &v
}

type NullableDaVinciConnectorMinimalResponseMetadataType struct {
	value *DaVinciConnectorMinimalResponseMetadataType
	isSet bool
}

func (v NullableDaVinciConnectorMinimalResponseMetadataType) Get() *DaVinciConnectorMinimalResponseMetadataType {
	return v.value
}

func (v *NullableDaVinciConnectorMinimalResponseMetadataType) Set(val *DaVinciConnectorMinimalResponseMetadataType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorMinimalResponseMetadataType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorMinimalResponseMetadataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorMinimalResponseMetadataType(val *DaVinciConnectorMinimalResponseMetadataType) *NullableDaVinciConnectorMinimalResponseMetadataType {
	return &NullableDaVinciConnectorMinimalResponseMetadataType{value: val, isSet: true}
}

func (v NullableDaVinciConnectorMinimalResponseMetadataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorMinimalResponseMetadataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
