// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyReplaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyReplaceRequest{}

// checks if the DaVinciFlowPolicyReplaceRequest type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyReplaceRequest{}

// DaVinciFlowPolicyReplaceRequest struct for DaVinciFlowPolicyReplaceRequest
type DaVinciFlowPolicyReplaceRequest struct {
	Name                 string                                            `json:"name" validate:"regexp=^(?=\\\\S)[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\/.'_ -]*(?!.*((<)|(\\\\$\\\\{)))"`
	FlowDistributions    []DaVinciFlowPolicyReplaceRequestFlowDistribution `json:"flowDistributions,omitempty"`
	Status               *DaVinciFlowPolicyReplaceRequestStatus            `json:"status,omitempty"`
	Trigger              *DaVinciFlowPolicyReplaceRequestTrigger           `json:"trigger,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyReplaceRequest DaVinciFlowPolicyReplaceRequest

// NewDaVinciFlowPolicyReplaceRequest instantiates a new DaVinciFlowPolicyReplaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyReplaceRequest(name string) *DaVinciFlowPolicyReplaceRequest {
	this := DaVinciFlowPolicyReplaceRequest{}
	this.Name = name
	var status DaVinciFlowPolicyReplaceRequestStatus = DAVINCIFLOWPOLICYREPLACEREQUESTSTATUS_ENABLED
	this.Status = &status
	return &this
}

// NewDaVinciFlowPolicyReplaceRequestWithDefaults instantiates a new DaVinciFlowPolicyReplaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyReplaceRequestWithDefaults() *DaVinciFlowPolicyReplaceRequest {
	this := DaVinciFlowPolicyReplaceRequest{}
	var name string = "New Policy"
	this.Name = name
	var status DaVinciFlowPolicyReplaceRequestStatus = DAVINCIFLOWPOLICYREPLACEREQUESTSTATUS_ENABLED
	this.Status = &status
	return &this
}

// GetName returns the Name field value
func (o *DaVinciFlowPolicyReplaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciFlowPolicyReplaceRequest) SetName(v string) {
	o.Name = v
}

// GetFlowDistributions returns the FlowDistributions field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequest) GetFlowDistributions() []DaVinciFlowPolicyReplaceRequestFlowDistribution {
	if o == nil || IsNil(o.FlowDistributions) {
		var ret []DaVinciFlowPolicyReplaceRequestFlowDistribution
		return ret
	}
	return o.FlowDistributions
}

// GetFlowDistributionsOk returns a tuple with the FlowDistributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequest) GetFlowDistributionsOk() ([]DaVinciFlowPolicyReplaceRequestFlowDistribution, bool) {
	if o == nil || IsNil(o.FlowDistributions) {
		return nil, false
	}
	return o.FlowDistributions, true
}

// HasFlowDistributions returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequest) HasFlowDistributions() bool {
	if o != nil && !IsNil(o.FlowDistributions) {
		return true
	}

	return false
}

// SetFlowDistributions gets a reference to the given []DaVinciFlowPolicyReplaceRequestFlowDistribution and assigns it to the FlowDistributions field.
func (o *DaVinciFlowPolicyReplaceRequest) SetFlowDistributions(v []DaVinciFlowPolicyReplaceRequestFlowDistribution) {
	o.FlowDistributions = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequest) GetStatus() DaVinciFlowPolicyReplaceRequestStatus {
	if o == nil || IsNil(o.Status) {
		var ret DaVinciFlowPolicyReplaceRequestStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequest) GetStatusOk() (*DaVinciFlowPolicyReplaceRequestStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DaVinciFlowPolicyReplaceRequestStatus and assigns it to the Status field.
func (o *DaVinciFlowPolicyReplaceRequest) SetStatus(v DaVinciFlowPolicyReplaceRequestStatus) {
	o.Status = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyReplaceRequest) GetTrigger() DaVinciFlowPolicyReplaceRequestTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret DaVinciFlowPolicyReplaceRequestTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyReplaceRequest) GetTriggerOk() (*DaVinciFlowPolicyReplaceRequestTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyReplaceRequest) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given DaVinciFlowPolicyReplaceRequestTrigger and assigns it to the Trigger field.
func (o *DaVinciFlowPolicyReplaceRequest) SetTrigger(v DaVinciFlowPolicyReplaceRequestTrigger) {
	o.Trigger = &v
}

func (o DaVinciFlowPolicyReplaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyReplaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.FlowDistributions) {
		toSerialize["flowDistributions"] = o.FlowDistributions
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyReplaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyReplaceRequest := _DaVinciFlowPolicyReplaceRequest{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyReplaceRequest)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyReplaceRequest(varDaVinciFlowPolicyReplaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "flowDistributions")
		delete(additionalProperties, "status")
		delete(additionalProperties, "trigger")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyReplaceRequest) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.FlowDistributions) {
		logAttrs = append(logAttrs, slog.Any("flowDistributions", o.FlowDistributions))
	}
	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	if !IsNil(o.Trigger) {
		logAttrs = append(logAttrs, slog.Any("trigger", *o.Trigger))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyReplaceRequest struct {
	value *DaVinciFlowPolicyReplaceRequest
	isSet bool
}

func (v NullableDaVinciFlowPolicyReplaceRequest) Get() *DaVinciFlowPolicyReplaceRequest {
	return v.value
}

func (v *NullableDaVinciFlowPolicyReplaceRequest) Set(val *DaVinciFlowPolicyReplaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyReplaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyReplaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyReplaceRequest(val *DaVinciFlowPolicyReplaceRequest) *NullableDaVinciFlowPolicyReplaceRequest {
	return &NullableDaVinciFlowPolicyReplaceRequest{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyReplaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyReplaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
