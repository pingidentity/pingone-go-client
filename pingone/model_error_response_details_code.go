/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// ErrorResponseDetailsCode the model 'ErrorResponseDetailsCode'
type ErrorResponseDetailsCode string

// List of ErrorResponse_details_code
const (
	ERRORRESPONSEDETAILSCODE_ACCOUNT_NOT_USABLE         ErrorResponseDetailsCode = "ACCOUNT_NOT_USABLE"
	ERRORRESPONSEDETAILSCODE_ACCOUNT_SELECTION_REQUIRED ErrorResponseDetailsCode = "ACCOUNT_SELECTION_REQUIRED"
	ERRORRESPONSEDETAILSCODE_CONSENT_REQUIRED           ErrorResponseDetailsCode = "CONSENT_REQUIRED"
	ERRORRESPONSEDETAILSCODE_CONSTRAINT_VIOLATION       ErrorResponseDetailsCode = "CONSTRAINT_VIOLATION"
	ERRORRESPONSEDETAILSCODE_EMPTY_VALUE                ErrorResponseDetailsCode = "EMPTY_VALUE"
	ERRORRESPONSEDETAILSCODE_INSUFFICIENT_PERMISSIONS   ErrorResponseDetailsCode = "INSUFFICIENT_PERMISSIONS"
	ERRORRESPONSEDETAILSCODE_INTERACTION_REQUIRED       ErrorResponseDetailsCode = "INTERACTION_REQUIRED"
	ERRORRESPONSEDETAILSCODE_INVALID_FILTER             ErrorResponseDetailsCode = "INVALID_FILTER"
	ERRORRESPONSEDETAILSCODE_INVALID_OTP                ErrorResponseDetailsCode = "INVALID_OTP"
	ERRORRESPONSEDETAILSCODE_INVALID_PARAMETER          ErrorResponseDetailsCode = "INVALID_PARAMETER"
	ERRORRESPONSEDETAILSCODE_INVALID_TOKEN              ErrorResponseDetailsCode = "INVALID_TOKEN"
	ERRORRESPONSEDETAILSCODE_INVALID_VALUE              ErrorResponseDetailsCode = "INVALID_VALUE"
	ERRORRESPONSEDETAILSCODE_ITEM_LIMIT_EXCEEDED        ErrorResponseDetailsCode = "ITEM_LIMIT_EXCEEDED"
	ERRORRESPONSEDETAILSCODE_LICENSE_EXCEEDED           ErrorResponseDetailsCode = "LICENSE_EXCEEDED"
	ERRORRESPONSEDETAILSCODE_LIMIT_EXCEEDED             ErrorResponseDetailsCode = "LIMIT_EXCEEDED"
	ERRORRESPONSEDETAILSCODE_LOGIN_REQUIRED             ErrorResponseDetailsCode = "LOGIN_REQUIRED"
	ERRORRESPONSEDETAILSCODE_MFA_AUTH_METHODS_CONFLICT  ErrorResponseDetailsCode = "MFA_AUTH_METHODS_CONFLICT"
	ERRORRESPONSEDETAILSCODE_NO_PASSWORD                ErrorResponseDetailsCode = "NO_PASSWORD"
	ERRORRESPONSEDETAILSCODE_OUT_OF_RANGE               ErrorResponseDetailsCode = "OUT_OF_RANGE"
	ERRORRESPONSEDETAILSCODE_PASSWORD_LOCKED_OUT        ErrorResponseDetailsCode = "PASSWORD_LOCKED_OUT"
	ERRORRESPONSEDETAILSCODE_PASSWORD_TOO_YOUNG         ErrorResponseDetailsCode = "PASSWORD_TOO_YOUNG"
	ERRORRESPONSEDETAILSCODE_POLICY_DENIED              ErrorResponseDetailsCode = "POLICY_DENIED"
	ERRORRESPONSEDETAILSCODE_QUOTA_EXCEEDED             ErrorResponseDetailsCode = "QUOTA_EXCEEDED"
	ERRORRESPONSEDETAILSCODE_REQUIRED_VALUE             ErrorResponseDetailsCode = "REQUIRED_VALUE"
	ERRORRESPONSEDETAILSCODE_SIZE_LIMIT_EXCEEDED        ErrorResponseDetailsCode = "SIZE_LIMIT_EXCEEDED"
	ERRORRESPONSEDETAILSCODE_UNIQUENESS_VIOLATION       ErrorResponseDetailsCode = "UNIQUENESS_VIOLATION"
	ERRORRESPONSEDETAILSCODE_USER_DENIED                ErrorResponseDetailsCode = "USER_DENIED"
)

// All allowed values of ErrorResponseDetailsCode enum
var AllowedErrorResponseDetailsCodeEnumValues = []ErrorResponseDetailsCode{
	"ACCOUNT_NOT_USABLE",
	"ACCOUNT_SELECTION_REQUIRED",
	"CONSENT_REQUIRED",
	"CONSTRAINT_VIOLATION",
	"EMPTY_VALUE",
	"INSUFFICIENT_PERMISSIONS",
	"INTERACTION_REQUIRED",
	"INVALID_FILTER",
	"INVALID_OTP",
	"INVALID_PARAMETER",
	"INVALID_TOKEN",
	"INVALID_VALUE",
	"ITEM_LIMIT_EXCEEDED",
	"LICENSE_EXCEEDED",
	"LIMIT_EXCEEDED",
	"LOGIN_REQUIRED",
	"MFA_AUTH_METHODS_CONFLICT",
	"NO_PASSWORD",
	"OUT_OF_RANGE",
	"PASSWORD_LOCKED_OUT",
	"PASSWORD_TOO_YOUNG",
	"POLICY_DENIED",
	"QUOTA_EXCEEDED",
	"REQUIRED_VALUE",
	"SIZE_LIMIT_EXCEEDED",
	"UNIQUENESS_VIOLATION",
	"USER_DENIED",
}

func (v *ErrorResponseDetailsCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorResponseDetailsCode(value)
	for _, existing := range AllowedErrorResponseDetailsCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ErrorResponseDetailsCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewErrorResponseDetailsCodeFromValue returns a pointer to a valid ErrorResponseDetailsCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorResponseDetailsCodeFromValue(v string) (*ErrorResponseDetailsCode, error) {
	ev := ErrorResponseDetailsCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorResponseDetailsCode: valid values are %v", v, AllowedErrorResponseDetailsCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorResponseDetailsCode) IsValid() bool {
	for _, existing := range AllowedErrorResponseDetailsCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorResponse_details_code value
func (v ErrorResponseDetailsCode) Ptr() *ErrorResponseDetailsCode {
	return &v
}

type NullableErrorResponseDetailsCode struct {
	value *ErrorResponseDetailsCode
	isSet bool
}

func (v NullableErrorResponseDetailsCode) Get() *ErrorResponseDetailsCode {
	return v.value
}

func (v *NullableErrorResponseDetailsCode) Set(val *ErrorResponseDetailsCode) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseDetailsCode) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseDetailsCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseDetailsCode(val *ErrorResponseDetailsCode) *NullableErrorResponseDetailsCode {
	return &NullableErrorResponseDetailsCode{value: val, isSet: true}
}

func (v NullableErrorResponseDetailsCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseDetailsCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
