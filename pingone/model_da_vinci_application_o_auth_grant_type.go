// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationOAuthGrantType the model 'DaVinciApplicationOAuthGrantType'
type DaVinciApplicationOAuthGrantType string

// List of DaVinci_Application_OAuth_Grant_Type
const (
	DAVINCIAPPLICATIONOAUTHGRANTTYPE_AUTHORIZATION_CODE DaVinciApplicationOAuthGrantType = "authorizationCode"
	DAVINCIAPPLICATIONOAUTHGRANTTYPE_CLIENT_CREDENTIALS DaVinciApplicationOAuthGrantType = "clientCredentials"
	DAVINCIAPPLICATIONOAUTHGRANTTYPE_IMPLICIT           DaVinciApplicationOAuthGrantType = "implicit"
)

// All allowed values of DaVinciApplicationOAuthGrantType enum
var AllowedDaVinciApplicationOAuthGrantTypeEnumValues = []DaVinciApplicationOAuthGrantType{
	"authorizationCode",
	"clientCredentials",
	"implicit",
}

func (v *DaVinciApplicationOAuthGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationOAuthGrantType(value)
	for _, existing := range AllowedDaVinciApplicationOAuthGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationOAuthGrantType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciApplicationOAuthGrantTypeFromValue returns a pointer to a valid DaVinciApplicationOAuthGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationOAuthGrantTypeFromValue(v string) (*DaVinciApplicationOAuthGrantType, error) {
	ev := DaVinciApplicationOAuthGrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationOAuthGrantType: valid values are %v", v, AllowedDaVinciApplicationOAuthGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationOAuthGrantType) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationOAuthGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Application_OAuth_Grant_Type value
func (v DaVinciApplicationOAuthGrantType) Ptr() *DaVinciApplicationOAuthGrantType {
	return &v
}

type NullableDaVinciApplicationOAuthGrantType struct {
	value *DaVinciApplicationOAuthGrantType
	isSet bool
}

func (v NullableDaVinciApplicationOAuthGrantType) Get() *DaVinciApplicationOAuthGrantType {
	return v.value
}

func (v *NullableDaVinciApplicationOAuthGrantType) Set(val *DaVinciApplicationOAuthGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationOAuthGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationOAuthGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationOAuthGrantType(val *DaVinciApplicationOAuthGrantType) *NullableDaVinciApplicationOAuthGrantType {
	return &NullableDaVinciApplicationOAuthGrantType{value: val, isSet: true}
}

func (v NullableDaVinciApplicationOAuthGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationOAuthGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
