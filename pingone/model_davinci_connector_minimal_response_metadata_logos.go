// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DavinciConnectorMinimalResponseMetadataLogos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorMinimalResponseMetadataLogos{}

// checks if the DavinciConnectorMinimalResponseMetadataLogos type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorMinimalResponseMetadataLogos{}

// DavinciConnectorMinimalResponseMetadataLogos struct for DavinciConnectorMinimalResponseMetadataLogos
type DavinciConnectorMinimalResponseMetadataLogos struct {
	Canvas               *DavinciConnectorMinimalResponseMetadataLogosCanvas `json:"canvas,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorMinimalResponseMetadataLogos DavinciConnectorMinimalResponseMetadataLogos

// NewDavinciConnectorMinimalResponseMetadataLogos instantiates a new DavinciConnectorMinimalResponseMetadataLogos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorMinimalResponseMetadataLogos() *DavinciConnectorMinimalResponseMetadataLogos {
	this := DavinciConnectorMinimalResponseMetadataLogos{}
	return &this
}

// NewDavinciConnectorMinimalResponseMetadataLogosWithDefaults instantiates a new DavinciConnectorMinimalResponseMetadataLogos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorMinimalResponseMetadataLogosWithDefaults() *DavinciConnectorMinimalResponseMetadataLogos {
	this := DavinciConnectorMinimalResponseMetadataLogos{}
	return &this
}

// GetCanvas returns the Canvas field value if set, zero value otherwise.
func (o *DavinciConnectorMinimalResponseMetadataLogos) GetCanvas() DavinciConnectorMinimalResponseMetadataLogosCanvas {
	if o == nil || IsNil(o.Canvas) {
		var ret DavinciConnectorMinimalResponseMetadataLogosCanvas
		return ret
	}
	return *o.Canvas
}

// GetCanvasOk returns a tuple with the Canvas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorMinimalResponseMetadataLogos) GetCanvasOk() (*DavinciConnectorMinimalResponseMetadataLogosCanvas, bool) {
	if o == nil || IsNil(o.Canvas) {
		return nil, false
	}
	return o.Canvas, true
}

// HasCanvas returns a boolean if a field has been set.
func (o *DavinciConnectorMinimalResponseMetadataLogos) HasCanvas() bool {
	if o != nil && !IsNil(o.Canvas) {
		return true
	}

	return false
}

// SetCanvas gets a reference to the given DavinciConnectorMinimalResponseMetadataLogosCanvas and assigns it to the Canvas field.
func (o *DavinciConnectorMinimalResponseMetadataLogos) SetCanvas(v DavinciConnectorMinimalResponseMetadataLogosCanvas) {
	o.Canvas = &v
}

func (o DavinciConnectorMinimalResponseMetadataLogos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorMinimalResponseMetadataLogos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Canvas) {
		toSerialize["canvas"] = o.Canvas
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorMinimalResponseMetadataLogos) UnmarshalJSON(data []byte) (err error) {
	varDavinciConnectorMinimalResponseMetadataLogos := _DavinciConnectorMinimalResponseMetadataLogos{}

	err = json.Unmarshal(data, &varDavinciConnectorMinimalResponseMetadataLogos)

	if err != nil {
		return err
	}

	*o = DavinciConnectorMinimalResponseMetadataLogos(varDavinciConnectorMinimalResponseMetadataLogos)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "canvas")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorMinimalResponseMetadataLogos) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Canvas) {
		logAttrs = append(logAttrs, slog.Any("canvas", *o.Canvas))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorMinimalResponseMetadataLogos struct {
	value *DavinciConnectorMinimalResponseMetadataLogos
	isSet bool
}

func (v NullableDavinciConnectorMinimalResponseMetadataLogos) Get() *DavinciConnectorMinimalResponseMetadataLogos {
	return v.value
}

func (v *NullableDavinciConnectorMinimalResponseMetadataLogos) Set(val *DavinciConnectorMinimalResponseMetadataLogos) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorMinimalResponseMetadataLogos) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorMinimalResponseMetadataLogos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorMinimalResponseMetadataLogos(val *DavinciConnectorMinimalResponseMetadataLogos) *NullableDavinciConnectorMinimalResponseMetadataLogos {
	return &NullableDavinciConnectorMinimalResponseMetadataLogos{value: val, isSet: true}
}

func (v NullableDavinciConnectorMinimalResponseMetadataLogos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorMinimalResponseMetadataLogos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
