// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"math/big"
)

// checks if the DaVinciFlowGraphDataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataResponse{}

// checks if the DaVinciFlowGraphDataResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataResponse{}

// DaVinciFlowGraphDataResponse struct for DaVinciFlowGraphDataResponse
type DaVinciFlowGraphDataResponse struct {
	BoxSelectionEnabled  bool                                         `json:"boxSelectionEnabled"`
	Elements             DaVinciFlowGraphDataResponseElements         `json:"elements"`
	MaxZoom              big.Float                                    `json:"maxZoom"`
	MinZoom              big.Float                                    `json:"minZoom"`
	Pan                  DaVinciFlowGraphDataResponsePan              `json:"pan"`
	PanningEnabled       bool                                         `json:"panningEnabled"`
	Renderer             DaVinciFlowGraphDataResponseRenderer         `json:"renderer"`
	UserPanningEnabled   bool                                         `json:"userPanningEnabled"`
	UserZoomingEnabled   bool                                         `json:"userZoomingEnabled"`
	Zoom                 float32                                      `json:"zoom"`
	AllLinterErrors      []DaVinciFlowGraphDataResponseAllLinterError `json:"allLinterErrors,omitempty"`
	Data                 map[string]interface{}                       `json:"data,omitempty"`
	ZoomingEnabled       *bool                                        `json:"zoomingEnabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataResponse DaVinciFlowGraphDataResponse

// NewDaVinciFlowGraphDataResponse instantiates a new DaVinciFlowGraphDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataResponse(boxSelectionEnabled bool, elements DaVinciFlowGraphDataResponseElements, maxZoom big.Float, minZoom big.Float, pan DaVinciFlowGraphDataResponsePan, panningEnabled bool, renderer DaVinciFlowGraphDataResponseRenderer, userPanningEnabled bool, userZoomingEnabled bool, zoom float32) *DaVinciFlowGraphDataResponse {
	this := DaVinciFlowGraphDataResponse{}
	this.BoxSelectionEnabled = boxSelectionEnabled
	this.Elements = elements
	this.MaxZoom = maxZoom
	this.MinZoom = minZoom
	this.Pan = pan
	this.PanningEnabled = panningEnabled
	this.Renderer = renderer
	this.UserPanningEnabled = userPanningEnabled
	this.UserZoomingEnabled = userZoomingEnabled
	this.Zoom = zoom
	return &this
}

// NewDaVinciFlowGraphDataResponseWithDefaults instantiates a new DaVinciFlowGraphDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataResponseWithDefaults() *DaVinciFlowGraphDataResponse {
	this := DaVinciFlowGraphDataResponse{}
	return &this
}

// GetBoxSelectionEnabled returns the BoxSelectionEnabled field value
func (o *DaVinciFlowGraphDataResponse) GetBoxSelectionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BoxSelectionEnabled
}

// GetBoxSelectionEnabledOk returns a tuple with the BoxSelectionEnabled field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetBoxSelectionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BoxSelectionEnabled, true
}

// SetBoxSelectionEnabled sets field value
func (o *DaVinciFlowGraphDataResponse) SetBoxSelectionEnabled(v bool) {
	o.BoxSelectionEnabled = v
}

// GetElements returns the Elements field value
func (o *DaVinciFlowGraphDataResponse) GetElements() DaVinciFlowGraphDataResponseElements {
	if o == nil {
		var ret DaVinciFlowGraphDataResponseElements
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetElementsOk() (*DaVinciFlowGraphDataResponseElements, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Elements, true
}

// SetElements sets field value
func (o *DaVinciFlowGraphDataResponse) SetElements(v DaVinciFlowGraphDataResponseElements) {
	o.Elements = v
}

// GetMaxZoom returns the MaxZoom field value
func (o *DaVinciFlowGraphDataResponse) GetMaxZoom() big.Float {
	if o == nil {
		var ret big.Float
		return ret
	}

	return o.MaxZoom
}

// GetMaxZoomOk returns a tuple with the MaxZoom field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetMaxZoomOk() (*big.Float, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxZoom, true
}

// SetMaxZoom sets field value
func (o *DaVinciFlowGraphDataResponse) SetMaxZoom(v big.Float) {
	o.MaxZoom = v
}

// GetMinZoom returns the MinZoom field value
func (o *DaVinciFlowGraphDataResponse) GetMinZoom() big.Float {
	if o == nil {
		var ret big.Float
		return ret
	}

	return o.MinZoom
}

// GetMinZoomOk returns a tuple with the MinZoom field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetMinZoomOk() (*big.Float, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinZoom, true
}

// SetMinZoom sets field value
func (o *DaVinciFlowGraphDataResponse) SetMinZoom(v big.Float) {
	o.MinZoom = v
}

// GetPan returns the Pan field value
func (o *DaVinciFlowGraphDataResponse) GetPan() DaVinciFlowGraphDataResponsePan {
	if o == nil {
		var ret DaVinciFlowGraphDataResponsePan
		return ret
	}

	return o.Pan
}

// GetPanOk returns a tuple with the Pan field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetPanOk() (*DaVinciFlowGraphDataResponsePan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pan, true
}

// SetPan sets field value
func (o *DaVinciFlowGraphDataResponse) SetPan(v DaVinciFlowGraphDataResponsePan) {
	o.Pan = v
}

// GetPanningEnabled returns the PanningEnabled field value
func (o *DaVinciFlowGraphDataResponse) GetPanningEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PanningEnabled
}

// GetPanningEnabledOk returns a tuple with the PanningEnabled field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetPanningEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PanningEnabled, true
}

// SetPanningEnabled sets field value
func (o *DaVinciFlowGraphDataResponse) SetPanningEnabled(v bool) {
	o.PanningEnabled = v
}

// GetRenderer returns the Renderer field value
func (o *DaVinciFlowGraphDataResponse) GetRenderer() DaVinciFlowGraphDataResponseRenderer {
	if o == nil {
		var ret DaVinciFlowGraphDataResponseRenderer
		return ret
	}

	return o.Renderer
}

// GetRendererOk returns a tuple with the Renderer field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetRendererOk() (*DaVinciFlowGraphDataResponseRenderer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Renderer, true
}

// SetRenderer sets field value
func (o *DaVinciFlowGraphDataResponse) SetRenderer(v DaVinciFlowGraphDataResponseRenderer) {
	o.Renderer = v
}

// GetUserPanningEnabled returns the UserPanningEnabled field value
func (o *DaVinciFlowGraphDataResponse) GetUserPanningEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UserPanningEnabled
}

// GetUserPanningEnabledOk returns a tuple with the UserPanningEnabled field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetUserPanningEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserPanningEnabled, true
}

// SetUserPanningEnabled sets field value
func (o *DaVinciFlowGraphDataResponse) SetUserPanningEnabled(v bool) {
	o.UserPanningEnabled = v
}

// GetUserZoomingEnabled returns the UserZoomingEnabled field value
func (o *DaVinciFlowGraphDataResponse) GetUserZoomingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UserZoomingEnabled
}

// GetUserZoomingEnabledOk returns a tuple with the UserZoomingEnabled field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetUserZoomingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserZoomingEnabled, true
}

// SetUserZoomingEnabled sets field value
func (o *DaVinciFlowGraphDataResponse) SetUserZoomingEnabled(v bool) {
	o.UserZoomingEnabled = v
}

// GetZoom returns the Zoom field value
func (o *DaVinciFlowGraphDataResponse) GetZoom() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Zoom
}

// GetZoomOk returns a tuple with the Zoom field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetZoomOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zoom, true
}

// SetZoom sets field value
func (o *DaVinciFlowGraphDataResponse) SetZoom(v float32) {
	o.Zoom = v
}

// GetAllLinterErrors returns the AllLinterErrors field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponse) GetAllLinterErrors() []DaVinciFlowGraphDataResponseAllLinterError {
	if o == nil || IsNil(o.AllLinterErrors) {
		var ret []DaVinciFlowGraphDataResponseAllLinterError
		return ret
	}
	return o.AllLinterErrors
}

// GetAllLinterErrorsOk returns a tuple with the AllLinterErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetAllLinterErrorsOk() ([]DaVinciFlowGraphDataResponseAllLinterError, bool) {
	if o == nil || IsNil(o.AllLinterErrors) {
		return nil, false
	}
	return o.AllLinterErrors, true
}

// HasAllLinterErrors returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponse) HasAllLinterErrors() bool {
	if o != nil && !IsNil(o.AllLinterErrors) {
		return true
	}

	return false
}

// SetAllLinterErrors gets a reference to the given []DaVinciFlowGraphDataResponseAllLinterError and assigns it to the AllLinterErrors field.
func (o *DaVinciFlowGraphDataResponse) SetAllLinterErrors(v []DaVinciFlowGraphDataResponseAllLinterError) {
	o.AllLinterErrors = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponse) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *DaVinciFlowGraphDataResponse) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetZoomingEnabled returns the ZoomingEnabled field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponse) GetZoomingEnabled() bool {
	if o == nil || IsNil(o.ZoomingEnabled) {
		var ret bool
		return ret
	}
	return *o.ZoomingEnabled
}

// GetZoomingEnabledOk returns a tuple with the ZoomingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponse) GetZoomingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ZoomingEnabled) {
		return nil, false
	}
	return o.ZoomingEnabled, true
}

// HasZoomingEnabled returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponse) HasZoomingEnabled() bool {
	if o != nil && !IsNil(o.ZoomingEnabled) {
		return true
	}

	return false
}

// SetZoomingEnabled gets a reference to the given bool and assigns it to the ZoomingEnabled field.
func (o *DaVinciFlowGraphDataResponse) SetZoomingEnabled(v bool) {
	o.ZoomingEnabled = &v
}

func (o DaVinciFlowGraphDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["boxSelectionEnabled"] = o.BoxSelectionEnabled
	toSerialize["elements"] = o.Elements
	toSerialize["maxZoom"] = o.MaxZoom
	toSerialize["minZoom"] = o.MinZoom
	toSerialize["pan"] = o.Pan
	toSerialize["panningEnabled"] = o.PanningEnabled
	toSerialize["renderer"] = o.Renderer
	toSerialize["userPanningEnabled"] = o.UserPanningEnabled
	toSerialize["userZoomingEnabled"] = o.UserZoomingEnabled
	toSerialize["zoom"] = o.Zoom
	if !IsNil(o.AllLinterErrors) {
		toSerialize["allLinterErrors"] = o.AllLinterErrors
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.ZoomingEnabled) {
		toSerialize["zoomingEnabled"] = o.ZoomingEnabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"boxSelectionEnabled",
		"elements",
		"maxZoom",
		"minZoom",
		"pan",
		"panningEnabled",
		"renderer",
		"userPanningEnabled",
		"userZoomingEnabled",
		"zoom",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataResponse := _DaVinciFlowGraphDataResponse{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataResponse)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataResponse(varDaVinciFlowGraphDataResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "boxSelectionEnabled")
		delete(additionalProperties, "elements")
		delete(additionalProperties, "maxZoom")
		delete(additionalProperties, "minZoom")
		delete(additionalProperties, "pan")
		delete(additionalProperties, "panningEnabled")
		delete(additionalProperties, "renderer")
		delete(additionalProperties, "userPanningEnabled")
		delete(additionalProperties, "userZoomingEnabled")
		delete(additionalProperties, "zoom")
		delete(additionalProperties, "allLinterErrors")
		delete(additionalProperties, "data")
		delete(additionalProperties, "zoomingEnabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("boxSelectionEnabled", o.BoxSelectionEnabled))
	logAttrs = append(logAttrs, slog.Any("elements", o.Elements))
	logAttrs = append(logAttrs, slog.Any("maxZoom", o.MaxZoom))
	logAttrs = append(logAttrs, slog.Any("minZoom", o.MinZoom))
	logAttrs = append(logAttrs, slog.Any("pan", o.Pan))
	logAttrs = append(logAttrs, slog.Any("panningEnabled", o.PanningEnabled))
	logAttrs = append(logAttrs, slog.Any("renderer", o.Renderer))
	logAttrs = append(logAttrs, slog.Any("userPanningEnabled", o.UserPanningEnabled))
	logAttrs = append(logAttrs, slog.Any("userZoomingEnabled", o.UserZoomingEnabled))
	logAttrs = append(logAttrs, slog.Any("zoom", o.Zoom))
	if !IsNil(o.AllLinterErrors) {
		logAttrs = append(logAttrs, slog.Any("allLinterErrors", o.AllLinterErrors))
	}
	if !IsNil(o.Data) {
		logAttrs = append(logAttrs, slog.Any("data", o.Data))
	}
	if !IsNil(o.ZoomingEnabled) {
		logAttrs = append(logAttrs, slog.Any("zoomingEnabled", *o.ZoomingEnabled))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataResponse struct {
	value *DaVinciFlowGraphDataResponse
	isSet bool
}

func (v NullableDaVinciFlowGraphDataResponse) Get() *DaVinciFlowGraphDataResponse {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataResponse) Set(val *DaVinciFlowGraphDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataResponse(val *DaVinciFlowGraphDataResponse) *NullableDaVinciFlowGraphDataResponse {
	return &NullableDaVinciFlowGraphDataResponse{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
