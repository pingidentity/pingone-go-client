// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataResponseAllLinterError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataResponseAllLinterError{}

// checks if the DaVinciFlowGraphDataResponseAllLinterError type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataResponseAllLinterError{}

// DaVinciFlowGraphDataResponseAllLinterError struct for DaVinciFlowGraphDataResponseAllLinterError
type DaVinciFlowGraphDataResponseAllLinterError struct {
	Code                 string  `json:"code"`
	Message              string  `json:"message"`
	Type                 string  `json:"type"`
	Recommendation       string  `json:"recommendation"`
	FlowId               string  `json:"flowId"`
	NodeId               *string `json:"nodeId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataResponseAllLinterError DaVinciFlowGraphDataResponseAllLinterError

// NewDaVinciFlowGraphDataResponseAllLinterError instantiates a new DaVinciFlowGraphDataResponseAllLinterError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataResponseAllLinterError(code string, message string, type_ string, recommendation string, flowId string) *DaVinciFlowGraphDataResponseAllLinterError {
	this := DaVinciFlowGraphDataResponseAllLinterError{}
	this.Code = code
	this.Message = message
	this.Type = type_
	this.Recommendation = recommendation
	this.FlowId = flowId
	return &this
}

// NewDaVinciFlowGraphDataResponseAllLinterErrorWithDefaults instantiates a new DaVinciFlowGraphDataResponseAllLinterError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataResponseAllLinterErrorWithDefaults() *DaVinciFlowGraphDataResponseAllLinterError {
	this := DaVinciFlowGraphDataResponseAllLinterError{}
	return &this
}

// GetCode returns the Code field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) SetMessage(v string) {
	o.Message = v
}

// GetType returns the Type field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) SetType(v string) {
	o.Type = v
}

// GetRecommendation returns the Recommendation field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetRecommendation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recommendation
}

// GetRecommendationOk returns a tuple with the Recommendation field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetRecommendationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recommendation, true
}

// SetRecommendation sets field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) SetRecommendation(v string) {
	o.Recommendation = v
}

// GetFlowId returns the FlowId field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetFlowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *DaVinciFlowGraphDataResponseAllLinterError) SetFlowId(v string) {
	o.FlowId = v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataResponseAllLinterError) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *DaVinciFlowGraphDataResponseAllLinterError) SetNodeId(v string) {
	o.NodeId = &v
}

func (o DaVinciFlowGraphDataResponseAllLinterError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataResponseAllLinterError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	toSerialize["recommendation"] = o.Recommendation
	toSerialize["flowId"] = o.FlowId
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataResponseAllLinterError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
		"type",
		"recommendation",
		"flowId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataResponseAllLinterError := _DaVinciFlowGraphDataResponseAllLinterError{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataResponseAllLinterError)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataResponseAllLinterError(varDaVinciFlowGraphDataResponseAllLinterError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		delete(additionalProperties, "type")
		delete(additionalProperties, "recommendation")
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "nodeId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataResponseAllLinterError) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("code", o.Code))
	logAttrs = append(logAttrs, slog.Any("message", o.Message))
	logAttrs = append(logAttrs, slog.Any("type", o.Type))
	logAttrs = append(logAttrs, slog.Any("recommendation", o.Recommendation))
	logAttrs = append(logAttrs, slog.Any("flowId", o.FlowId))
	if !IsNil(o.NodeId) {
		logAttrs = append(logAttrs, slog.Any("nodeId", *o.NodeId))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataResponseAllLinterError struct {
	value *DaVinciFlowGraphDataResponseAllLinterError
	isSet bool
}

func (v NullableDaVinciFlowGraphDataResponseAllLinterError) Get() *DaVinciFlowGraphDataResponseAllLinterError {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataResponseAllLinterError) Set(val *DaVinciFlowGraphDataResponseAllLinterError) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataResponseAllLinterError) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataResponseAllLinterError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataResponseAllLinterError(val *DaVinciFlowGraphDataResponseAllLinterError) *NullableDaVinciFlowGraphDataResponseAllLinterError {
	return &NullableDaVinciFlowGraphDataResponseAllLinterError{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataResponseAllLinterError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataResponseAllLinterError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
