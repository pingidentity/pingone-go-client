// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the EnvironmentsCollectionResponseEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentsCollectionResponseEmbedded{}

// checks if the EnvironmentsCollectionResponseEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &EnvironmentsCollectionResponseEmbedded{}

// EnvironmentsCollectionResponseEmbedded struct for EnvironmentsCollectionResponseEmbedded
type EnvironmentsCollectionResponseEmbedded struct {
	Environments         []EnvironmentResponse `json:"environments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentsCollectionResponseEmbedded EnvironmentsCollectionResponseEmbedded

// NewEnvironmentsCollectionResponseEmbedded instantiates a new EnvironmentsCollectionResponseEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentsCollectionResponseEmbedded() *EnvironmentsCollectionResponseEmbedded {
	this := EnvironmentsCollectionResponseEmbedded{}
	return &this
}

// NewEnvironmentsCollectionResponseEmbeddedWithDefaults instantiates a new EnvironmentsCollectionResponseEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentsCollectionResponseEmbeddedWithDefaults() *EnvironmentsCollectionResponseEmbedded {
	this := EnvironmentsCollectionResponseEmbedded{}
	return &this
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *EnvironmentsCollectionResponseEmbedded) GetEnvironments() []EnvironmentResponse {
	if o == nil || IsNil(o.Environments) {
		var ret []EnvironmentResponse
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentsCollectionResponseEmbedded) GetEnvironmentsOk() ([]EnvironmentResponse, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *EnvironmentsCollectionResponseEmbedded) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []EnvironmentResponse and assigns it to the Environments field.
func (o *EnvironmentsCollectionResponseEmbedded) SetEnvironments(v []EnvironmentResponse) {
	o.Environments = v
}

func (o EnvironmentsCollectionResponseEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentsCollectionResponseEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentsCollectionResponseEmbedded) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentsCollectionResponseEmbedded := _EnvironmentsCollectionResponseEmbedded{}

	err = json.Unmarshal(data, &varEnvironmentsCollectionResponseEmbedded)

	if err != nil {
		return err
	}

	*o = EnvironmentsCollectionResponseEmbedded(varEnvironmentsCollectionResponseEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o EnvironmentsCollectionResponseEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Environments) {
		logAttrs = append(logAttrs, slog.Any("environments", o.Environments))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableEnvironmentsCollectionResponseEmbedded struct {
	value *EnvironmentsCollectionResponseEmbedded
	isSet bool
}

func (v NullableEnvironmentsCollectionResponseEmbedded) Get() *EnvironmentsCollectionResponseEmbedded {
	return v.value
}

func (v *NullableEnvironmentsCollectionResponseEmbedded) Set(val *EnvironmentsCollectionResponseEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentsCollectionResponseEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentsCollectionResponseEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentsCollectionResponseEmbedded(val *EnvironmentsCollectionResponseEmbedded) *NullableEnvironmentsCollectionResponseEmbedded {
	return &NullableEnvironmentsCollectionResponseEmbedded{value: val, isSet: true}
}

func (v NullableEnvironmentsCollectionResponseEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentsCollectionResponseEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
