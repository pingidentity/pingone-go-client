// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DavinciConnectorDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorDetailsResponse{}

// checks if the DavinciConnectorDetailsResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorDetailsResponse{}

// DavinciConnectorDetailsResponse struct for DavinciConnectorDetailsResponse
type DavinciConnectorDetailsResponse struct {
	Links                *DavinciConnectorCollectionMinimalResponseLinks   `json:"_links,omitempty"`
	AccountConfigView    *DavinciConnectorDetailsResponseAccountConfigView `json:"accountConfigView,omitempty"`
	Capabilities         map[string]map[string]interface{}                 `json:"capabilities,omitempty"`
	CredentialsView      *DavinciConnectorDetailsResponseCredentialsView   `json:"credentialsView,omitempty"`
	Environment          ResourceRelationshipPingOne                       `json:"environment"`
	FlowSections         []DavinciConnectorDetailsResponseFlowSections     `json:"flowSections,omitempty"`
	Properties           map[string]interface{}                            `json:"properties,omitempty"`
	Sections             []DavinciConnectorDetailsResponseSections         `json:"sections,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorDetailsResponse DavinciConnectorDetailsResponse

// NewDavinciConnectorDetailsResponse instantiates a new DavinciConnectorDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorDetailsResponse(environment ResourceRelationshipPingOne) *DavinciConnectorDetailsResponse {
	this := DavinciConnectorDetailsResponse{}
	this.Environment = environment
	return &this
}

// NewDavinciConnectorDetailsResponseWithDefaults instantiates a new DavinciConnectorDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorDetailsResponseWithDefaults() *DavinciConnectorDetailsResponse {
	this := DavinciConnectorDetailsResponse{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetLinks() DavinciConnectorCollectionMinimalResponseLinks {
	if o == nil || IsNil(o.Links) {
		var ret DavinciConnectorCollectionMinimalResponseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetLinksOk() (*DavinciConnectorCollectionMinimalResponseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DavinciConnectorCollectionMinimalResponseLinks and assigns it to the Links field.
func (o *DavinciConnectorDetailsResponse) SetLinks(v DavinciConnectorCollectionMinimalResponseLinks) {
	o.Links = &v
}

// GetAccountConfigView returns the AccountConfigView field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetAccountConfigView() DavinciConnectorDetailsResponseAccountConfigView {
	if o == nil || IsNil(o.AccountConfigView) {
		var ret DavinciConnectorDetailsResponseAccountConfigView
		return ret
	}
	return *o.AccountConfigView
}

// GetAccountConfigViewOk returns a tuple with the AccountConfigView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetAccountConfigViewOk() (*DavinciConnectorDetailsResponseAccountConfigView, bool) {
	if o == nil || IsNil(o.AccountConfigView) {
		return nil, false
	}
	return o.AccountConfigView, true
}

// HasAccountConfigView returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasAccountConfigView() bool {
	if o != nil && !IsNil(o.AccountConfigView) {
		return true
	}

	return false
}

// SetAccountConfigView gets a reference to the given DavinciConnectorDetailsResponseAccountConfigView and assigns it to the AccountConfigView field.
func (o *DavinciConnectorDetailsResponse) SetAccountConfigView(v DavinciConnectorDetailsResponseAccountConfigView) {
	o.AccountConfigView = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetCapabilities() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Capabilities) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetCapabilitiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given map[string]map[string]interface{} and assigns it to the Capabilities field.
func (o *DavinciConnectorDetailsResponse) SetCapabilities(v map[string]map[string]interface{}) {
	o.Capabilities = v
}

// GetCredentialsView returns the CredentialsView field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetCredentialsView() DavinciConnectorDetailsResponseCredentialsView {
	if o == nil || IsNil(o.CredentialsView) {
		var ret DavinciConnectorDetailsResponseCredentialsView
		return ret
	}
	return *o.CredentialsView
}

// GetCredentialsViewOk returns a tuple with the CredentialsView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetCredentialsViewOk() (*DavinciConnectorDetailsResponseCredentialsView, bool) {
	if o == nil || IsNil(o.CredentialsView) {
		return nil, false
	}
	return o.CredentialsView, true
}

// HasCredentialsView returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasCredentialsView() bool {
	if o != nil && !IsNil(o.CredentialsView) {
		return true
	}

	return false
}

// SetCredentialsView gets a reference to the given DavinciConnectorDetailsResponseCredentialsView and assigns it to the CredentialsView field.
func (o *DavinciConnectorDetailsResponse) SetCredentialsView(v DavinciConnectorDetailsResponseCredentialsView) {
	o.CredentialsView = &v
}

// GetEnvironment returns the Environment field value
func (o *DavinciConnectorDetailsResponse) GetEnvironment() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetEnvironmentOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DavinciConnectorDetailsResponse) SetEnvironment(v ResourceRelationshipPingOne) {
	o.Environment = v
}

// GetFlowSections returns the FlowSections field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetFlowSections() []DavinciConnectorDetailsResponseFlowSections {
	if o == nil || IsNil(o.FlowSections) {
		var ret []DavinciConnectorDetailsResponseFlowSections
		return ret
	}
	return o.FlowSections
}

// GetFlowSectionsOk returns a tuple with the FlowSections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetFlowSectionsOk() ([]DavinciConnectorDetailsResponseFlowSections, bool) {
	if o == nil || IsNil(o.FlowSections) {
		return nil, false
	}
	return o.FlowSections, true
}

// HasFlowSections returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasFlowSections() bool {
	if o != nil && !IsNil(o.FlowSections) {
		return true
	}

	return false
}

// SetFlowSections gets a reference to the given []DavinciConnectorDetailsResponseFlowSections and assigns it to the FlowSections field.
func (o *DavinciConnectorDetailsResponse) SetFlowSections(v []DavinciConnectorDetailsResponseFlowSections) {
	o.FlowSections = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *DavinciConnectorDetailsResponse) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *DavinciConnectorDetailsResponse) GetSections() []DavinciConnectorDetailsResponseSections {
	if o == nil || IsNil(o.Sections) {
		var ret []DavinciConnectorDetailsResponseSections
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponse) GetSectionsOk() ([]DavinciConnectorDetailsResponseSections, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *DavinciConnectorDetailsResponse) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []DavinciConnectorDetailsResponseSections and assigns it to the Sections field.
func (o *DavinciConnectorDetailsResponse) SetSections(v []DavinciConnectorDetailsResponseSections) {
	o.Sections = v
}

func (o DavinciConnectorDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.AccountConfigView) {
		toSerialize["accountConfigView"] = o.AccountConfigView
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.CredentialsView) {
		toSerialize["credentialsView"] = o.CredentialsView
	}
	toSerialize["environment"] = o.Environment
	if !IsNil(o.FlowSections) {
		toSerialize["flowSections"] = o.FlowSections
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorDetailsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDavinciConnectorDetailsResponse := _DavinciConnectorDetailsResponse{}

	err = json.Unmarshal(data, &varDavinciConnectorDetailsResponse)

	if err != nil {
		return err
	}

	*o = DavinciConnectorDetailsResponse(varDavinciConnectorDetailsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "accountConfigView")
		delete(additionalProperties, "capabilities")
		delete(additionalProperties, "credentialsView")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "flowSections")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "sections")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorDetailsResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.AccountConfigView) {
		logAttrs = append(logAttrs, slog.Any("accountConfigView", *o.AccountConfigView))
	}
	if !IsNil(o.Capabilities) {
		logAttrs = append(logAttrs, slog.Any("capabilities", o.Capabilities))
	}
	if !IsNil(o.CredentialsView) {
		logAttrs = append(logAttrs, slog.Any("credentialsView", *o.CredentialsView))
	}
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	if !IsNil(o.FlowSections) {
		logAttrs = append(logAttrs, slog.Any("flowSections", o.FlowSections))
	}
	if !IsNil(o.Properties) {
		logAttrs = append(logAttrs, slog.Any("properties", o.Properties))
	}
	if !IsNil(o.Sections) {
		logAttrs = append(logAttrs, slog.Any("sections", o.Sections))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorDetailsResponse struct {
	value *DavinciConnectorDetailsResponse
	isSet bool
}

func (v NullableDavinciConnectorDetailsResponse) Get() *DavinciConnectorDetailsResponse {
	return v.value
}

func (v *NullableDavinciConnectorDetailsResponse) Set(val *DavinciConnectorDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorDetailsResponse(val *DavinciConnectorDetailsResponse) *NullableDavinciConnectorDetailsResponse {
	return &NullableDavinciConnectorDetailsResponse{value: val, isSet: true}
}

func (v NullableDavinciConnectorDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
