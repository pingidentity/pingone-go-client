// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"log/slog"
)

// checks if the DaVinciFlowSettingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowSettingsResponse{}

// checks if the DaVinciFlowSettingsResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowSettingsResponse{}

// DaVinciFlowSettingsResponse struct for DaVinciFlowSettingsResponse
type DaVinciFlowSettingsResponse struct {
	Csp                           *string                             `json:"csp,omitempty"`
	FlowTimeoutInSeconds          *float32                            `json:"flowTimeoutInSeconds,omitempty"`
	IntermediateLoadingScreenCSS  *string                             `json:"intermediateLoadingScreenCSS,omitempty"`
	IntermediateLoadingScreenHTML *string                             `json:"intermediateLoadingScreenHTML,omitempty"`
	JsLinks                       []DaVinciFlowSettingsResponseJsLink `json:"jsLinks,omitempty"`
	AdditionalProperties          map[string]interface{}
}

type _DaVinciFlowSettingsResponse DaVinciFlowSettingsResponse

// NewDaVinciFlowSettingsResponse instantiates a new DaVinciFlowSettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowSettingsResponse() *DaVinciFlowSettingsResponse {
	this := DaVinciFlowSettingsResponse{}
	return &this
}

// NewDaVinciFlowSettingsResponseWithDefaults instantiates a new DaVinciFlowSettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowSettingsResponseWithDefaults() *DaVinciFlowSettingsResponse {
	this := DaVinciFlowSettingsResponse{}
	return &this
}

// GetCsp returns the Csp field value if set, zero value otherwise.
func (o *DaVinciFlowSettingsResponse) GetCsp() string {
	if o == nil || IsNil(o.Csp) {
		var ret string
		return ret
	}
	return *o.Csp
}

// GetCspOk returns a tuple with the Csp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsResponse) GetCspOk() (*string, bool) {
	if o == nil || IsNil(o.Csp) {
		return nil, false
	}
	return o.Csp, true
}

// HasCsp returns a boolean if a field has been set.
func (o *DaVinciFlowSettingsResponse) HasCsp() bool {
	if o != nil && !IsNil(o.Csp) {
		return true
	}

	return false
}

// SetCsp gets a reference to the given string and assigns it to the Csp field.
func (o *DaVinciFlowSettingsResponse) SetCsp(v string) {
	o.Csp = &v
}

// GetFlowTimeoutInSeconds returns the FlowTimeoutInSeconds field value if set, zero value otherwise.
func (o *DaVinciFlowSettingsResponse) GetFlowTimeoutInSeconds() float32 {
	if o == nil || IsNil(o.FlowTimeoutInSeconds) {
		var ret float32
		return ret
	}
	return *o.FlowTimeoutInSeconds
}

// GetFlowTimeoutInSecondsOk returns a tuple with the FlowTimeoutInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsResponse) GetFlowTimeoutInSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.FlowTimeoutInSeconds) {
		return nil, false
	}
	return o.FlowTimeoutInSeconds, true
}

// HasFlowTimeoutInSeconds returns a boolean if a field has been set.
func (o *DaVinciFlowSettingsResponse) HasFlowTimeoutInSeconds() bool {
	if o != nil && !IsNil(o.FlowTimeoutInSeconds) {
		return true
	}

	return false
}

// SetFlowTimeoutInSeconds gets a reference to the given float32 and assigns it to the FlowTimeoutInSeconds field.
func (o *DaVinciFlowSettingsResponse) SetFlowTimeoutInSeconds(v float32) {
	o.FlowTimeoutInSeconds = &v
}

// GetIntermediateLoadingScreenCSS returns the IntermediateLoadingScreenCSS field value if set, zero value otherwise.
func (o *DaVinciFlowSettingsResponse) GetIntermediateLoadingScreenCSS() string {
	if o == nil || IsNil(o.IntermediateLoadingScreenCSS) {
		var ret string
		return ret
	}
	return *o.IntermediateLoadingScreenCSS
}

// GetIntermediateLoadingScreenCSSOk returns a tuple with the IntermediateLoadingScreenCSS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsResponse) GetIntermediateLoadingScreenCSSOk() (*string, bool) {
	if o == nil || IsNil(o.IntermediateLoadingScreenCSS) {
		return nil, false
	}
	return o.IntermediateLoadingScreenCSS, true
}

// HasIntermediateLoadingScreenCSS returns a boolean if a field has been set.
func (o *DaVinciFlowSettingsResponse) HasIntermediateLoadingScreenCSS() bool {
	if o != nil && !IsNil(o.IntermediateLoadingScreenCSS) {
		return true
	}

	return false
}

// SetIntermediateLoadingScreenCSS gets a reference to the given string and assigns it to the IntermediateLoadingScreenCSS field.
func (o *DaVinciFlowSettingsResponse) SetIntermediateLoadingScreenCSS(v string) {
	o.IntermediateLoadingScreenCSS = &v
}

// GetIntermediateLoadingScreenHTML returns the IntermediateLoadingScreenHTML field value if set, zero value otherwise.
func (o *DaVinciFlowSettingsResponse) GetIntermediateLoadingScreenHTML() string {
	if o == nil || IsNil(o.IntermediateLoadingScreenHTML) {
		var ret string
		return ret
	}
	return *o.IntermediateLoadingScreenHTML
}

// GetIntermediateLoadingScreenHTMLOk returns a tuple with the IntermediateLoadingScreenHTML field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsResponse) GetIntermediateLoadingScreenHTMLOk() (*string, bool) {
	if o == nil || IsNil(o.IntermediateLoadingScreenHTML) {
		return nil, false
	}
	return o.IntermediateLoadingScreenHTML, true
}

// HasIntermediateLoadingScreenHTML returns a boolean if a field has been set.
func (o *DaVinciFlowSettingsResponse) HasIntermediateLoadingScreenHTML() bool {
	if o != nil && !IsNil(o.IntermediateLoadingScreenHTML) {
		return true
	}

	return false
}

// SetIntermediateLoadingScreenHTML gets a reference to the given string and assigns it to the IntermediateLoadingScreenHTML field.
func (o *DaVinciFlowSettingsResponse) SetIntermediateLoadingScreenHTML(v string) {
	o.IntermediateLoadingScreenHTML = &v
}

// GetJsLinks returns the JsLinks field value if set, zero value otherwise.
func (o *DaVinciFlowSettingsResponse) GetJsLinks() []DaVinciFlowSettingsResponseJsLink {
	if o == nil || IsNil(o.JsLinks) {
		var ret []DaVinciFlowSettingsResponseJsLink
		return ret
	}
	return o.JsLinks
}

// GetJsLinksOk returns a tuple with the JsLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowSettingsResponse) GetJsLinksOk() ([]DaVinciFlowSettingsResponseJsLink, bool) {
	if o == nil || IsNil(o.JsLinks) {
		return nil, false
	}
	return o.JsLinks, true
}

// HasJsLinks returns a boolean if a field has been set.
func (o *DaVinciFlowSettingsResponse) HasJsLinks() bool {
	if o != nil && !IsNil(o.JsLinks) {
		return true
	}

	return false
}

// SetJsLinks gets a reference to the given []DaVinciFlowSettingsResponseJsLink and assigns it to the JsLinks field.
func (o *DaVinciFlowSettingsResponse) SetJsLinks(v []DaVinciFlowSettingsResponseJsLink) {
	o.JsLinks = v
}

func (o DaVinciFlowSettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowSettingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Csp) {
		toSerialize["csp"] = o.Csp
	}
	if !IsNil(o.FlowTimeoutInSeconds) {
		toSerialize["flowTimeoutInSeconds"] = o.FlowTimeoutInSeconds
	}
	if !IsNil(o.IntermediateLoadingScreenCSS) {
		toSerialize["intermediateLoadingScreenCSS"] = o.IntermediateLoadingScreenCSS
	}
	if !IsNil(o.IntermediateLoadingScreenHTML) {
		toSerialize["intermediateLoadingScreenHTML"] = o.IntermediateLoadingScreenHTML
	}
	if !IsNil(o.JsLinks) {
		toSerialize["jsLinks"] = o.JsLinks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowSettingsResponse) UnmarshalJSON(data []byte) (err error) {
	varDaVinciFlowSettingsResponse := _DaVinciFlowSettingsResponse{}

	err = json.Unmarshal(data, &varDaVinciFlowSettingsResponse)

	if err != nil {
		return err
	}

	*o = DaVinciFlowSettingsResponse(varDaVinciFlowSettingsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "csp")
		delete(additionalProperties, "flowTimeoutInSeconds")
		delete(additionalProperties, "intermediateLoadingScreenCSS")
		delete(additionalProperties, "intermediateLoadingScreenHTML")
		delete(additionalProperties, "jsLinks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowSettingsResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	if !IsNil(o.Csp) {
		logAttrs = append(logAttrs, slog.Any("csp", *o.Csp))
	}
	if !IsNil(o.FlowTimeoutInSeconds) {
		logAttrs = append(logAttrs, slog.Any("flowTimeoutInSeconds", *o.FlowTimeoutInSeconds))
	}
	if !IsNil(o.IntermediateLoadingScreenCSS) {
		logAttrs = append(logAttrs, slog.Any("intermediateLoadingScreenCSS", *o.IntermediateLoadingScreenCSS))
	}
	if !IsNil(o.IntermediateLoadingScreenHTML) {
		logAttrs = append(logAttrs, slog.Any("intermediateLoadingScreenHTML", *o.IntermediateLoadingScreenHTML))
	}
	if !IsNil(o.JsLinks) {
		logAttrs = append(logAttrs, slog.Any("jsLinks", o.JsLinks))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowSettingsResponse struct {
	value *DaVinciFlowSettingsResponse
	isSet bool
}

func (v NullableDaVinciFlowSettingsResponse) Get() *DaVinciFlowSettingsResponse {
	return v.value
}

func (v *NullableDaVinciFlowSettingsResponse) Set(val *DaVinciFlowSettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowSettingsResponse(val *DaVinciFlowSettingsResponse) *NullableDaVinciFlowSettingsResponse {
	return &NullableDaVinciFlowSettingsResponse{value: val, isSet: true}
}

func (v NullableDaVinciFlowSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
