// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"
)

// checks if the DaVinciImportSubflowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciImportSubflowResponse{}

// checks if the DaVinciImportSubflowResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciImportSubflowResponse{}

// DaVinciImportSubflowResponse struct for DaVinciImportSubflowResponse
type DaVinciImportSubflowResponse struct {
	Links                DaVinciImportFlowResponseLinks         `json:"_links"`
	Environment          ResourceRelationshipReadOnly           `json:"environment"`
	Flow                 DaVinciImportFlowResponseFlow          `json:"flow"`
	PublishedVersion     float32                                `json:"publishedVersion"`
	Version              float32                                `json:"version"`
	Alias                *string                                `json:"alias,omitempty"`
	ClonedFrom           *float32                               `json:"clonedFrom,omitempty"`
	Color                *string                                `json:"color,omitempty"`
	Connectors           []ResourceRelationshipDaVinciReadOnly  `json:"connectors,omitempty"`
	CreatedAt            *time.Time                             `json:"createdAt,omitempty"`
	DeployedAt           *time.Time                             `json:"deployedAt,omitempty"`
	Description          *string                                `json:"description,omitempty"`
	Enabled              *bool                                  `json:"enabled,omitempty"`
	GraphData            *DaVinciFlowGraphDataResponse          `json:"graphData,omitempty"`
	InputSchema          []DaVinciFlowInputSchemaResponseItem   `json:"inputSchema,omitempty"`
	OutputSchema         *DaVinciImportFlowResponseOutputSchema `json:"outputSchema,omitempty"`
	Settings             *DaVinciFlowSettingsResponse           `json:"settings,omitempty"`
	Trigger              *DaVinciImportFlowResponseTrigger      `json:"trigger,omitempty"`
	UpdatedAt            *time.Time                             `json:"updatedAt,omitempty"`
	Updates              []string                               `json:"updates,omitempty"`
	Variables            []map[string]interface{}               `json:"variables,omitempty"`
	Embedded             []DaVinciImportFlowResponse            `json:"_embedded,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciImportSubflowResponse DaVinciImportSubflowResponse

// NewDaVinciImportSubflowResponse instantiates a new DaVinciImportSubflowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciImportSubflowResponse(links DaVinciImportFlowResponseLinks, environment ResourceRelationshipReadOnly, flow DaVinciImportFlowResponseFlow, publishedVersion float32, version float32) *DaVinciImportSubflowResponse {
	this := DaVinciImportSubflowResponse{}
	this.Links = links
	this.Environment = environment
	this.Flow = flow
	this.PublishedVersion = publishedVersion
	this.Version = version
	return &this
}

// NewDaVinciImportSubflowResponseWithDefaults instantiates a new DaVinciImportSubflowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciImportSubflowResponseWithDefaults() *DaVinciImportSubflowResponse {
	this := DaVinciImportSubflowResponse{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciImportSubflowResponse) GetLinks() DaVinciImportFlowResponseLinks {
	if o == nil {
		var ret DaVinciImportFlowResponseLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetLinksOk() (*DaVinciImportFlowResponseLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciImportSubflowResponse) SetLinks(v DaVinciImportFlowResponseLinks) {
	o.Links = v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciImportSubflowResponse) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciImportSubflowResponse) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = v
}

// GetFlow returns the Flow field value
func (o *DaVinciImportSubflowResponse) GetFlow() DaVinciImportFlowResponseFlow {
	if o == nil {
		var ret DaVinciImportFlowResponseFlow
		return ret
	}

	return o.Flow
}

// GetFlowOk returns a tuple with the Flow field value
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetFlowOk() (*DaVinciImportFlowResponseFlow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flow, true
}

// SetFlow sets field value
func (o *DaVinciImportSubflowResponse) SetFlow(v DaVinciImportFlowResponseFlow) {
	o.Flow = v
}

// GetPublishedVersion returns the PublishedVersion field value
func (o *DaVinciImportSubflowResponse) GetPublishedVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PublishedVersion
}

// GetPublishedVersionOk returns a tuple with the PublishedVersion field value
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetPublishedVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishedVersion, true
}

// SetPublishedVersion sets field value
func (o *DaVinciImportSubflowResponse) SetPublishedVersion(v float32) {
	o.PublishedVersion = v
}

// GetVersion returns the Version field value
func (o *DaVinciImportSubflowResponse) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DaVinciImportSubflowResponse) SetVersion(v float32) {
	o.Version = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *DaVinciImportSubflowResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetClonedFrom returns the ClonedFrom field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetClonedFrom() float32 {
	if o == nil || IsNil(o.ClonedFrom) {
		var ret float32
		return ret
	}
	return *o.ClonedFrom
}

// GetClonedFromOk returns a tuple with the ClonedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetClonedFromOk() (*float32, bool) {
	if o == nil || IsNil(o.ClonedFrom) {
		return nil, false
	}
	return o.ClonedFrom, true
}

// HasClonedFrom returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasClonedFrom() bool {
	if o != nil && !IsNil(o.ClonedFrom) {
		return true
	}

	return false
}

// SetClonedFrom gets a reference to the given float32 and assigns it to the ClonedFrom field.
func (o *DaVinciImportSubflowResponse) SetClonedFrom(v float32) {
	o.ClonedFrom = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *DaVinciImportSubflowResponse) SetColor(v string) {
	o.Color = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetConnectors() []ResourceRelationshipDaVinciReadOnly {
	if o == nil || IsNil(o.Connectors) {
		var ret []ResourceRelationshipDaVinciReadOnly
		return ret
	}
	return o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetConnectorsOk() ([]ResourceRelationshipDaVinciReadOnly, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasConnectors() bool {
	if o != nil && !IsNil(o.Connectors) {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []ResourceRelationshipDaVinciReadOnly and assigns it to the Connectors field.
func (o *DaVinciImportSubflowResponse) SetConnectors(v []ResourceRelationshipDaVinciReadOnly) {
	o.Connectors = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciImportSubflowResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeployedAt returns the DeployedAt field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetDeployedAt() time.Time {
	if o == nil || IsNil(o.DeployedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeployedAt
}

// GetDeployedAtOk returns a tuple with the DeployedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetDeployedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeployedAt) {
		return nil, false
	}
	return o.DeployedAt, true
}

// HasDeployedAt returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasDeployedAt() bool {
	if o != nil && !IsNil(o.DeployedAt) {
		return true
	}

	return false
}

// SetDeployedAt gets a reference to the given time.Time and assigns it to the DeployedAt field.
func (o *DaVinciImportSubflowResponse) SetDeployedAt(v time.Time) {
	o.DeployedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DaVinciImportSubflowResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DaVinciImportSubflowResponse) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGraphData returns the GraphData field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetGraphData() DaVinciFlowGraphDataResponse {
	if o == nil || IsNil(o.GraphData) {
		var ret DaVinciFlowGraphDataResponse
		return ret
	}
	return *o.GraphData
}

// GetGraphDataOk returns a tuple with the GraphData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetGraphDataOk() (*DaVinciFlowGraphDataResponse, bool) {
	if o == nil || IsNil(o.GraphData) {
		return nil, false
	}
	return o.GraphData, true
}

// HasGraphData returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasGraphData() bool {
	if o != nil && !IsNil(o.GraphData) {
		return true
	}

	return false
}

// SetGraphData gets a reference to the given DaVinciFlowGraphDataResponse and assigns it to the GraphData field.
func (o *DaVinciImportSubflowResponse) SetGraphData(v DaVinciFlowGraphDataResponse) {
	o.GraphData = &v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetInputSchema() []DaVinciFlowInputSchemaResponseItem {
	if o == nil || IsNil(o.InputSchema) {
		var ret []DaVinciFlowInputSchemaResponseItem
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetInputSchemaOk() ([]DaVinciFlowInputSchemaResponseItem, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return nil, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given []DaVinciFlowInputSchemaResponseItem and assigns it to the InputSchema field.
func (o *DaVinciImportSubflowResponse) SetInputSchema(v []DaVinciFlowInputSchemaResponseItem) {
	o.InputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetOutputSchema() DaVinciImportFlowResponseOutputSchema {
	if o == nil || IsNil(o.OutputSchema) {
		var ret DaVinciImportFlowResponseOutputSchema
		return ret
	}
	return *o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetOutputSchemaOk() (*DaVinciImportFlowResponseOutputSchema, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return nil, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given DaVinciImportFlowResponseOutputSchema and assigns it to the OutputSchema field.
func (o *DaVinciImportSubflowResponse) SetOutputSchema(v DaVinciImportFlowResponseOutputSchema) {
	o.OutputSchema = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetSettings() DaVinciFlowSettingsResponse {
	if o == nil || IsNil(o.Settings) {
		var ret DaVinciFlowSettingsResponse
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetSettingsOk() (*DaVinciFlowSettingsResponse, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given DaVinciFlowSettingsResponse and assigns it to the Settings field.
func (o *DaVinciImportSubflowResponse) SetSettings(v DaVinciFlowSettingsResponse) {
	o.Settings = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetTrigger() DaVinciImportFlowResponseTrigger {
	if o == nil || IsNil(o.Trigger) {
		var ret DaVinciImportFlowResponseTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetTriggerOk() (*DaVinciImportFlowResponseTrigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given DaVinciImportFlowResponseTrigger and assigns it to the Trigger field.
func (o *DaVinciImportSubflowResponse) SetTrigger(v DaVinciImportFlowResponseTrigger) {
	o.Trigger = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciImportSubflowResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetUpdates() []string {
	if o == nil || IsNil(o.Updates) {
		var ret []string
		return ret
	}
	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetUpdatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Updates) {
		return nil, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasUpdates() bool {
	if o != nil && !IsNil(o.Updates) {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given []string and assigns it to the Updates field.
func (o *DaVinciImportSubflowResponse) SetUpdates(v []string) {
	o.Updates = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetVariables() []map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetVariablesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []map[string]interface{} and assigns it to the Variables field.
func (o *DaVinciImportSubflowResponse) SetVariables(v []map[string]interface{}) {
	o.Variables = v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *DaVinciImportSubflowResponse) GetEmbedded() []DaVinciImportFlowResponse {
	if o == nil || IsNil(o.Embedded) {
		var ret []DaVinciImportFlowResponse
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciImportSubflowResponse) GetEmbeddedOk() ([]DaVinciImportFlowResponse, bool) {
	if o == nil || IsNil(o.Embedded) {
		return nil, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *DaVinciImportSubflowResponse) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given []DaVinciImportFlowResponse and assigns it to the Embedded field.
func (o *DaVinciImportSubflowResponse) SetEmbedded(v []DaVinciImportFlowResponse) {
	o.Embedded = v
}

func (o DaVinciImportSubflowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciImportSubflowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["environment"] = o.Environment
	toSerialize["flow"] = o.Flow
	toSerialize["publishedVersion"] = o.PublishedVersion
	toSerialize["version"] = o.Version
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.ClonedFrom) {
		toSerialize["clonedFrom"] = o.ClonedFrom
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DeployedAt) {
		toSerialize["deployedAt"] = o.DeployedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.GraphData) {
		toSerialize["graphData"] = o.GraphData
	}
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["outputSchema"] = o.OutputSchema
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Updates) {
		toSerialize["updates"] = o.Updates
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciImportSubflowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"environment",
		"flow",
		"publishedVersion",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciImportSubflowResponse := _DaVinciImportSubflowResponse{}

	err = json.Unmarshal(data, &varDaVinciImportSubflowResponse)

	if err != nil {
		return err
	}

	*o = DaVinciImportSubflowResponse(varDaVinciImportSubflowResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "publishedVersion")
		delete(additionalProperties, "version")
		delete(additionalProperties, "alias")
		delete(additionalProperties, "clonedFrom")
		delete(additionalProperties, "color")
		delete(additionalProperties, "connectors")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "deployedAt")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "graphData")
		delete(additionalProperties, "inputSchema")
		delete(additionalProperties, "outputSchema")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "trigger")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "updates")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "_embedded")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciImportSubflowResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	logAttrs = append(logAttrs, slog.Any("flow", o.Flow))
	logAttrs = append(logAttrs, slog.Any("publishedVersion", o.PublishedVersion))
	logAttrs = append(logAttrs, slog.Any("version", o.Version))
	if !IsNil(o.Alias) {
		logAttrs = append(logAttrs, slog.Any("alias", *o.Alias))
	}
	if !IsNil(o.ClonedFrom) {
		logAttrs = append(logAttrs, slog.Any("clonedFrom", *o.ClonedFrom))
	}
	if !IsNil(o.Color) {
		logAttrs = append(logAttrs, slog.Any("color", *o.Color))
	}
	if !IsNil(o.Connectors) {
		logAttrs = append(logAttrs, slog.Any("connectors", o.Connectors))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	if !IsNil(o.DeployedAt) {
		logAttrs = append(logAttrs, slog.Any("deployedAt", *o.DeployedAt))
	}
	if !IsNil(o.Description) {
		logAttrs = append(logAttrs, slog.Any("description", *o.Description))
	}
	if !IsNil(o.Enabled) {
		logAttrs = append(logAttrs, slog.Any("enabled", *o.Enabled))
	}
	if !IsNil(o.GraphData) {
		logAttrs = append(logAttrs, slog.Any("graphData", *o.GraphData))
	}
	if !IsNil(o.InputSchema) {
		logAttrs = append(logAttrs, slog.Any("inputSchema", o.InputSchema))
	}
	if !IsNil(o.OutputSchema) {
		logAttrs = append(logAttrs, slog.Any("outputSchema", *o.OutputSchema))
	}
	if !IsNil(o.Settings) {
		logAttrs = append(logAttrs, slog.Any("settings", *o.Settings))
	}
	if !IsNil(o.Trigger) {
		logAttrs = append(logAttrs, slog.Any("trigger", *o.Trigger))
	}
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	if !IsNil(o.Updates) {
		logAttrs = append(logAttrs, slog.Any("updates", o.Updates))
	}
	if !IsNil(o.Variables) {
		logAttrs = append(logAttrs, slog.Any("variables", o.Variables))
	}
	if !IsNil(o.Embedded) {
		logAttrs = append(logAttrs, slog.Any("_embedded", o.Embedded))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciImportSubflowResponse struct {
	value *DaVinciImportSubflowResponse
	isSet bool
}

func (v NullableDaVinciImportSubflowResponse) Get() *DaVinciImportSubflowResponse {
	return v.value
}

func (v *NullableDaVinciImportSubflowResponse) Set(val *DaVinciImportSubflowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciImportSubflowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciImportSubflowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciImportSubflowResponse(val *DaVinciImportSubflowResponse) *NullableDaVinciImportSubflowResponse {
	return &NullableDaVinciImportSubflowResponse{value: val, isSet: true}
}

func (v NullableDaVinciImportSubflowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciImportSubflowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
