// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DavinciConnectorDetailsResponseFlowSections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavinciConnectorDetailsResponseFlowSections{}

// checks if the DavinciConnectorDetailsResponseFlowSections type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DavinciConnectorDetailsResponseFlowSections{}

// DavinciConnectorDetailsResponseFlowSections struct for DavinciConnectorDetailsResponseFlowSections
type DavinciConnectorDetailsResponseFlowSections struct {
	Name                 string `json:"name"`
	Value                string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _DavinciConnectorDetailsResponseFlowSections DavinciConnectorDetailsResponseFlowSections

// NewDavinciConnectorDetailsResponseFlowSections instantiates a new DavinciConnectorDetailsResponseFlowSections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavinciConnectorDetailsResponseFlowSections(name string, value string) *DavinciConnectorDetailsResponseFlowSections {
	this := DavinciConnectorDetailsResponseFlowSections{}
	this.Name = name
	this.Value = value
	return &this
}

// NewDavinciConnectorDetailsResponseFlowSectionsWithDefaults instantiates a new DavinciConnectorDetailsResponseFlowSections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavinciConnectorDetailsResponseFlowSectionsWithDefaults() *DavinciConnectorDetailsResponseFlowSections {
	this := DavinciConnectorDetailsResponseFlowSections{}
	return &this
}

// GetName returns the Name field value
func (o *DavinciConnectorDetailsResponseFlowSections) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponseFlowSections) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DavinciConnectorDetailsResponseFlowSections) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *DavinciConnectorDetailsResponseFlowSections) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DavinciConnectorDetailsResponseFlowSections) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DavinciConnectorDetailsResponseFlowSections) SetValue(v string) {
	o.Value = v
}

func (o DavinciConnectorDetailsResponseFlowSections) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavinciConnectorDetailsResponseFlowSections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavinciConnectorDetailsResponseFlowSections) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDavinciConnectorDetailsResponseFlowSections := _DavinciConnectorDetailsResponseFlowSections{}

	err = json.Unmarshal(data, &varDavinciConnectorDetailsResponseFlowSections)

	if err != nil {
		return err
	}

	*o = DavinciConnectorDetailsResponseFlowSections(varDavinciConnectorDetailsResponseFlowSections)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DavinciConnectorDetailsResponseFlowSections) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	logAttrs = append(logAttrs, slog.Any("value", o.Value))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDavinciConnectorDetailsResponseFlowSections struct {
	value *DavinciConnectorDetailsResponseFlowSections
	isSet bool
}

func (v NullableDavinciConnectorDetailsResponseFlowSections) Get() *DavinciConnectorDetailsResponseFlowSections {
	return v.value
}

func (v *NullableDavinciConnectorDetailsResponseFlowSections) Set(val *DavinciConnectorDetailsResponseFlowSections) {
	v.value = val
	v.isSet = true
}

func (v NullableDavinciConnectorDetailsResponseFlowSections) IsSet() bool {
	return v.isSet
}

func (v *NullableDavinciConnectorDetailsResponseFlowSections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavinciConnectorDetailsResponseFlowSections(val *DavinciConnectorDetailsResponseFlowSections) *NullableDavinciConnectorDetailsResponseFlowSections {
	return &NullableDavinciConnectorDetailsResponseFlowSections{value: val, isSet: true}
}

func (v NullableDavinciConnectorDetailsResponseFlowSections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavinciConnectorDetailsResponseFlowSections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
