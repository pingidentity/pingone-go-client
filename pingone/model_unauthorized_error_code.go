// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// UnauthorizedErrorCode the model 'UnauthorizedErrorCode'
type UnauthorizedErrorCode string

// List of Unauthorized_Error_Code
const (
	UNAUTHORIZEDERRORCODE_ACCESS_FAILED UnauthorizedErrorCode = "ACCESS_FAILED"
)

// All allowed values of UnauthorizedErrorCode enum
var AllowedUnauthorizedErrorCodeEnumValues = []UnauthorizedErrorCode{
	"ACCESS_FAILED",
}

func (v *UnauthorizedErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UnauthorizedErrorCode(value)
	for _, existing := range AllowedUnauthorizedErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = UnauthorizedErrorCode(fmt.Sprintf("%s", value))
	return nil
}

// NewUnauthorizedErrorCodeFromValue returns a pointer to a valid UnauthorizedErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnauthorizedErrorCodeFromValue(v string) (*UnauthorizedErrorCode, error) {
	ev := UnauthorizedErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UnauthorizedErrorCode: valid values are %v", v, AllowedUnauthorizedErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UnauthorizedErrorCode) IsValid() bool {
	for _, existing := range AllowedUnauthorizedErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Unauthorized_Error_Code value
func (v UnauthorizedErrorCode) Ptr() *UnauthorizedErrorCode {
	return &v
}

type NullableUnauthorizedErrorCode struct {
	value *UnauthorizedErrorCode
	isSet bool
}

func (v NullableUnauthorizedErrorCode) Get() *UnauthorizedErrorCode {
	return v.value
}

func (v *NullableUnauthorizedErrorCode) Set(val *UnauthorizedErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableUnauthorizedErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableUnauthorizedErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnauthorizedErrorCode(val *UnauthorizedErrorCode) *NullableUnauthorizedErrorCode {
	return &NullableUnauthorizedErrorCode{value: val, isSet: true}
}

func (v NullableUnauthorizedErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnauthorizedErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
