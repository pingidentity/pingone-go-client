// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyCreateRequestFlowDistribution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyCreateRequestFlowDistribution{}

// checks if the DaVinciFlowPolicyCreateRequestFlowDistribution type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyCreateRequestFlowDistribution{}

// DaVinciFlowPolicyCreateRequestFlowDistribution struct for DaVinciFlowPolicyCreateRequestFlowDistribution
type DaVinciFlowPolicyCreateRequestFlowDistribution struct {
	Id                   string                                                      `json:"id" validate:"regexp=^[a-zA-Z0-9-_]+$"`
	Ip                   []string                                                    `json:"ip,omitempty"`
	SuccessNodes         []DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode `json:"successNodes,omitempty"`
	Version              float32                                                     `json:"version"`
	Weight               *float32                                                    `json:"weight,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyCreateRequestFlowDistribution DaVinciFlowPolicyCreateRequestFlowDistribution

// NewDaVinciFlowPolicyCreateRequestFlowDistribution instantiates a new DaVinciFlowPolicyCreateRequestFlowDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyCreateRequestFlowDistribution(id string, version float32) *DaVinciFlowPolicyCreateRequestFlowDistribution {
	this := DaVinciFlowPolicyCreateRequestFlowDistribution{}
	this.Id = id
	this.Version = version
	return &this
}

// NewDaVinciFlowPolicyCreateRequestFlowDistributionWithDefaults instantiates a new DaVinciFlowPolicyCreateRequestFlowDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyCreateRequestFlowDistributionWithDefaults() *DaVinciFlowPolicyCreateRequestFlowDistribution {
	this := DaVinciFlowPolicyCreateRequestFlowDistribution{}
	return &this
}

// GetId returns the Id field value
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) SetId(v string) {
	o.Id = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetIp() []string {
	if o == nil || IsNil(o.Ip) {
		var ret []string
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetIpOk() ([]string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given []string and assigns it to the Ip field.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) SetIp(v []string) {
	o.Ip = v
}

// GetSuccessNodes returns the SuccessNodes field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetSuccessNodes() []DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode {
	if o == nil || IsNil(o.SuccessNodes) {
		var ret []DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode
		return ret
	}
	return o.SuccessNodes
}

// GetSuccessNodesOk returns a tuple with the SuccessNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetSuccessNodesOk() ([]DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode, bool) {
	if o == nil || IsNil(o.SuccessNodes) {
		return nil, false
	}
	return o.SuccessNodes, true
}

// HasSuccessNodes returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) HasSuccessNodes() bool {
	if o != nil && !IsNil(o.SuccessNodes) {
		return true
	}

	return false
}

// SetSuccessNodes gets a reference to the given []DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode and assigns it to the SuccessNodes field.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) SetSuccessNodes(v []DaVinciFlowPolicyCreateRequestFlowDistributionSuccessNode) {
	o.SuccessNodes = v
}

// GetVersion returns the Version field value
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) SetVersion(v float32) {
	o.Version = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) SetWeight(v float32) {
	o.Weight = &v
}

func (o DaVinciFlowPolicyCreateRequestFlowDistribution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyCreateRequestFlowDistribution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.SuccessNodes) {
		toSerialize["successNodes"] = o.SuccessNodes
	}
	toSerialize["version"] = o.Version
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyCreateRequestFlowDistribution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyCreateRequestFlowDistribution := _DaVinciFlowPolicyCreateRequestFlowDistribution{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyCreateRequestFlowDistribution)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyCreateRequestFlowDistribution(varDaVinciFlowPolicyCreateRequestFlowDistribution)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "successNodes")
		delete(additionalProperties, "version")
		delete(additionalProperties, "weight")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyCreateRequestFlowDistribution) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	if !IsNil(o.Ip) {
		logAttrs = append(logAttrs, slog.Any("ip", o.Ip))
	}
	if !IsNil(o.SuccessNodes) {
		logAttrs = append(logAttrs, slog.Any("successNodes", o.SuccessNodes))
	}
	logAttrs = append(logAttrs, slog.Any("version", o.Version))
	if !IsNil(o.Weight) {
		logAttrs = append(logAttrs, slog.Any("weight", *o.Weight))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyCreateRequestFlowDistribution struct {
	value *DaVinciFlowPolicyCreateRequestFlowDistribution
	isSet bool
}

func (v NullableDaVinciFlowPolicyCreateRequestFlowDistribution) Get() *DaVinciFlowPolicyCreateRequestFlowDistribution {
	return v.value
}

func (v *NullableDaVinciFlowPolicyCreateRequestFlowDistribution) Set(val *DaVinciFlowPolicyCreateRequestFlowDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyCreateRequestFlowDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyCreateRequestFlowDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyCreateRequestFlowDistribution(val *DaVinciFlowPolicyCreateRequestFlowDistribution) *NullableDaVinciFlowPolicyCreateRequestFlowDistribution {
	return &NullableDaVinciFlowPolicyCreateRequestFlowDistribution{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyCreateRequestFlowDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyCreateRequestFlowDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
