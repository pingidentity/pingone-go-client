// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// UnexpectedServiceErrorCode the model 'UnexpectedServiceErrorCode'
type UnexpectedServiceErrorCode string

// List of Unexpected_Service_Error_Code
const (
	UNEXPECTEDSERVICEERRORCODE_UNEXPECTED_ERROR UnexpectedServiceErrorCode = "UNEXPECTED_ERROR"
)

// All allowed values of UnexpectedServiceErrorCode enum
var AllowedUnexpectedServiceErrorCodeEnumValues = []UnexpectedServiceErrorCode{
	"UNEXPECTED_ERROR",
}

func (v *UnexpectedServiceErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UnexpectedServiceErrorCode(value)
	for _, existing := range AllowedUnexpectedServiceErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = UnexpectedServiceErrorCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewUnexpectedServiceErrorCodeFromValue returns a pointer to a valid UnexpectedServiceErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnexpectedServiceErrorCodeFromValue(v string) (*UnexpectedServiceErrorCode, error) {
	ev := UnexpectedServiceErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UnexpectedServiceErrorCode: valid values are %v", v, AllowedUnexpectedServiceErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UnexpectedServiceErrorCode) IsValid() bool {
	for _, existing := range AllowedUnexpectedServiceErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Unexpected_Service_Error_Code value
func (v UnexpectedServiceErrorCode) Ptr() *UnexpectedServiceErrorCode {
	return &v
}

type NullableUnexpectedServiceErrorCode struct {
	value *UnexpectedServiceErrorCode
	isSet bool
}

func (v NullableUnexpectedServiceErrorCode) Get() *UnexpectedServiceErrorCode {
	return v.value
}

func (v *NullableUnexpectedServiceErrorCode) Set(val *UnexpectedServiceErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableUnexpectedServiceErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableUnexpectedServiceErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnexpectedServiceErrorCode(val *UnexpectedServiceErrorCode) *NullableUnexpectedServiceErrorCode {
	return &NullableUnexpectedServiceErrorCode{value: val, isSet: true}
}

func (v NullableUnexpectedServiceErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnexpectedServiceErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
