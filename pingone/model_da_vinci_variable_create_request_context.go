// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciVariableCreateRequestContext the model 'DaVinciVariableCreateRequestContext'
type DaVinciVariableCreateRequestContext string

// List of DaVinci_Variable_Create_Request_Context
const (
	DAVINCIVARIABLECREATEREQUESTCONTEXT_COMPANY       DaVinciVariableCreateRequestContext = "company"
	DAVINCIVARIABLECREATEREQUESTCONTEXT_FLOW          DaVinciVariableCreateRequestContext = "flow"
	DAVINCIVARIABLECREATEREQUESTCONTEXT_FLOW_INSTANCE DaVinciVariableCreateRequestContext = "flowInstance"
	DAVINCIVARIABLECREATEREQUESTCONTEXT_USER          DaVinciVariableCreateRequestContext = "user"
)

// All allowed values of DaVinciVariableCreateRequestContext enum
var AllowedDaVinciVariableCreateRequestContextEnumValues = []DaVinciVariableCreateRequestContext{
	"company",
	"flow",
	"flowInstance",
	"user",
}

func (v *DaVinciVariableCreateRequestContext) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciVariableCreateRequestContext(value)
	for _, existing := range AllowedDaVinciVariableCreateRequestContextEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciVariableCreateRequestContext(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciVariableCreateRequestContextFromValue returns a pointer to a valid DaVinciVariableCreateRequestContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciVariableCreateRequestContextFromValue(v string) (*DaVinciVariableCreateRequestContext, error) {
	ev := DaVinciVariableCreateRequestContext(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciVariableCreateRequestContext: valid values are %v", v, AllowedDaVinciVariableCreateRequestContextEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciVariableCreateRequestContext) IsValid() bool {
	for _, existing := range AllowedDaVinciVariableCreateRequestContextEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Variable_Create_Request_Context value
func (v DaVinciVariableCreateRequestContext) Ptr() *DaVinciVariableCreateRequestContext {
	return &v
}

type NullableDaVinciVariableCreateRequestContext struct {
	value *DaVinciVariableCreateRequestContext
	isSet bool
}

func (v NullableDaVinciVariableCreateRequestContext) Get() *DaVinciVariableCreateRequestContext {
	return v.value
}

func (v *NullableDaVinciVariableCreateRequestContext) Set(val *DaVinciVariableCreateRequestContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableCreateRequestContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableCreateRequestContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableCreateRequestContext(val *DaVinciVariableCreateRequestContext) *NullableDaVinciVariableCreateRequestContext {
	return &NullableDaVinciVariableCreateRequestContext{value: val, isSet: true}
}

func (v NullableDaVinciVariableCreateRequestContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableCreateRequestContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
