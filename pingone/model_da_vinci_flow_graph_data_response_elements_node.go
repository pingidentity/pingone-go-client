// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataResponseElementsNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataResponseElementsNode{}

// checks if the DaVinciFlowGraphDataResponseElementsNode type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataResponseElementsNode{}

// DaVinciFlowGraphDataResponseElementsNode struct for DaVinciFlowGraphDataResponseElementsNode
type DaVinciFlowGraphDataResponseElementsNode struct {
	Classes              string                                           `json:"classes"`
	Data                 DaVinciFlowGraphDataResponseElementsNodeData     `json:"data"`
	Grabbable            bool                                             `json:"grabbable"`
	Group                string                                           `json:"group"`
	Locked               bool                                             `json:"locked"`
	Pannable             bool                                             `json:"pannable"`
	Position             DaVinciFlowGraphDataResponseElementsNodePosition `json:"position"`
	Removed              bool                                             `json:"removed"`
	Selectable           bool                                             `json:"selectable"`
	Selected             bool                                             `json:"selected"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataResponseElementsNode DaVinciFlowGraphDataResponseElementsNode

// NewDaVinciFlowGraphDataResponseElementsNode instantiates a new DaVinciFlowGraphDataResponseElementsNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataResponseElementsNode(classes string, data DaVinciFlowGraphDataResponseElementsNodeData, grabbable bool, group string, locked bool, pannable bool, position DaVinciFlowGraphDataResponseElementsNodePosition, removed bool, selectable bool, selected bool) *DaVinciFlowGraphDataResponseElementsNode {
	this := DaVinciFlowGraphDataResponseElementsNode{}
	this.Classes = classes
	this.Data = data
	this.Grabbable = grabbable
	this.Group = group
	this.Locked = locked
	this.Pannable = pannable
	this.Position = position
	this.Removed = removed
	this.Selectable = selectable
	this.Selected = selected
	return &this
}

// NewDaVinciFlowGraphDataResponseElementsNodeWithDefaults instantiates a new DaVinciFlowGraphDataResponseElementsNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataResponseElementsNodeWithDefaults() *DaVinciFlowGraphDataResponseElementsNode {
	this := DaVinciFlowGraphDataResponseElementsNode{}
	return &this
}

// GetClasses returns the Classes field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetClasses() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetClassesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classes, true
}

// SetClasses sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetClasses(v string) {
	o.Classes = v
}

// GetData returns the Data field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetData() DaVinciFlowGraphDataResponseElementsNodeData {
	if o == nil {
		var ret DaVinciFlowGraphDataResponseElementsNodeData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetDataOk() (*DaVinciFlowGraphDataResponseElementsNodeData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetData(v DaVinciFlowGraphDataResponseElementsNodeData) {
	o.Data = v
}

// GetGrabbable returns the Grabbable field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetGrabbable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Grabbable
}

// GetGrabbableOk returns a tuple with the Grabbable field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetGrabbableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grabbable, true
}

// SetGrabbable sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetGrabbable(v bool) {
	o.Grabbable = v
}

// GetGroup returns the Group field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetGroup(v string) {
	o.Group = v
}

// GetLocked returns the Locked field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetLocked(v bool) {
	o.Locked = v
}

// GetPannable returns the Pannable field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetPannable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pannable
}

// GetPannableOk returns a tuple with the Pannable field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetPannableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pannable, true
}

// SetPannable sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetPannable(v bool) {
	o.Pannable = v
}

// GetPosition returns the Position field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetPosition() DaVinciFlowGraphDataResponseElementsNodePosition {
	if o == nil {
		var ret DaVinciFlowGraphDataResponseElementsNodePosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetPositionOk() (*DaVinciFlowGraphDataResponseElementsNodePosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetPosition(v DaVinciFlowGraphDataResponseElementsNodePosition) {
	o.Position = v
}

// GetRemoved returns the Removed field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetRemoved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetRemovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Removed, true
}

// SetRemoved sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetRemoved(v bool) {
	o.Removed = v
}

// GetSelectable returns the Selectable field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetSelectable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Selectable
}

// GetSelectableOk returns a tuple with the Selectable field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetSelectableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selectable, true
}

// SetSelectable sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetSelectable(v bool) {
	o.Selectable = v
}

// GetSelected returns the Selected field value
func (o *DaVinciFlowGraphDataResponseElementsNode) GetSelected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataResponseElementsNode) GetSelectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selected, true
}

// SetSelected sets field value
func (o *DaVinciFlowGraphDataResponseElementsNode) SetSelected(v bool) {
	o.Selected = v
}

func (o DaVinciFlowGraphDataResponseElementsNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataResponseElementsNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["classes"] = o.Classes
	toSerialize["data"] = o.Data
	toSerialize["grabbable"] = o.Grabbable
	toSerialize["group"] = o.Group
	toSerialize["locked"] = o.Locked
	toSerialize["pannable"] = o.Pannable
	toSerialize["position"] = o.Position
	toSerialize["removed"] = o.Removed
	toSerialize["selectable"] = o.Selectable
	toSerialize["selected"] = o.Selected

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataResponseElementsNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"classes",
		"data",
		"grabbable",
		"group",
		"locked",
		"pannable",
		"position",
		"removed",
		"selectable",
		"selected",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataResponseElementsNode := _DaVinciFlowGraphDataResponseElementsNode{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataResponseElementsNode)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataResponseElementsNode(varDaVinciFlowGraphDataResponseElementsNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "classes")
		delete(additionalProperties, "data")
		delete(additionalProperties, "grabbable")
		delete(additionalProperties, "group")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "pannable")
		delete(additionalProperties, "position")
		delete(additionalProperties, "removed")
		delete(additionalProperties, "selectable")
		delete(additionalProperties, "selected")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataResponseElementsNode) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("classes", o.Classes))
	logAttrs = append(logAttrs, slog.Any("data", o.Data))
	logAttrs = append(logAttrs, slog.Any("grabbable", o.Grabbable))
	logAttrs = append(logAttrs, slog.Any("group", o.Group))
	logAttrs = append(logAttrs, slog.Any("locked", o.Locked))
	logAttrs = append(logAttrs, slog.Any("pannable", o.Pannable))
	logAttrs = append(logAttrs, slog.Any("position", o.Position))
	logAttrs = append(logAttrs, slog.Any("removed", o.Removed))
	logAttrs = append(logAttrs, slog.Any("selectable", o.Selectable))
	logAttrs = append(logAttrs, slog.Any("selected", o.Selected))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataResponseElementsNode struct {
	value *DaVinciFlowGraphDataResponseElementsNode
	isSet bool
}

func (v NullableDaVinciFlowGraphDataResponseElementsNode) Get() *DaVinciFlowGraphDataResponseElementsNode {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNode) Set(val *DaVinciFlowGraphDataResponseElementsNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataResponseElementsNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataResponseElementsNode(val *DaVinciFlowGraphDataResponseElementsNode) *NullableDaVinciFlowGraphDataResponseElementsNode {
	return &NullableDaVinciFlowGraphDataResponseElementsNode{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataResponseElementsNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataResponseElementsNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
