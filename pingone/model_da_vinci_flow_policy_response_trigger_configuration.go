// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowPolicyResponseTriggerConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowPolicyResponseTriggerConfiguration{}

// checks if the DaVinciFlowPolicyResponseTriggerConfiguration type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowPolicyResponseTriggerConfiguration{}

// DaVinciFlowPolicyResponseTriggerConfiguration struct for DaVinciFlowPolicyResponseTriggerConfiguration
type DaVinciFlowPolicyResponseTriggerConfiguration struct {
	Mfa                  DaVinciFlowPolicyResponseTriggerConfigurationMFA      `json:"mfa"`
	Pwd                  DaVinciFlowPolicyResponseTriggerConfigurationPassword `json:"pwd"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowPolicyResponseTriggerConfiguration DaVinciFlowPolicyResponseTriggerConfiguration

// NewDaVinciFlowPolicyResponseTriggerConfiguration instantiates a new DaVinciFlowPolicyResponseTriggerConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowPolicyResponseTriggerConfiguration(mfa DaVinciFlowPolicyResponseTriggerConfigurationMFA, pwd DaVinciFlowPolicyResponseTriggerConfigurationPassword) *DaVinciFlowPolicyResponseTriggerConfiguration {
	this := DaVinciFlowPolicyResponseTriggerConfiguration{}
	this.Mfa = mfa
	this.Pwd = pwd
	return &this
}

// NewDaVinciFlowPolicyResponseTriggerConfigurationWithDefaults instantiates a new DaVinciFlowPolicyResponseTriggerConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowPolicyResponseTriggerConfigurationWithDefaults() *DaVinciFlowPolicyResponseTriggerConfiguration {
	this := DaVinciFlowPolicyResponseTriggerConfiguration{}
	return &this
}

// GetMfa returns the Mfa field value
func (o *DaVinciFlowPolicyResponseTriggerConfiguration) GetMfa() DaVinciFlowPolicyResponseTriggerConfigurationMFA {
	if o == nil {
		var ret DaVinciFlowPolicyResponseTriggerConfigurationMFA
		return ret
	}

	return o.Mfa
}

// GetMfaOk returns a tuple with the Mfa field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyResponseTriggerConfiguration) GetMfaOk() (*DaVinciFlowPolicyResponseTriggerConfigurationMFA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mfa, true
}

// SetMfa sets field value
func (o *DaVinciFlowPolicyResponseTriggerConfiguration) SetMfa(v DaVinciFlowPolicyResponseTriggerConfigurationMFA) {
	o.Mfa = v
}

// GetPwd returns the Pwd field value
func (o *DaVinciFlowPolicyResponseTriggerConfiguration) GetPwd() DaVinciFlowPolicyResponseTriggerConfigurationPassword {
	if o == nil {
		var ret DaVinciFlowPolicyResponseTriggerConfigurationPassword
		return ret
	}

	return o.Pwd
}

// GetPwdOk returns a tuple with the Pwd field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowPolicyResponseTriggerConfiguration) GetPwdOk() (*DaVinciFlowPolicyResponseTriggerConfigurationPassword, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pwd, true
}

// SetPwd sets field value
func (o *DaVinciFlowPolicyResponseTriggerConfiguration) SetPwd(v DaVinciFlowPolicyResponseTriggerConfigurationPassword) {
	o.Pwd = v
}

func (o DaVinciFlowPolicyResponseTriggerConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowPolicyResponseTriggerConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mfa"] = o.Mfa
	toSerialize["pwd"] = o.Pwd

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowPolicyResponseTriggerConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mfa",
		"pwd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowPolicyResponseTriggerConfiguration := _DaVinciFlowPolicyResponseTriggerConfiguration{}

	err = json.Unmarshal(data, &varDaVinciFlowPolicyResponseTriggerConfiguration)

	if err != nil {
		return err
	}

	*o = DaVinciFlowPolicyResponseTriggerConfiguration(varDaVinciFlowPolicyResponseTriggerConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mfa")
		delete(additionalProperties, "pwd")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowPolicyResponseTriggerConfiguration) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("mfa", o.Mfa))
	logAttrs = append(logAttrs, slog.Any("pwd", o.Pwd))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowPolicyResponseTriggerConfiguration struct {
	value *DaVinciFlowPolicyResponseTriggerConfiguration
	isSet bool
}

func (v NullableDaVinciFlowPolicyResponseTriggerConfiguration) Get() *DaVinciFlowPolicyResponseTriggerConfiguration {
	return v.value
}

func (v *NullableDaVinciFlowPolicyResponseTriggerConfiguration) Set(val *DaVinciFlowPolicyResponseTriggerConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowPolicyResponseTriggerConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowPolicyResponseTriggerConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowPolicyResponseTriggerConfiguration(val *DaVinciFlowPolicyResponseTriggerConfiguration) *NullableDaVinciFlowPolicyResponseTriggerConfiguration {
	return &NullableDaVinciFlowPolicyResponseTriggerConfiguration{value: val, isSet: true}
}

func (v NullableDaVinciFlowPolicyResponseTriggerConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowPolicyResponseTriggerConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
