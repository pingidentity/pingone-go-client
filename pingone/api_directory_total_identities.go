// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"errors"
	"io"
	"log/slog"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/google/uuid"
)

// DirectoryTotalIdentitiesApiService DirectoryTotalIdentitiesApi service
type DirectoryTotalIdentitiesApiService service

type ApiGetTotalIdentitiesRequest struct {
	ctx                        context.Context
	ApiService                 *DirectoryTotalIdentitiesApiService
	environmentID              uuid.UUID
	filter                     *string
	xPingExternalSessionID     *string
	xPingExternalTransactionID *string
}

func (r ApiGetTotalIdentitiesRequest) Filter(filter string) ApiGetTotalIdentitiesRequest {
	r.filter = &filter
	return r
}

func (r ApiGetTotalIdentitiesRequest) XPingExternalSessionID(xPingExternalSessionID string) ApiGetTotalIdentitiesRequest {
	r.xPingExternalSessionID = &xPingExternalSessionID
	return r
}

func (r ApiGetTotalIdentitiesRequest) XPingExternalTransactionID(xPingExternalTransactionID string) ApiGetTotalIdentitiesRequest {
	r.xPingExternalTransactionID = &xPingExternalTransactionID
	return r
}

func (r ApiGetTotalIdentitiesRequest) Execute() (*DirectoryTotalIdentitiesCountCollectionResponse, *http.Response, error) {
	return r.ApiService.GetTotalIdentitiesExecute(r)
}

/*
GetTotalIdentities Method for GetTotalIdentities

	@permission orgmgt:read:environment
	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param environmentID
	@return ApiGetTotalIdentitiesRequest
*/
func (a *DirectoryTotalIdentitiesApiService) GetTotalIdentities(ctx context.Context, environmentID uuid.UUID) ApiGetTotalIdentitiesRequest {
	return ApiGetTotalIdentitiesRequest{
		ApiService:    a,
		ctx:           ctx,
		environmentID: environmentID,
	}
}

// Execute executes the request
//
//	@return DirectoryTotalIdentitiesCountCollectionResponse
func (a *DirectoryTotalIdentitiesApiService) GetTotalIdentitiesExecute(r ApiGetTotalIdentitiesRequest) (*DirectoryTotalIdentitiesCountCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DirectoryTotalIdentitiesCountCollectionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryTotalIdentitiesApiService.GetTotalIdentities")
	if err != nil {
		return localVarReturnValue, nil, &APIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/environments/{environmentID}/totalIdentities"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterValueToString(r.environmentID, "environmentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xPingExternalSessionID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ping-External-Session-ID", r.xPingExternalSessionID, "simple", "")
	}
	if r.xPingExternalTransactionID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ping-External-Transaction-ID", r.xPingExternalTransactionID, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	var bodyBytes []byte
	if req.Body != nil {
		bodyBytes, _ = io.ReadAll(req.Body)
	}

	var localVarHTTPResponse *http.Response
	var localVarBody []byte

	for i := range maxRetries {
		if req.Body != nil {
			req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
		}

		if i > 0 {
			slog.Debug("Retrying request", "attempt", i, "method", localVarHTTPMethod, "path", localVarPath)
		}

		localVarHTTPResponse, err = a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		logDeprecationHeaders(localVarHTTPResponse.Header, localVarPath, localVarHTTPMethod)

		localVarBody, err = io.ReadAll(localVarHTTPResponse.Body)
		_ = localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {
			newErr := &APIError{
				body:  localVarBody,
				error: localVarHTTPResponse.Status,
			}
			if localVarHTTPResponse.StatusCode == 400 {
				var v BadRequestError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				return localVarReturnValue, localVarHTTPResponse, getErrorObject(v)
			}
			if localVarHTTPResponse.StatusCode == 401 {
				var v UnauthorizedError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				return localVarReturnValue, localVarHTTPResponse, getErrorObject(v)
			}
			if localVarHTTPResponse.StatusCode == 403 {
				var v ForbiddenError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				// check if environment exists - P14C-63085
				_, _, err := a.client.EnvironmentsApi.GetEnvironmentById(r.ctx, r.environmentID).Execute()
				if err != nil {
					var notFoundErr NotFoundError
					if errors.As(err, &notFoundErr) {
						slog.Info("The API's error response is inconsistent with that of the containing environment. The environment has not been found", "API error", v, "parent environment error", notFoundErr)
						return localVarReturnValue, localVarHTTPResponse, errors.Join(notFoundErr, err)
					}
				}
				// check if environment created recently - DOCS-8830
				retryEnvironmentResponse, retryVarHTTPResponse, err := a.client.EnvironmentsApi.GetEnvironmentById(r.ctx, r.environmentID).Execute()
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				if retryVarHTTPResponse.StatusCode == 200 && retryEnvironmentResponse != nil {
					// Check if the retryEnvironmentResponse.CreatedAt is within the last 30 seconds
					if time.Since(retryEnvironmentResponse.CreatedAt) < 30*time.Second {
						slog.Debug("The environment was created within the last 30 seconds, retrying request", "attempt", i, "method", localVarHTTPMethod, "path", localVarPath)
						// Retry the request
						time.Sleep(1 * time.Second)
						continue
					}
				}
				return localVarReturnValue, localVarHTTPResponse, getErrorObject(v)
			}
			if localVarHTTPResponse.StatusCode == 429 {
				var v TooManyRequestsError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				return localVarReturnValue, localVarHTTPResponse, getErrorObject(v)
			}
			if localVarHTTPResponse.StatusCode == 500 {
				var v InternalServerError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				return localVarReturnValue, localVarHTTPResponse, getErrorObject(v)
			}
			if localVarHTTPResponse.StatusCode == 502 {
				var v GeneralError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				return localVarReturnValue, localVarHTTPResponse, getErrorObject(v)
			}
			if localVarHTTPResponse.StatusCode == 503 {
				var v GeneralError
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		break
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &APIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
