/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// InvalidDataErrorCode the model 'InvalidDataErrorCode'
type InvalidDataErrorCode string

// List of Invalid_Data_Error_Code
const (
	INVALIDDATAERRORCODE_INVALID_DATA InvalidDataErrorCode = "INVALID_DATA"
)

// All allowed values of InvalidDataErrorCode enum
var AllowedInvalidDataErrorCodeEnumValues = []InvalidDataErrorCode{
	"INVALID_DATA",
}

func (v *InvalidDataErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvalidDataErrorCode(value)
	for _, existing := range AllowedInvalidDataErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = InvalidDataErrorCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewInvalidDataErrorCodeFromValue returns a pointer to a valid InvalidDataErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvalidDataErrorCodeFromValue(v string) (*InvalidDataErrorCode, error) {
	ev := InvalidDataErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvalidDataErrorCode: valid values are %v", v, AllowedInvalidDataErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvalidDataErrorCode) IsValid() bool {
	for _, existing := range AllowedInvalidDataErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Invalid_Data_Error_Code value
func (v InvalidDataErrorCode) Ptr() *InvalidDataErrorCode {
	return &v
}

type NullableInvalidDataErrorCode struct {
	value *InvalidDataErrorCode
	isSet bool
}

func (v NullableInvalidDataErrorCode) Get() *InvalidDataErrorCode {
	return v.value
}

func (v *NullableInvalidDataErrorCode) Set(val *InvalidDataErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidDataErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidDataErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidDataErrorCode(val *InvalidDataErrorCode) *NullableInvalidDataErrorCode {
	return &NullableInvalidDataErrorCode{value: val, isSet: true}
}

func (v NullableInvalidDataErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidDataErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
