/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciVariableCollectionEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciVariableCollectionEmbedded{}

// checks if the DaVinciVariableCollectionEmbedded type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciVariableCollectionEmbedded{}

// DaVinciVariableCollectionEmbedded struct for DaVinciVariableCollectionEmbedded
type DaVinciVariableCollectionEmbedded struct {
	Variables            []DaVinciVariable `json:"variables"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciVariableCollectionEmbedded DaVinciVariableCollectionEmbedded

// NewDaVinciVariableCollectionEmbedded instantiates a new DaVinciVariableCollectionEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciVariableCollectionEmbedded(variables []DaVinciVariable) *DaVinciVariableCollectionEmbedded {
	this := DaVinciVariableCollectionEmbedded{}
	this.Variables = variables
	return &this
}

// NewDaVinciVariableCollectionEmbeddedWithDefaults instantiates a new DaVinciVariableCollectionEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciVariableCollectionEmbeddedWithDefaults() *DaVinciVariableCollectionEmbedded {
	this := DaVinciVariableCollectionEmbedded{}
	return &this
}

// GetVariables returns the Variables field value
func (o *DaVinciVariableCollectionEmbedded) GetVariables() []DaVinciVariable {
	if o == nil {
		var ret []DaVinciVariable
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariableCollectionEmbedded) GetVariablesOk() ([]DaVinciVariable, bool) {
	if o == nil {
		return nil, false
	}
	return o.Variables, true
}

// SetVariables sets field value
func (o *DaVinciVariableCollectionEmbedded) SetVariables(v []DaVinciVariable) {
	o.Variables = v
}

func (o DaVinciVariableCollectionEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciVariableCollectionEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["variables"] = o.Variables

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciVariableCollectionEmbedded) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"variables",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciVariableCollectionEmbedded := _DaVinciVariableCollectionEmbedded{}

	err = json.Unmarshal(data, &varDaVinciVariableCollectionEmbedded)

	if err != nil {
		return err
	}

	*o = DaVinciVariableCollectionEmbedded(varDaVinciVariableCollectionEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "variables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciVariableCollectionEmbedded) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("variables", o.Variables))
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciVariableCollectionEmbedded struct {
	value *DaVinciVariableCollectionEmbedded
	isSet bool
}

func (v NullableDaVinciVariableCollectionEmbedded) Get() *DaVinciVariableCollectionEmbedded {
	return v.value
}

func (v *NullableDaVinciVariableCollectionEmbedded) Set(val *DaVinciVariableCollectionEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariableCollectionEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariableCollectionEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariableCollectionEmbedded(val *DaVinciVariableCollectionEmbedded) *NullableDaVinciVariableCollectionEmbedded {
	return &NullableDaVinciVariableCollectionEmbedded{value: val, isSet: true}
}

func (v NullableDaVinciVariableCollectionEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariableCollectionEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
