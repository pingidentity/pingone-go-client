/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentRegion - struct for EnvironmentRegion
type EnvironmentRegion struct {
	EnvironmentRegionCode *EnvironmentRegionCode
	String                *string
}

// EnvironmentRegionCodeAsEnvironmentRegion is a convenience function that returns EnvironmentRegionCode wrapped in EnvironmentRegion
func EnvironmentRegionCodeAsEnvironmentRegion(v *EnvironmentRegionCode) EnvironmentRegion {
	return EnvironmentRegion{
		EnvironmentRegionCode: v,
	}
}

// stringAsEnvironmentRegion is a convenience function that returns string wrapped in EnvironmentRegion
func StringAsEnvironmentRegion(v *string) EnvironmentRegion {
	return EnvironmentRegion{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnvironmentRegion) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EnvironmentRegionCode
	err = json.Unmarshal(data, &dst.EnvironmentRegionCode)
	if err == nil {
		jsonEnvironmentRegionCode, _ := json.Marshal(dst.EnvironmentRegionCode)
		if string(jsonEnvironmentRegionCode) == "{}" { // empty struct
			dst.EnvironmentRegionCode = nil
		} else {
			match++
		}
	} else {
		dst.EnvironmentRegionCode = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EnvironmentRegionCode = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EnvironmentRegion)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EnvironmentRegion)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnvironmentRegion) MarshalJSON() ([]byte, error) {
	if src.EnvironmentRegionCode != nil {
		return json.Marshal(&src.EnvironmentRegionCode)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnvironmentRegion) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EnvironmentRegionCode != nil {
		return obj.EnvironmentRegionCode
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EnvironmentRegion) GetActualInstanceValue() interface{} {
	if obj.EnvironmentRegionCode != nil {
		return *obj.EnvironmentRegionCode
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableEnvironmentRegion struct {
	value *EnvironmentRegion
	isSet bool
}

func (v NullableEnvironmentRegion) Get() *EnvironmentRegion {
	return v.value
}

func (v *NullableEnvironmentRegion) Set(val *EnvironmentRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentRegion(val *EnvironmentRegion) *NullableEnvironmentRegion {
	return &NullableEnvironmentRegion{value: val, isSet: true}
}

func (v NullableEnvironmentRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
