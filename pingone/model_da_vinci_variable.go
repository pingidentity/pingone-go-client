// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne User and Configuration Management API

The PingOne User and Configuration Management API provides the interface to configure and manage users in the PingOne directory and the administration configuration of your PingOne organization.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"time"

	"github.com/google/uuid"
)

// checks if the DaVinciVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciVariable{}

// checks if the DaVinciVariable type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciVariable{}

// DaVinciVariable struct for DaVinciVariable
type DaVinciVariable struct {
	Links                DaVinciVariableLinks         `json:"_links"`
	Context              *string                      `json:"context,omitempty"`
	CreatedAt            *time.Time                   `json:"createdAt,omitempty"`
	DataType             DaVinciVariableDataType      `json:"dataType"`
	DisplayName          *string                      `json:"displayName,omitempty"`
	Environment          ResourceRelationshipPingOne  `json:"environment"`
	Flow                 *ResourceRelationshipDaVinci `json:"flow,omitempty"`
	Id                   uuid.UUID                    `json:"id"`
	Max                  *float32                     `json:"max,omitempty"`
	Min                  *float32                     `json:"min,omitempty"`
	Mutable              *bool                        `json:"mutable,omitempty"`
	Name                 string                       `json:"name"`
	UpdatedAt            *time.Time                   `json:"updatedAt,omitempty"`
	Value                *DaVinciVariableValue        `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciVariable DaVinciVariable

// NewDaVinciVariable instantiates a new DaVinciVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciVariable(links DaVinciVariableLinks, dataType DaVinciVariableDataType, environment ResourceRelationshipPingOne, id uuid.UUID, name string) *DaVinciVariable {
	this := DaVinciVariable{}
	this.Links = links
	this.DataType = dataType
	this.Environment = environment
	this.Id = id
	this.Name = name
	return &this
}

// NewDaVinciVariableWithDefaults instantiates a new DaVinciVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciVariableWithDefaults() *DaVinciVariable {
	this := DaVinciVariable{}
	return &this
}

// GetLinks returns the Links field value
func (o *DaVinciVariable) GetLinks() DaVinciVariableLinks {
	if o == nil {
		var ret DaVinciVariableLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetLinksOk() (*DaVinciVariableLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DaVinciVariable) SetLinks(v DaVinciVariableLinks) {
	o.Links = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *DaVinciVariable) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *DaVinciVariable) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *DaVinciVariable) SetContext(v string) {
	o.Context = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DaVinciVariable) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DaVinciVariable) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DaVinciVariable) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDataType returns the DataType field value
func (o *DaVinciVariable) GetDataType() DaVinciVariableDataType {
	if o == nil {
		var ret DaVinciVariableDataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetDataTypeOk() (*DaVinciVariableDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *DaVinciVariable) SetDataType(v DaVinciVariableDataType) {
	o.DataType = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DaVinciVariable) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DaVinciVariable) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DaVinciVariable) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnvironment returns the Environment field value
func (o *DaVinciVariable) GetEnvironment() ResourceRelationshipPingOne {
	if o == nil {
		var ret ResourceRelationshipPingOne
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetEnvironmentOk() (*ResourceRelationshipPingOne, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciVariable) SetEnvironment(v ResourceRelationshipPingOne) {
	o.Environment = v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *DaVinciVariable) GetFlow() ResourceRelationshipDaVinci {
	if o == nil || IsNil(o.Flow) {
		var ret ResourceRelationshipDaVinci
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetFlowOk() (*ResourceRelationshipDaVinci, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *DaVinciVariable) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given ResourceRelationshipDaVinci and assigns it to the Flow field.
func (o *DaVinciVariable) SetFlow(v ResourceRelationshipDaVinci) {
	o.Flow = &v
}

// GetId returns the Id field value
func (o *DaVinciVariable) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciVariable) SetId(v uuid.UUID) {
	o.Id = v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *DaVinciVariable) GetMax() float32 {
	if o == nil || IsNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *DaVinciVariable) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *DaVinciVariable) SetMax(v float32) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *DaVinciVariable) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *DaVinciVariable) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *DaVinciVariable) SetMin(v float32) {
	o.Min = &v
}

// GetMutable returns the Mutable field value if set, zero value otherwise.
func (o *DaVinciVariable) GetMutable() bool {
	if o == nil || IsNil(o.Mutable) {
		var ret bool
		return ret
	}
	return *o.Mutable
}

// GetMutableOk returns a tuple with the Mutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetMutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Mutable) {
		return nil, false
	}
	return o.Mutable, true
}

// HasMutable returns a boolean if a field has been set.
func (o *DaVinciVariable) HasMutable() bool {
	if o != nil && !IsNil(o.Mutable) {
		return true
	}

	return false
}

// SetMutable gets a reference to the given bool and assigns it to the Mutable field.
func (o *DaVinciVariable) SetMutable(v bool) {
	o.Mutable = &v
}

// GetName returns the Name field value
func (o *DaVinciVariable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaVinciVariable) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DaVinciVariable) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DaVinciVariable) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DaVinciVariable) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DaVinciVariable) GetValue() DaVinciVariableValue {
	if o == nil || IsNil(o.Value) {
		var ret DaVinciVariableValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciVariable) GetValueOk() (*DaVinciVariableValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DaVinciVariable) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given DaVinciVariableValue and assigns it to the Value field.
func (o *DaVinciVariable) SetValue(v DaVinciVariableValue) {
	o.Value = &v
}

func (o DaVinciVariable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["dataType"] = o.DataType
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["environment"] = o.Environment
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Mutable) {
		toSerialize["mutable"] = o.Mutable
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciVariable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"dataType",
		"environment",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciVariable := _DaVinciVariable{}

	err = json.Unmarshal(data, &varDaVinciVariable)

	if err != nil {
		return err
	}

	*o = DaVinciVariable(varDaVinciVariable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_links")
		delete(additionalProperties, "context")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "dataType")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "id")
		delete(additionalProperties, "max")
		delete(additionalProperties, "min")
		delete(additionalProperties, "mutable")
		delete(additionalProperties, "name")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciVariable) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("_links", o.Links))
	if !IsNil(o.Context) {
		logAttrs = append(logAttrs, slog.Any("context", *o.Context))
	}
	if !IsNil(o.CreatedAt) {
		logAttrs = append(logAttrs, slog.Any("createdAt", *o.CreatedAt))
	}
	logAttrs = append(logAttrs, slog.Any("dataType", o.DataType))
	if !IsNil(o.DisplayName) {
		logAttrs = append(logAttrs, slog.Any("displayName", *o.DisplayName))
	}
	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	if !IsNil(o.Flow) {
		logAttrs = append(logAttrs, slog.Any("flow", *o.Flow))
	}
	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	if !IsNil(o.Max) {
		logAttrs = append(logAttrs, slog.Any("max", *o.Max))
	}
	if !IsNil(o.Min) {
		logAttrs = append(logAttrs, slog.Any("min", *o.Min))
	}
	if !IsNil(o.Mutable) {
		logAttrs = append(logAttrs, slog.Any("mutable", *o.Mutable))
	}
	logAttrs = append(logAttrs, slog.Any("name", o.Name))
	if !IsNil(o.UpdatedAt) {
		logAttrs = append(logAttrs, slog.Any("updatedAt", *o.UpdatedAt))
	}
	if !IsNil(o.Value) {
		logAttrs = append(logAttrs, slog.Any("value", *o.Value))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciVariable struct {
	value *DaVinciVariable
	isSet bool
}

func (v NullableDaVinciVariable) Get() *DaVinciVariable {
	return v.value
}

func (v *NullableDaVinciVariable) Set(val *DaVinciVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciVariable(val *DaVinciVariable) *NullableDaVinciVariable {
	return &NullableDaVinciVariable{value: val, isSet: true}
}

func (v NullableDaVinciVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
