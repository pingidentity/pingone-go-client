// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciFlowInputSchemaRequestItemPreferredControlType the model 'DaVinciFlowInputSchemaRequestItemPreferredControlType'
type DaVinciFlowInputSchemaRequestItemPreferredControlType string

// List of DaVinci_Flow_Input_Schema_Request_Item_Preferred_Control_Type
const (
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_BUTTON                     DaVinciFlowInputSchemaRequestItemPreferredControlType = "button"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_COLOR_PICKER               DaVinciFlowInputSchemaRequestItemPreferredControlType = "colorPicker"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_CONTENT_EDITABLE_TEXT_AREA DaVinciFlowInputSchemaRequestItemPreferredControlType = "contentEditableTextArea"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_CSS_AREA                   DaVinciFlowInputSchemaRequestItemPreferredControlType = "cssArea"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_DROP_DOWN                  DaVinciFlowInputSchemaRequestItemPreferredControlType = "dropDown"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_DROP_DOWN_MULTI_SELECT     DaVinciFlowInputSchemaRequestItemPreferredControlType = "dropDownMultiSelect"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_DROP_DOWN_MULTI_SELECT2    DaVinciFlowInputSchemaRequestItemPreferredControlType = "dropDownMultiSelect2"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_DROP_DOWN_WITH_CREATE      DaVinciFlowInputSchemaRequestItemPreferredControlType = "dropDownWithCreate"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_FUNCTION_ARGUMENT_LIST     DaVinciFlowInputSchemaRequestItemPreferredControlType = "functionArgumentList"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_KEY_VALUE_LIST             DaVinciFlowInputSchemaRequestItemPreferredControlType = "keyValueList"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_LABEL                      DaVinciFlowInputSchemaRequestItemPreferredControlType = "label"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_RADIO_SELECT               DaVinciFlowInputSchemaRequestItemPreferredControlType = "radioSelect"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_TEXT_AREA                  DaVinciFlowInputSchemaRequestItemPreferredControlType = "textArea"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_TEXT_FIELD                 DaVinciFlowInputSchemaRequestItemPreferredControlType = "textField"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_TEXT_FIELD_ARRAY_VIEW      DaVinciFlowInputSchemaRequestItemPreferredControlType = "textFieldArrayView"
	DAVINCIFLOWINPUTSCHEMAREQUESTITEMPREFERREDCONTROLTYPE_TOGGLE_SWITCH              DaVinciFlowInputSchemaRequestItemPreferredControlType = "toggleSwitch"
)

// All allowed values of DaVinciFlowInputSchemaRequestItemPreferredControlType enum
var AllowedDaVinciFlowInputSchemaRequestItemPreferredControlTypeEnumValues = []DaVinciFlowInputSchemaRequestItemPreferredControlType{
	"button",
	"colorPicker",
	"contentEditableTextArea",
	"cssArea",
	"dropDown",
	"dropDownMultiSelect",
	"dropDownMultiSelect2",
	"dropDownWithCreate",
	"functionArgumentList",
	"keyValueList",
	"label",
	"radioSelect",
	"textArea",
	"textField",
	"textFieldArrayView",
	"toggleSwitch",
}

func (v *DaVinciFlowInputSchemaRequestItemPreferredControlType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciFlowInputSchemaRequestItemPreferredControlType(value)
	for _, existing := range AllowedDaVinciFlowInputSchemaRequestItemPreferredControlTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciFlowInputSchemaRequestItemPreferredControlType(fmt.Sprintf("%s", value))
	return nil
}

// NewDaVinciFlowInputSchemaRequestItemPreferredControlTypeFromValue returns a pointer to a valid DaVinciFlowInputSchemaRequestItemPreferredControlType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciFlowInputSchemaRequestItemPreferredControlTypeFromValue(v string) (*DaVinciFlowInputSchemaRequestItemPreferredControlType, error) {
	ev := DaVinciFlowInputSchemaRequestItemPreferredControlType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciFlowInputSchemaRequestItemPreferredControlType: valid values are %v", v, AllowedDaVinciFlowInputSchemaRequestItemPreferredControlTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciFlowInputSchemaRequestItemPreferredControlType) IsValid() bool {
	for _, existing := range AllowedDaVinciFlowInputSchemaRequestItemPreferredControlTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Flow_Input_Schema_Request_Item_Preferred_Control_Type value
func (v DaVinciFlowInputSchemaRequestItemPreferredControlType) Ptr() *DaVinciFlowInputSchemaRequestItemPreferredControlType {
	return &v
}

type NullableDaVinciFlowInputSchemaRequestItemPreferredControlType struct {
	value *DaVinciFlowInputSchemaRequestItemPreferredControlType
	isSet bool
}

func (v NullableDaVinciFlowInputSchemaRequestItemPreferredControlType) Get() *DaVinciFlowInputSchemaRequestItemPreferredControlType {
	return v.value
}

func (v *NullableDaVinciFlowInputSchemaRequestItemPreferredControlType) Set(val *DaVinciFlowInputSchemaRequestItemPreferredControlType) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowInputSchemaRequestItemPreferredControlType) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowInputSchemaRequestItemPreferredControlType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowInputSchemaRequestItemPreferredControlType(val *DaVinciFlowInputSchemaRequestItemPreferredControlType) *NullableDaVinciFlowInputSchemaRequestItemPreferredControlType {
	return &NullableDaVinciFlowInputSchemaRequestItemPreferredControlType{value: val, isSet: true}
}

func (v NullableDaVinciFlowInputSchemaRequestItemPreferredControlType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowInputSchemaRequestItemPreferredControlType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
