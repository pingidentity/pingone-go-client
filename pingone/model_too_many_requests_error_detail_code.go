// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// TooManyRequestsErrorDetailCode the model 'TooManyRequestsErrorDetailCode'
type TooManyRequestsErrorDetailCode string

// List of Too_Many_Requests_Error_Detail_Code
const (
	TOOMANYREQUESTSERRORDETAILCODE_LIMIT_EXCEEDED TooManyRequestsErrorDetailCode = "LIMIT_EXCEEDED"
	TOOMANYREQUESTSERRORDETAILCODE_QUOTA_EXCEEDED TooManyRequestsErrorDetailCode = "QUOTA_EXCEEDED"
)

// All allowed values of TooManyRequestsErrorDetailCode enum
var AllowedTooManyRequestsErrorDetailCodeEnumValues = []TooManyRequestsErrorDetailCode{
	"LIMIT_EXCEEDED",
	"QUOTA_EXCEEDED",
}

func (v *TooManyRequestsErrorDetailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TooManyRequestsErrorDetailCode(value)
	for _, existing := range AllowedTooManyRequestsErrorDetailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = TooManyRequestsErrorDetailCode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewTooManyRequestsErrorDetailCodeFromValue returns a pointer to a valid TooManyRequestsErrorDetailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTooManyRequestsErrorDetailCodeFromValue(v string) (*TooManyRequestsErrorDetailCode, error) {
	ev := TooManyRequestsErrorDetailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TooManyRequestsErrorDetailCode: valid values are %v", v, AllowedTooManyRequestsErrorDetailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TooManyRequestsErrorDetailCode) IsValid() bool {
	for _, existing := range AllowedTooManyRequestsErrorDetailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Too_Many_Requests_Error_Detail_Code value
func (v TooManyRequestsErrorDetailCode) Ptr() *TooManyRequestsErrorDetailCode {
	return &v
}

type NullableTooManyRequestsErrorDetailCode struct {
	value *TooManyRequestsErrorDetailCode
	isSet bool
}

func (v NullableTooManyRequestsErrorDetailCode) Get() *TooManyRequestsErrorDetailCode {
	return v.value
}

func (v *NullableTooManyRequestsErrorDetailCode) Set(val *TooManyRequestsErrorDetailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableTooManyRequestsErrorDetailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableTooManyRequestsErrorDetailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTooManyRequestsErrorDetailCode(val *TooManyRequestsErrorDetailCode) *NullableTooManyRequestsErrorDetailCode {
	return &NullableTooManyRequestsErrorDetailCode{value: val, isSet: true}
}

func (v NullableTooManyRequestsErrorDetailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTooManyRequestsErrorDetailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
