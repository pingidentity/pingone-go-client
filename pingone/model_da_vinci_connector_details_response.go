// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciConnectorDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciConnectorDetailsResponse{}

// checks if the DaVinciConnectorDetailsResponse type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciConnectorDetailsResponse{}

// DaVinciConnectorDetailsResponse struct for DaVinciConnectorDetailsResponse
type DaVinciConnectorDetailsResponse struct {
	Environment          ResourceRelationshipReadOnly                      `json:"environment"`
	Links                *DaVinciConnectorDetailsResponseLinks             `json:"_links,omitempty"`
	AccountConfigView    *DaVinciConnectorDetailsResponseAccountConfigView `json:"accountConfigView,omitempty"`
	Capabilities         map[string]map[string]interface{}                 `json:"capabilities,omitempty"`
	CredentialsView      *DaVinciConnectorDetailsResponseCredentialsView   `json:"credentialsView,omitempty"`
	FlowSections         []DaVinciConnectorDetailsResponseFlowSection      `json:"flowSections,omitempty"`
	Properties           map[string]interface{}                            `json:"properties,omitempty"`
	Sections             []DaVinciConnectorDetailsResponseSection          `json:"sections,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciConnectorDetailsResponse DaVinciConnectorDetailsResponse

// NewDaVinciConnectorDetailsResponse instantiates a new DaVinciConnectorDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciConnectorDetailsResponse(environment ResourceRelationshipReadOnly) *DaVinciConnectorDetailsResponse {
	this := DaVinciConnectorDetailsResponse{}
	this.Environment = environment
	return &this
}

// NewDaVinciConnectorDetailsResponseWithDefaults instantiates a new DaVinciConnectorDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciConnectorDetailsResponseWithDefaults() *DaVinciConnectorDetailsResponse {
	this := DaVinciConnectorDetailsResponse{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *DaVinciConnectorDetailsResponse) GetEnvironment() ResourceRelationshipReadOnly {
	if o == nil {
		var ret ResourceRelationshipReadOnly
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetEnvironmentOk() (*ResourceRelationshipReadOnly, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaVinciConnectorDetailsResponse) SetEnvironment(v ResourceRelationshipReadOnly) {
	o.Environment = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetLinks() DaVinciConnectorDetailsResponseLinks {
	if o == nil || IsNil(o.Links) {
		var ret DaVinciConnectorDetailsResponseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetLinksOk() (*DaVinciConnectorDetailsResponseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DaVinciConnectorDetailsResponseLinks and assigns it to the Links field.
func (o *DaVinciConnectorDetailsResponse) SetLinks(v DaVinciConnectorDetailsResponseLinks) {
	o.Links = &v
}

// GetAccountConfigView returns the AccountConfigView field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetAccountConfigView() DaVinciConnectorDetailsResponseAccountConfigView {
	if o == nil || IsNil(o.AccountConfigView) {
		var ret DaVinciConnectorDetailsResponseAccountConfigView
		return ret
	}
	return *o.AccountConfigView
}

// GetAccountConfigViewOk returns a tuple with the AccountConfigView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetAccountConfigViewOk() (*DaVinciConnectorDetailsResponseAccountConfigView, bool) {
	if o == nil || IsNil(o.AccountConfigView) {
		return nil, false
	}
	return o.AccountConfigView, true
}

// HasAccountConfigView returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasAccountConfigView() bool {
	if o != nil && !IsNil(o.AccountConfigView) {
		return true
	}

	return false
}

// SetAccountConfigView gets a reference to the given DaVinciConnectorDetailsResponseAccountConfigView and assigns it to the AccountConfigView field.
func (o *DaVinciConnectorDetailsResponse) SetAccountConfigView(v DaVinciConnectorDetailsResponseAccountConfigView) {
	o.AccountConfigView = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetCapabilities() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Capabilities) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetCapabilitiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given map[string]map[string]interface{} and assigns it to the Capabilities field.
func (o *DaVinciConnectorDetailsResponse) SetCapabilities(v map[string]map[string]interface{}) {
	o.Capabilities = v
}

// GetCredentialsView returns the CredentialsView field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetCredentialsView() DaVinciConnectorDetailsResponseCredentialsView {
	if o == nil || IsNil(o.CredentialsView) {
		var ret DaVinciConnectorDetailsResponseCredentialsView
		return ret
	}
	return *o.CredentialsView
}

// GetCredentialsViewOk returns a tuple with the CredentialsView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetCredentialsViewOk() (*DaVinciConnectorDetailsResponseCredentialsView, bool) {
	if o == nil || IsNil(o.CredentialsView) {
		return nil, false
	}
	return o.CredentialsView, true
}

// HasCredentialsView returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasCredentialsView() bool {
	if o != nil && !IsNil(o.CredentialsView) {
		return true
	}

	return false
}

// SetCredentialsView gets a reference to the given DaVinciConnectorDetailsResponseCredentialsView and assigns it to the CredentialsView field.
func (o *DaVinciConnectorDetailsResponse) SetCredentialsView(v DaVinciConnectorDetailsResponseCredentialsView) {
	o.CredentialsView = &v
}

// GetFlowSections returns the FlowSections field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetFlowSections() []DaVinciConnectorDetailsResponseFlowSection {
	if o == nil || IsNil(o.FlowSections) {
		var ret []DaVinciConnectorDetailsResponseFlowSection
		return ret
	}
	return o.FlowSections
}

// GetFlowSectionsOk returns a tuple with the FlowSections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetFlowSectionsOk() ([]DaVinciConnectorDetailsResponseFlowSection, bool) {
	if o == nil || IsNil(o.FlowSections) {
		return nil, false
	}
	return o.FlowSections, true
}

// HasFlowSections returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasFlowSections() bool {
	if o != nil && !IsNil(o.FlowSections) {
		return true
	}

	return false
}

// SetFlowSections gets a reference to the given []DaVinciConnectorDetailsResponseFlowSection and assigns it to the FlowSections field.
func (o *DaVinciConnectorDetailsResponse) SetFlowSections(v []DaVinciConnectorDetailsResponseFlowSection) {
	o.FlowSections = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *DaVinciConnectorDetailsResponse) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *DaVinciConnectorDetailsResponse) GetSections() []DaVinciConnectorDetailsResponseSection {
	if o == nil || IsNil(o.Sections) {
		var ret []DaVinciConnectorDetailsResponseSection
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciConnectorDetailsResponse) GetSectionsOk() ([]DaVinciConnectorDetailsResponseSection, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *DaVinciConnectorDetailsResponse) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []DaVinciConnectorDetailsResponseSection and assigns it to the Sections field.
func (o *DaVinciConnectorDetailsResponse) SetSections(v []DaVinciConnectorDetailsResponseSection) {
	o.Sections = v
}

func (o DaVinciConnectorDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciConnectorDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment"] = o.Environment
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.AccountConfigView) {
		toSerialize["accountConfigView"] = o.AccountConfigView
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.CredentialsView) {
		toSerialize["credentialsView"] = o.CredentialsView
	}
	if !IsNil(o.FlowSections) {
		toSerialize["flowSections"] = o.FlowSections
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciConnectorDetailsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciConnectorDetailsResponse := _DaVinciConnectorDetailsResponse{}

	err = json.Unmarshal(data, &varDaVinciConnectorDetailsResponse)

	if err != nil {
		return err
	}

	*o = DaVinciConnectorDetailsResponse(varDaVinciConnectorDetailsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "_links")
		delete(additionalProperties, "accountConfigView")
		delete(additionalProperties, "capabilities")
		delete(additionalProperties, "credentialsView")
		delete(additionalProperties, "flowSections")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "sections")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciConnectorDetailsResponse) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("environment", o.Environment))
	if !IsNil(o.Links) {
		logAttrs = append(logAttrs, slog.Any("_links", *o.Links))
	}
	if !IsNil(o.AccountConfigView) {
		logAttrs = append(logAttrs, slog.Any("accountConfigView", *o.AccountConfigView))
	}
	if !IsNil(o.Capabilities) {
		logAttrs = append(logAttrs, slog.Any("capabilities", o.Capabilities))
	}
	if !IsNil(o.CredentialsView) {
		logAttrs = append(logAttrs, slog.Any("credentialsView", *o.CredentialsView))
	}
	if !IsNil(o.FlowSections) {
		logAttrs = append(logAttrs, slog.Any("flowSections", o.FlowSections))
	}
	if !IsNil(o.Properties) {
		logAttrs = append(logAttrs, slog.Any("properties", o.Properties))
	}
	if !IsNil(o.Sections) {
		logAttrs = append(logAttrs, slog.Any("sections", o.Sections))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciConnectorDetailsResponse struct {
	value *DaVinciConnectorDetailsResponse
	isSet bool
}

func (v NullableDaVinciConnectorDetailsResponse) Get() *DaVinciConnectorDetailsResponse {
	return v.value
}

func (v *NullableDaVinciConnectorDetailsResponse) Set(val *DaVinciConnectorDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciConnectorDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciConnectorDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciConnectorDetailsResponse(val *DaVinciConnectorDetailsResponse) *NullableDaVinciConnectorDetailsResponse {
	return &NullableDaVinciConnectorDetailsResponse{value: val, isSet: true}
}

func (v NullableDaVinciConnectorDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciConnectorDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
