// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"strings"

	"github.com/google/uuid"
)

// checks if the ForbiddenError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForbiddenError{}

// checks if the ForbiddenError type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &ForbiddenError{}

// ForbiddenError struct for ForbiddenError
type ForbiddenError struct {
	Id                   uuid.UUID              `json:"id"`
	Code                 ForbiddenErrorCode     `json:"code"`
	Message              string                 `json:"message"`
	Details              []ForbiddenErrorDetail `json:"details,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ForbiddenError ForbiddenError

// NewForbiddenError instantiates a new ForbiddenError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForbiddenError(id uuid.UUID, code ForbiddenErrorCode, message string) *ForbiddenError {
	this := ForbiddenError{}
	this.Id = id
	this.Code = code
	this.Message = message
	return &this
}

// NewForbiddenErrorWithDefaults instantiates a new ForbiddenError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForbiddenErrorWithDefaults() *ForbiddenError {
	this := ForbiddenError{}
	return &this
}

// GetId returns the Id field value
func (o *ForbiddenError) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ForbiddenError) SetId(v uuid.UUID) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *ForbiddenError) GetCode() ForbiddenErrorCode {
	if o == nil {
		var ret ForbiddenErrorCode
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetCodeOk() (*ForbiddenErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ForbiddenError) SetCode(v ForbiddenErrorCode) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *ForbiddenError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ForbiddenError) SetMessage(v string) {
	o.Message = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ForbiddenError) GetDetails() []ForbiddenErrorDetail {
	if o == nil || IsNil(o.Details) {
		var ret []ForbiddenErrorDetail
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetDetailsOk() ([]ForbiddenErrorDetail, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ForbiddenError) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ForbiddenErrorDetail and assigns it to the Details field.
func (o *ForbiddenError) SetDetails(v []ForbiddenErrorDetail) {
	o.Details = v
}

func (o ForbiddenError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForbiddenError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ForbiddenError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForbiddenError := _ForbiddenError{}

	err = json.Unmarshal(data, &varForbiddenError)

	if err != nil {
		return err
	}

	*o = ForbiddenError(varForbiddenError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o ForbiddenError) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("code", o.Code))
	logAttrs = append(logAttrs, slog.Any("message", o.Message))
	if !IsNil(o.Details) {
		logAttrs = append(logAttrs, slog.Any("details", o.Details))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

func (o ForbiddenError) Error() string {

	message := []string{}
	message = append(message, string(o.Code))

	return strings.Join(message, ": ")
}

type NullableForbiddenError struct {
	value *ForbiddenError
	isSet bool
}

func (v NullableForbiddenError) Get() *ForbiddenError {
	return v.value
}

func (v *NullableForbiddenError) Set(val *ForbiddenError) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenError) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenError(val *ForbiddenError) *NullableForbiddenError {
	return &NullableForbiddenError{value: val, isSet: true}
}

func (v NullableForbiddenError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
