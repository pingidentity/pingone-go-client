// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// DaVinciApplicationOAuthScope the model 'DaVinciApplicationOAuthScope'
type DaVinciApplicationOAuthScope string

// List of DaVinci_Application_OAuth_Scope
const (
	DAVINCIAPPLICATIONOAUTHSCOPE_FLOW_ANALYTICS DaVinciApplicationOAuthScope = "flow_analytics"
	DAVINCIAPPLICATIONOAUTHSCOPE_OFFLINE_ACCESS DaVinciApplicationOAuthScope = "offline_access"
	DAVINCIAPPLICATIONOAUTHSCOPE_OPENID         DaVinciApplicationOAuthScope = "openid"
	DAVINCIAPPLICATIONOAUTHSCOPE_PROFILE        DaVinciApplicationOAuthScope = "profile"
)

// All allowed values of DaVinciApplicationOAuthScope enum
var AllowedDaVinciApplicationOAuthScopeEnumValues = []DaVinciApplicationOAuthScope{
	"flow_analytics",
	"offline_access",
	"openid",
	"profile",
}

func (v *DaVinciApplicationOAuthScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaVinciApplicationOAuthScope(value)
	for _, existing := range AllowedDaVinciApplicationOAuthScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = DaVinciApplicationOAuthScope(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewDaVinciApplicationOAuthScopeFromValue returns a pointer to a valid DaVinciApplicationOAuthScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaVinciApplicationOAuthScopeFromValue(v string) (*DaVinciApplicationOAuthScope, error) {
	ev := DaVinciApplicationOAuthScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaVinciApplicationOAuthScope: valid values are %v", v, AllowedDaVinciApplicationOAuthScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaVinciApplicationOAuthScope) IsValid() bool {
	for _, existing := range AllowedDaVinciApplicationOAuthScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaVinci_Application_OAuth_Scope value
func (v DaVinciApplicationOAuthScope) Ptr() *DaVinciApplicationOAuthScope {
	return &v
}

type NullableDaVinciApplicationOAuthScope struct {
	value *DaVinciApplicationOAuthScope
	isSet bool
}

func (v NullableDaVinciApplicationOAuthScope) Get() *DaVinciApplicationOAuthScope {
	return v.value
}

func (v *NullableDaVinciApplicationOAuthScope) Set(val *DaVinciApplicationOAuthScope) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciApplicationOAuthScope) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciApplicationOAuthScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciApplicationOAuthScope(val *DaVinciApplicationOAuthScope) *NullableDaVinciApplicationOAuthScope {
	return &NullableDaVinciApplicationOAuthScope{value: val, isSet: true}
}

func (v NullableDaVinciApplicationOAuthScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciApplicationOAuthScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
