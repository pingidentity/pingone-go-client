// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentReplaceRequestStatus the model 'EnvironmentReplaceRequestStatus'
type EnvironmentReplaceRequestStatus string

// List of Environment_Replace_Request_Status
const (
	ENVIRONMENTREPLACEREQUESTSTATUS_ACTIVE         EnvironmentReplaceRequestStatus = "ACTIVE"
	ENVIRONMENTREPLACEREQUESTSTATUS_DELETE_PENDING EnvironmentReplaceRequestStatus = "DELETE_PENDING"
)

// All allowed values of EnvironmentReplaceRequestStatus enum
var AllowedEnvironmentReplaceRequestStatusEnumValues = []EnvironmentReplaceRequestStatus{
	"ACTIVE",
	"DELETE_PENDING",
}

func (v *EnvironmentReplaceRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentReplaceRequestStatus(value)
	for _, existing := range AllowedEnvironmentReplaceRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentReplaceRequestStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentReplaceRequestStatusFromValue returns a pointer to a valid EnvironmentReplaceRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentReplaceRequestStatusFromValue(v string) (*EnvironmentReplaceRequestStatus, error) {
	ev := EnvironmentReplaceRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentReplaceRequestStatus: valid values are %v", v, AllowedEnvironmentReplaceRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentReplaceRequestStatus) IsValid() bool {
	for _, existing := range AllowedEnvironmentReplaceRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Replace_Request_Status value
func (v EnvironmentReplaceRequestStatus) Ptr() *EnvironmentReplaceRequestStatus {
	return &v
}

type NullableEnvironmentReplaceRequestStatus struct {
	value *EnvironmentReplaceRequestStatus
	isSet bool
}

func (v NullableEnvironmentReplaceRequestStatus) Get() *EnvironmentReplaceRequestStatus {
	return v.value
}

func (v *NullableEnvironmentReplaceRequestStatus) Set(val *EnvironmentReplaceRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentReplaceRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentReplaceRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentReplaceRequestStatus(val *EnvironmentReplaceRequestStatus) *NullableEnvironmentReplaceRequestStatus {
	return &NullableEnvironmentReplaceRequestStatus{value: val, isSet: true}
}

func (v NullableEnvironmentReplaceRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentReplaceRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
