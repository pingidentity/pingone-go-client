// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - Go SDK

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: developerexperiences@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
)

// EnvironmentReplaceRequestRegion the model 'EnvironmentReplaceRequestRegion'
type EnvironmentReplaceRequestRegion string

// List of Environment_Replace_Request_Region
const (
	ENVIRONMENTREPLACEREQUESTREGION_AP EnvironmentReplaceRequestRegion = "AP"
	ENVIRONMENTREPLACEREQUESTREGION_AU EnvironmentReplaceRequestRegion = "AU"
	ENVIRONMENTREPLACEREQUESTREGION_CA EnvironmentReplaceRequestRegion = "CA"
	ENVIRONMENTREPLACEREQUESTREGION_EU EnvironmentReplaceRequestRegion = "EU"
	ENVIRONMENTREPLACEREQUESTREGION_NA EnvironmentReplaceRequestRegion = "NA"
	ENVIRONMENTREPLACEREQUESTREGION_SG EnvironmentReplaceRequestRegion = "SG"
)

// All allowed values of EnvironmentReplaceRequestRegion enum
var AllowedEnvironmentReplaceRequestRegionEnumValues = []EnvironmentReplaceRequestRegion{
	"AP",
	"AU",
	"CA",
	"EU",
	"NA",
	"SG",
}

func (v *EnvironmentReplaceRequestRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentReplaceRequestRegion(value)
	for _, existing := range AllowedEnvironmentReplaceRequestRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnvironmentReplaceRequestRegion(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnvironmentReplaceRequestRegionFromValue returns a pointer to a valid EnvironmentReplaceRequestRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentReplaceRequestRegionFromValue(v string) (*EnvironmentReplaceRequestRegion, error) {
	ev := EnvironmentReplaceRequestRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentReplaceRequestRegion: valid values are %v", v, AllowedEnvironmentReplaceRequestRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentReplaceRequestRegion) IsValid() bool {
	for _, existing := range AllowedEnvironmentReplaceRequestRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environment_Replace_Request_Region value
func (v EnvironmentReplaceRequestRegion) Ptr() *EnvironmentReplaceRequestRegion {
	return &v
}

type NullableEnvironmentReplaceRequestRegion struct {
	value *EnvironmentReplaceRequestRegion
	isSet bool
}

func (v NullableEnvironmentReplaceRequestRegion) Get() *EnvironmentReplaceRequestRegion {
	return v.value
}

func (v *NullableEnvironmentReplaceRequestRegion) Set(val *EnvironmentReplaceRequestRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentReplaceRequestRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentReplaceRequestRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentReplaceRequestRegion(val *EnvironmentReplaceRequestRegion) *NullableEnvironmentReplaceRequestRegion {
	return &NullableEnvironmentReplaceRequestRegion{value: val, isSet: true}
}

func (v NullableEnvironmentReplaceRequestRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentReplaceRequestRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
