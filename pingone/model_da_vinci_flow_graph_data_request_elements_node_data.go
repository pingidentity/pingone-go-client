// Copyright Â© 2025 Ping Identity Corporation
/*
PingOne Platform User and Configuration Management API - SDK Generator

PingOne is a cloud-based framework for secure identity access management. The PingOne API gives developers the tools to integrate enterprise and third-party applications with the PingOne platform.

Contact: devex@pingidentity.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
	"fmt"
	"log/slog"
)

// checks if the DaVinciFlowGraphDataRequestElementsNodeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaVinciFlowGraphDataRequestElementsNodeData{}

// checks if the DaVinciFlowGraphDataRequestElementsNodeData type satisfies the LogValuer interface at compile time
var _ slog.LogValuer = &DaVinciFlowGraphDataRequestElementsNodeData{}

// DaVinciFlowGraphDataRequestElementsNodeData struct for DaVinciFlowGraphDataRequestElementsNodeData
type DaVinciFlowGraphDataRequestElementsNodeData struct {
	Id                   string                 `json:"id"`
	NodeType             string                 `json:"nodeType"`
	CapabilityName       *string                `json:"capabilityName,omitempty"`
	ConnectionId         *string                `json:"connectionId,omitempty"`
	ConnectorId          *string                `json:"connectorId,omitempty"`
	Label                *string                `json:"label,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Properties           map[string]interface{} `json:"properties,omitempty"`
	Status               *string                `json:"status,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DaVinciFlowGraphDataRequestElementsNodeData DaVinciFlowGraphDataRequestElementsNodeData

// NewDaVinciFlowGraphDataRequestElementsNodeData instantiates a new DaVinciFlowGraphDataRequestElementsNodeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaVinciFlowGraphDataRequestElementsNodeData(id string, nodeType string) *DaVinciFlowGraphDataRequestElementsNodeData {
	this := DaVinciFlowGraphDataRequestElementsNodeData{}
	this.Id = id
	this.NodeType = nodeType
	return &this
}

// NewDaVinciFlowGraphDataRequestElementsNodeDataWithDefaults instantiates a new DaVinciFlowGraphDataRequestElementsNodeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaVinciFlowGraphDataRequestElementsNodeDataWithDefaults() *DaVinciFlowGraphDataRequestElementsNodeData {
	this := DaVinciFlowGraphDataRequestElementsNodeData{}
	return &this
}

// GetId returns the Id field value
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetId(v string) {
	o.Id = v
}

// GetNodeType returns the NodeType field value
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetNodeType(v string) {
	o.NodeType = v
}

// GetCapabilityName returns the CapabilityName field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetCapabilityName() string {
	if o == nil || IsNil(o.CapabilityName) {
		var ret string
		return ret
	}
	return *o.CapabilityName
}

// GetCapabilityNameOk returns a tuple with the CapabilityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetCapabilityNameOk() (*string, bool) {
	if o == nil || IsNil(o.CapabilityName) {
		return nil, false
	}
	return o.CapabilityName, true
}

// HasCapabilityName returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasCapabilityName() bool {
	if o != nil && !IsNil(o.CapabilityName) {
		return true
	}

	return false
}

// SetCapabilityName gets a reference to the given string and assigns it to the CapabilityName field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetCapabilityName(v string) {
	o.CapabilityName = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DaVinciFlowGraphDataRequestElementsNodeData) SetType(v string) {
	o.Type = &v
}

func (o DaVinciFlowGraphDataRequestElementsNodeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaVinciFlowGraphDataRequestElementsNodeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["nodeType"] = o.NodeType
	if !IsNil(o.CapabilityName) {
		toSerialize["capabilityName"] = o.CapabilityName
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connectionId"] = o.ConnectionId
	}
	if !IsNil(o.ConnectorId) {
		toSerialize["connectorId"] = o.ConnectorId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DaVinciFlowGraphDataRequestElementsNodeData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"nodeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaVinciFlowGraphDataRequestElementsNodeData := _DaVinciFlowGraphDataRequestElementsNodeData{}

	err = json.Unmarshal(data, &varDaVinciFlowGraphDataRequestElementsNodeData)

	if err != nil {
		return err
	}

	*o = DaVinciFlowGraphDataRequestElementsNodeData(varDaVinciFlowGraphDataRequestElementsNodeData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "nodeType")
		delete(additionalProperties, "capabilityName")
		delete(additionalProperties, "connectionId")
		delete(additionalProperties, "connectorId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

func (o DaVinciFlowGraphDataRequestElementsNodeData) LogValue() slog.Value {
	logAttrs := make([]slog.Attr, 0)

	logAttrs = append(logAttrs, slog.Any("id", o.Id))
	logAttrs = append(logAttrs, slog.Any("nodeType", o.NodeType))
	if !IsNil(o.CapabilityName) {
		logAttrs = append(logAttrs, slog.Any("capabilityName", *o.CapabilityName))
	}
	if !IsNil(o.ConnectionId) {
		logAttrs = append(logAttrs, slog.Any("connectionId", *o.ConnectionId))
	}
	if !IsNil(o.ConnectorId) {
		logAttrs = append(logAttrs, slog.Any("connectorId", *o.ConnectorId))
	}
	if !IsNil(o.Label) {
		logAttrs = append(logAttrs, slog.Any("label", *o.Label))
	}
	if !IsNil(o.Name) {
		logAttrs = append(logAttrs, slog.Any("name", *o.Name))
	}
	if !IsNil(o.Properties) {
		logAttrs = append(logAttrs, slog.Any("properties", o.Properties))
	}
	if !IsNil(o.Status) {
		logAttrs = append(logAttrs, slog.Any("status", *o.Status))
	}
	if !IsNil(o.Type) {
		logAttrs = append(logAttrs, slog.Any("type", *o.Type))
	}
	logAttrs = append(logAttrs, slog.Any("additionalProperties", o.AdditionalProperties))

	return slog.GroupValue(logAttrs...)
}

type NullableDaVinciFlowGraphDataRequestElementsNodeData struct {
	value *DaVinciFlowGraphDataRequestElementsNodeData
	isSet bool
}

func (v NullableDaVinciFlowGraphDataRequestElementsNodeData) Get() *DaVinciFlowGraphDataRequestElementsNodeData {
	return v.value
}

func (v *NullableDaVinciFlowGraphDataRequestElementsNodeData) Set(val *DaVinciFlowGraphDataRequestElementsNodeData) {
	v.value = val
	v.isSet = true
}

func (v NullableDaVinciFlowGraphDataRequestElementsNodeData) IsSet() bool {
	return v.isSet
}

func (v *NullableDaVinciFlowGraphDataRequestElementsNodeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaVinciFlowGraphDataRequestElementsNodeData(val *DaVinciFlowGraphDataRequestElementsNodeData) *NullableDaVinciFlowGraphDataRequestElementsNodeData {
	return &NullableDaVinciFlowGraphDataRequestElementsNodeData{value: val, isSet: true}
}

func (v NullableDaVinciFlowGraphDataRequestElementsNodeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaVinciFlowGraphDataRequestElementsNodeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
